<type ver="2" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" base-type="Rectangle" uuid="521d4d69-1b32-4210-ae17-099df1125e3c" display-name="Alarms_Table" name="Alarms_Table" access-modifier="public">
	<designed target="X" value="0" ver="2"/>
	<designed target="Y" value="0" ver="2"/>
	<designed target="Rotation" value="0" ver="2"/>
	<designed target="Scale" value="1" ver="2"/>
	<designed target="Visible" value="true" ver="2"/>
	<designed target="Enabled" value="true" ver="2"/>
	<designed target="Tooltip" value="" ver="2"/>
	<designed target="Width" value="1000" ver="2"/>
	<designed target="Height" value="600" ver="2"/>
	<designed target="RoundingRadius" value="0" ver="2"/>
	<designed target="PenColor" value="0xff5f5f5f" ver="2"/>
	<designed target="PenStyle" value="1" ver="2"/>
	<designed target="PenWidth" value="1" ver="2"/>
	<designed target="BrushColor" value="0xfff0f0f0" ver="2"/>
	<designed target="BrushStyle" value="1" ver="2"/>
	<object access-modifier="private" name="ApSource" display-name="ApSource" uuid="c35bff50-5526-470e-9991-290c195327e5" base-type="ApSource" base-type-id="966603da-f05e-4b4d-8ef0-919efbf8ab2c" ver="2">
		<designed target="Active" value="true" ver="2"/>
		<init target="ParentSource" ver="5" ref="init_ApSource"/>
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnConnectionStateChanged">
			<body kind="om">
				<![CDATA[//Запуск оперативного режима
if (connectionState == 2 && Main_panel.private.InitComplete)
	Main_panel.private.func_Operative_mode(); ]]>
			</body>
		</do-on>
		<do access-modifier="private" name="Acknowledge" display-name="Acknowledge" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[//функция квитирования с уменьшенным набором параметров, и временем активации в строковом формате
activeTime: uint8 = String.ToUint8(time, 0);
Ack(source, condition, Main_panel.private.AckComment, Main_panel.private.UserName, activeTime /*OM only*/, cookie);
]]>
			</body>
			<param access-modifier="private" name="source" display-name="" uuid="ec044e13-061b-4cf0-8dbe-29f15a499798" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="condition" display-name="" uuid="738e8f92-fdd5-428d-b0f2-5b090bb265bb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="time" display-name="" uuid="3d097151-6aea-4a88-817e-6d45986eff0d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
			<param access-modifier="private" name="cookie" display-name="" uuid="10357d28-33cc-4ae7-bb66-5109fd5c4c5e" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="5"/>
		</do>
	</object>
	<object access-modifier="private" name="Main_panel" display-name="Main_panel" uuid="9e972878-7f85-455b-a9ce-2479bd5a0857" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="2">
		<designed target="X" value="0" ver="2"/>
		<designed target="Y" value="0" ver="2"/>
		<designed target="Rotation" value="0" ver="2"/>
		<designed target="Scale" value="1" ver="2"/>
		<designed target="Visible" value="false" ver="2"/>
		<designed target="Enabled" value="true" ver="2"/>
		<designed target="Tooltip" value="" ver="2"/>
		<designed target="Width" value="1000" ver="2"/>
		<designed target="Height" value="32" ver="2"/>
		<designed target="RoundingRadius" value="0" ver="2"/>
		<designed target="PenColor" value="0xff000000" ver="2"/>
		<designed target="PenStyle" value="0" ver="2"/>
		<designed target="PenWidth" value="1" ver="2"/>
		<designed target="BrushColor" value="4278190080" ver="2"/>
		<designed target="BrushStyle" value="0" ver="2"/>
		<object access-modifier="private" name="ToolBar" display-name="ToolBar" uuid="a97fa27e-afe4-43cc-a219-c3e7751f11d3" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
			<designed target="X" value="0" ver="2"/>
			<designed target="Y" value="0" ver="2"/>
			<designed target="Rotation" value="0" ver="2"/>
			<designed target="Scale" value="1" ver="2"/>
			<designed target="Visible" value="false" ver="2"/>
			<designed target="Enabled" value="true" ver="2"/>
			<designed target="Tooltip" value="" ver="2"/>
			<object access-modifier="private" name="btnLogin" display-name="btnLogin" uuid="47dc715e-3c64-4454-a599-d59a0da08bdc" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="6ae6ad8e-3a18-49c7-815e-732d8a7bd3f2" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && UseSecurity]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="404013ec-7056-4552-9ebc-c5273f53b9c5" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
			</object>
			<object access-modifier="private" name="btnOperMode" display-name="btnOperMode" uuid="ef8bc27d-402d-42d0-9d2b-6b92dfec3ae4" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="d6b6fe6b-ba38-4e71-bf8e-06a9c53ad90c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[if (ActiveMode == 1) ActiveMode = 0;]]>
					</body>
				</do-on>
				<object access-modifier="private" name="Checked" display-name="Checked" uuid="4b389c45-816f-49bd-891e-16bff0f2add9" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Checked" ver="5">
					<body>
						<![CDATA[ActiveMode==0]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="d022317b-4f53-4657-bbf0-7991dbcddc6f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.ViewCurrentEvents]]>
					</body>
				</do-trace>
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
			</object>
			<object access-modifier="private" name="btnHistMode" display-name="btnHistMode" uuid="f74620fc-e89e-4f80-8383-0ccbbf9c0679" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="Checked" display-name="Checked" uuid="7d002d03-9b15-4b1e-bc1d-d16361ebcfb1" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Checked" ver="5">
					<body>
						<![CDATA[ActiveMode==1]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="362ffc57-676e-484f-b7db-1daac2e85c78" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.ViewEventHistory]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="470101e9-fdd7-489d-8ce2-4d286750b7fc" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[if (ActiveMode == 0) ActiveMode = 1;]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnSettings" display-name="btnSettings" uuid="9bac6cc6-89cf-4f22-a6de-e5694691cece" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="9918cdcd-e4eb-4adf-8adc-141a0fb26e84" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && private.Permission.EditingSettings]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="057ecf30-d2e9-4a98-a13b-56d2671178cc" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Main_panel.private.EditSettings.Invoke();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnOpen" display-name="btnOpen" uuid="92532429-8cdb-4fc3-9fee-825b0314aae8" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="f2c501d0-2a92-45f3-8e8c-b0c8d9f70088" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Active" display-name="Active" uuid="76517bfe-9216-46e7-94e9-0b6be9fe6990" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[!Main_panel.private.LoadSaveBusy]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="47110369-69ed-4fb9-94ca-3dbeda766fe6" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Main_panel.private.ShowOpenDialog.Invoke();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnSave" display-name="btnSave" uuid="cc9a4652-abf2-4ef1-bca3-fc9fdc47811d" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="cc83d71d-5c41-419b-b796-b3acff32d443" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Active" display-name="Active" uuid="f2636066-1d2c-4ca9-8882-eb96c1531d63" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[!Main_panel.private.LoadSaveBusy && (ActiveMode == 0 ? !Main_panel.private.OperTableEmpty : !Main_panel.private.HistTableEmpty)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="1b9616aa-6020-4908-b74f-993855bd2fc9" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[exportFolder: string = Main_panel.private.Export.ExportPath;
Main_panel.private.CreateFolderIfNotExist(exportFolder);
if (File.Exists(exportFolder))
	Main_panel.private.ShowSaveDialog.Invoke();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnExport" display-name="btnExport" uuid="e66a5b7a-3a0d-4f7a-8149-da7d698dfdfa" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="d499c7f5-53ac-4a04-a6f7-0251c8010271" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.ExportData]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Active" display-name="Active" uuid="ba08861b-45d1-4b9f-a6e5-f0144b5b1469" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[!Main_panel.private.LoadSaveBusy && (ActiveMode == 0 ? !Main_panel.private.OperTableEmpty : !Main_panel.private.HistTableEmpty)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="d1f7059c-c8ad-41b1-b27d-7b10812609d5" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[if (ActiveMode == 0)
	Main_panel.private.ExportOperTable.Invoke();
else Main_panel.private.ExportHistoryTable.Invoke();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnPrint" display-name="btnPrint" uuid="34528485-8f35-4626-9193-808ad0deeb61" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="8ee252b5-3c6e-407a-a137-f737d9c0e331" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.Printing]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Active" display-name="Active" uuid="bd275fa6-5ab5-41e4-9c00-17c3ef54c900" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[!Main_panel.private.LoadSaveBusy && (ActiveMode == 0 ? !Main_panel.private.OperTableEmpty : !Main_panel.private.HistTableEmpty)]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Main_panel.private.OpenPrintForm.Invoke();]]>
					</body>
				</do-on>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="7cc18683-422c-4ba7-9d1b-242e99996e52" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
			</object>
			<object access-modifier="private" name="btnFiltr" display-name="btnFiltr" uuid="8dbedd6f-e1e8-4d9d-83dd-fada8458890c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="c6cf540f-b683-4539-bf13-ce3d11f6d478" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.Filtering]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="c5036e71-392e-42fe-bff1-dc8a605c5944" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Main_panel.private.ShowViewFilter.Invoke();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnFiltrList" display-name="btnFiltrList" uuid="8bae1e21-8d1a-4efe-89b2-bc4ec9266323" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="81bbc451-6d2f-4c72-b48b-2fbc33b6f0a0" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.Filtering]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="9fa8ed14-35f1-49e6-9481-57dd23392ab3" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[// формируем коллекцию предустановленных фильтров
var presets = [];
for (let i = 0; i < Main_panel.private.PresetFilters.used.Length; i++)
{
	if (Main_panel.private.PresetFilters.used[i])
	{
		var filterName = Main_panel.private.PresetFilters.name[i];
		presets.push({ 'id': "preset" + i, 'title': filterName,
			'checked': Main_panel.private.ViewFilter.JsonFilter.UsedFiltersContainKey(filterName),
			'staysOpen': (Main_panel.private.PresetFilters.mode>0) });
	}
}

var items = [];

// без фильтрации
var withoutFilter = !StatePanel.ViewFilterON.Value &&
	Main_panel.private.ViewFilter.JsonFilter.used_filters == ""; // #25888 может быть задан пустой предустановленный
items.push({ 'id': "withoutFilter", 'title': "Без фильтра", 'checked': withoutFilter });
items.push({ 'title': "-" });

// пользовательский фильтр
var presetFilterActive = presets.some(p => p.checked == true);
var customFilterUsed = StatePanel.ViewFilterON.Value && !presetFilterActive &&
	Main_panel.private.ViewFilter.JsonFilter.used_filters == ""; // #25889 фильтр должен быть задан явно
items.push({ 'id': "customFilter", 'title': "Фильтр пользователя", 'checked': customFilterUsed });

// предустановленные фильтры
if (presets.length > 0)
{
	items.push({ 'title': "-" });
	for(let i = 0; i < presets.length; i++)
		items.push(presets[i]);
}

return JSON.stringify(items);]]>
					</body>
				</do>
				<object access-modifier="private" name="Checked" display-name="Checked" uuid="c45d3fa0-2e27-41ba-99e0-bb7f84051e02" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="OnMenuClick" display-name="OnMenuClick" uuid="1841fa93-0f79-4f9f-8189-cfe55ada18b3" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="InvokeTrigger" value="false" ver="5"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[cmd: string = Main_panel.private.MenuResult.Id;

if (cmd == "withoutFilter")
{
	Main_panel.private.ViewFilter.JsonFilter.used_filters = "";
	c: int4 = 0;
	while (c < Main_tables_Operative.Table_Operative_mode.Columns.Length)
	{
		if (Main_tables_Operative.Table_Operative_mode.Columns[c].Title != "-")//cheat1
			SetAdvancedFilterAsJson(Main_tables_Operative.Table_Operative_mode.Columns[c].Id, "");
		c +=1;
	}
}
else if (cmd == "customFilter")
{
	Main_panel.private.ShowViewFilter.Invoke();
}
else if (String.StartsWith(cmd, "preset"))
{
	i: int4 = String.ToInt4(String.SubString(cmd, 6), -1);
	if (i > -1)
		Main_panel.private.ViewFilter.JsonFilter.UsedFiltersPreset(Main_panel.private.PresetFilters.name[i]);
}

// при изменении видимости столбцов переоткрываем меню
if (Main_panel.private.MenuResult.StaysOpen)
	btnFiltrList.Invoke();
]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="MenuClosed" display-name="MenuClosed" uuid="47ca2336-47c5-464d-8d9a-a0492fbd9073" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="InvokeTrigger" value="false" ver="5"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[Checked = false;]]>
						</body>
					</do-on>
				</object>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-new" form-by-id="false">
					<object access-modifier="private" uuid="723dd5f6-f4f8-4e86-9750-4e05cfb6720c" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="PointHeight" ver="5" value="30"/>
						<init target="pAction" ver="5" ref="OnMenuClick"/>
						<init target="pOnClosed" ver="5" ref="MenuClosed"/>
						<init target="pResult" ver="5" ref="Main_panel.private.MenuResult"/>
						<init target="Items" ver="5">
							<expr>
								<![CDATA[GetMenuItems()]]>
							</expr>
						</init>
						<init target="WindowX" ver="5">
							<expr>
								<![CDATA[MenuWindowX]]>
							</expr>
						</init>
						<init target="WindowY" ver="5">
							<expr>
								<![CDATA[MenuWindowY]]>
							</expr>
						</init>
					</object>
				</do-on>
				<object access-modifier="private" name="MenuWindowX" display-name="MenuWindowX" uuid="d0540302-fff7-44c4-8147-d120192e9f2e" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="MenuWindowY" display-name="MenuWindowY" uuid="8991e52e-bec7-4e8d-91c7-ebd3ff8ae7a3" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="InvokeTrigger" value="false" ver="5"/>
				<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Checked = true;]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnSort" display-name="btnSort" uuid="e9f29259-2443-4168-948f-c96c5356fa93" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="ad3c886b-dca1-426b-a84f-43ac0886afbd" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.EventTableSort]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Main_panel.private.OpenSortForm.Invoke();]]>
					</body>
				</do-on>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="4a9689a5-f82f-4592-912b-3a83e8cf8465" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
			</object>
			<object access-modifier="private" name="btnAckSel" display-name="btnAckSel" uuid="32ca604e-0c33-4521-a691-71c0c117c02b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[AckSelected();]]>
					</body>
				</do-on>
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="b64c32a4-d77e-4a18-a4cc-f52acbf96489" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && ActiveMode == 0 && Main_panel.private.Permission.Acknowledgment]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Active" display-name="Active" uuid="1f0b6835-9bac-4698-ac3c-0cb6ca2c9469" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[!FollowLatestEvent]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="0ac6334c-7191-423d-88af-996bcd80c416" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
			</object>
			<object access-modifier="private" name="btnAckAll" display-name="btnAckAll" uuid="35dc4247-283d-4d45-8ff7-0cee4c9ad25a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false">
					<body kind="om">
						<![CDATA[AckAll();]]>
					</body>
				</do-on>
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="be6268fa-0afd-40f8-a8bf-7a09c74fb233" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && AckAllAvailable && ActiveMode == 0 && Main_panel.private.Permission.Acknowledgment]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="f7b2fda7-7d8b-4cce-83e6-28039bed483e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
			</object>
			<object access-modifier="private" name="btnClearAll" display-name="btnClearAll" uuid="d92c5d75-b8a1-4c97-a7a1-779d63d4bbad" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="0c4f0973-0392-4472-a219-490678574918" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && CurrentEventsAvailable && Main_panel.private.Permission.ClearingCurrentEvents]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Active" display-name="Active" uuid="9641d7c7-957c-4177-9240-73d8c4d38ac5" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[!SnapshotON]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="6595c216-317b-4438-bc34-be93a86332e4" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[ClearOperativeEventList();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnSnapshot" display-name="btnSnapshot" uuid="bd9c17ea-9f31-43d4-a433-a2f1e61735f4" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[frozenState: bool = Main_tables_Operative.TableModel_1.Frozen; 
if (frozenState) DisplayCurrentEvents();
else DisplayCurrentEventsSnapshot();
]]>
					</body>
				</do-on>
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="bdd27e9c-84af-4edb-920f-55ab667cf127" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.Snapshot]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="0b1e6126-2cff-4a2c-b374-95f754111ceb" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
			</object>
			<object access-modifier="private" name="btnSndClear" display-name="btnSndClear" uuid="dd20b9f1-57b3-48d9-9382-f6f5ebbe59ae" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="6fd66fd4-f205-452f-8c58-3635188545bc" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.SoundManagment]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="272f324e-b22e-4113-9903-081eac4d9c6f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[ClearSoundQueue();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnSndNext" display-name="btnSndNext" uuid="9d16b49d-7877-4087-84aa-b28d47c48cf3" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="6bce1c79-05ca-4bd8-a74b-79db067d884e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.SoundManagment]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="0db9b554-f56c-463d-9bf6-3f1629be3fa8" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[// прерываем текущий звук события и переходим к следующему
SkipCurrentSound();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="btnSndMute" display-name="btnSndMute" uuid="26a3458d-ef56-4532-8c39-f97ca3d642e2" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="edbbd219-4f59-4fa9-9311-d1ec18f7d20a" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && Main_panel.private.Permission.SoundManagment]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[Mute = !Mute;]]>
					</body>
				</do-on>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="4c4bf67f-fbd8-416e-92a2-8cf7c91dd74d" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
			</object>
			<object access-modifier="private" name="SnapshotON" display-name="SnapshotON" uuid="b86255b9-8284-47f1-98b3-18ef4c2a707e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
					<body kind="om">
						<![CDATA[//Запоминание режима FollowLatestEvent и его выключение

if (value && FollowLatestEvent)
{
	Main_panel.private.followLastEventMemory = true;
	FollowLatestEvent = false;
	Main_tables_Operative.Table_Operative_mode.SetSelectedRows("[]");
}
if (!value && Main_panel.private.followLastEventMemory)
{
	Main_panel.private.followLastEventMemory = false;
	FollowLatestEvent = true;
}]]>
					</body>
				</do-on>
			</object>
			<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
				<body kind="javascript">
					<![CDATA[var filePath = File.CombinePath(private.ConfigurationPath, "toolbox.json");
if (File.Exists(filePath))
{
	//log("Загрузка конфигурации панели инструментов из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var settings = JSON.parse(json);

		btnOperMode.HideFlag.Value = IsHidded(settings.btnOperMode);
		btnHistMode.HideFlag.Value = IsHidded(settings.btnHistMode);
		btnSettings.HideFlag.Value = IsHidded(settings.btnSettings);
		btnSave.HideFlag.Value = IsHidded(settings.btnSave);
		btnOpen.HideFlag.Value = IsHidded(settings.btnOpen);
		btnExport.HideFlag.Value = IsHidded(settings.btnExport);
		btnPrint.HideFlag.Value = IsHidded(settings.btnPrint);
		btnFiltr.HideFlag.Value = IsHidded(settings.btnFiltr);
		btnFiltrList.HideFlag.Value = IsHidded(settings.btnFiltr);
		RecHistory.HideFlag.Value = IsHidded(settings.RecHistory);
		btnAckSel.HideFlag.Value = IsHidded(settings.btnAckSel);
		btnAckAll.HideFlag.Value = IsHidded(settings.btnAckAll);
		btnClearAll.HideFlag.Value = IsHidded(settings.btnClearAll);
		btnSnapshot.HideFlag.Value = IsHidded(settings.btnSnapshot);
		btnSndClear.HideFlag.Value = IsHidded(settings.btnSndClear);
		btnSndNext.HideFlag.Value = IsHidded(settings.btnSndNext);
		btnSndMute.HideFlag.Value = IsHidded(settings.btnSndMute);
		btnSort.HideFlag.Value = IsHidded(settings.btnSort);
		btnLogin.HideFlag.Value = IsHidded(settings.btnLogin);
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		return false;
	}
}

function IsHidded(btn)
{
	return btn != undefined && btn.Hidden;
}

return true;]]>
				</body>
			</do>
			<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(private.ConfigurationPath))
	return;

var filePath = File.CombinePath(private.ConfigurationPath, "toolbox.json");
//log("Сохранение конфигурации панели инструментов в файл "  + filePath);
try
{
	var settings = {};
	settings.btnOperMode = { "Hidden": btnOperMode.HideFlag.Value };
	settings.btnHistMode = { "Hidden": btnHistMode.HideFlag.Value};
	settings.btnSettings = { "Hidden": btnSettings.HideFlag.Value};
	settings.btnSave = { "Hidden": btnSave.HideFlag.Value};
	settings.btnOpen = { "Hidden": btnOpen.HideFlag.Value};
	settings.btnExport = { "Hidden": btnExport.HideFlag.Value};
	settings.btnPrint = { "Hidden": btnPrint.HideFlag.Value};
	settings.btnFiltr = { "Hidden": btnFiltr.HideFlag.Value};
	settings.RecHistory = { "Hidden": RecHistory.HideFlag.Value};
	settings.btnAckSel = { "Hidden": btnAckSel.HideFlag.Value};
	settings.btnAckAll = { "Hidden": btnAckAll.HideFlag.Value};
	settings.btnClearAll = { "Hidden": btnClearAll.HideFlag.Value};
	settings.btnSnapshot = { "Hidden": btnSnapshot.HideFlag.Value};
	settings.btnSndClear = { "Hidden": btnSndClear.HideFlag.Value};
	settings.btnSndNext = { "Hidden": btnSndNext.HideFlag.Value};
	settings.btnSndMute = { "Hidden": btnSndMute.HideFlag.Value};
	settings.btnSort = { "Hidden": btnSort.HideFlag.Value};
	settings.btnLogin = { "Hidden": btnLogin.HideFlag.Value};
	
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
				</body>
			</do>
			<designed target="ZValue" value="0" ver="4"/>
			<designed target="Opacity" value="1" ver="4"/>
			<object access-modifier="private" name="RecHistory" display-name="RecHistory" uuid="6729c5d2-431a-4f24-a0c9-823f932f0e05" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
				<designed target="X" value="1" ver="2"/>
				<designed target="Y" value="1" ver="2"/>
				<designed target="Rotation" value="0" ver="2"/>
				<object access-modifier="private" name="Date_start" display-name="Date_start" uuid="1b859fc5-4892-473d-a186-5c1353fc03a4" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="3">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[DateTimeChanged.Invoke();]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="Time_start" display-name="Time_start" uuid="e19b5440-2f1a-4c16-981c-34ca91016846" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="3">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[DateTimeChanged.Invoke();]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="Date_final" display-name="Date_final" uuid="cf3b1499-5e89-41af-b97f-d81a7ffc467b" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="3">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[DateTimeChanged.Invoke();]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="Time_final" display-name="Time_final" uuid="2184eecf-8344-4681-ac58-7badf1da7abf" base-type="notifying_timestamp" base-type-id="fb54ffc6-3bfa-4c71-8ae4-fc5d62558895" ver="3">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[DateTimeChanged.Invoke();]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="btnHistRequest" display-name="btnHistRequest" uuid="775addf8-7504-4248-bc7a-f720dd89696d" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[if (Main_panel.private.LoadSaveBusy.LoadingHistory)
	Main_panel.private.Action_RequestCancelHistoryQuery.Invoke();
else	Main_panel.private.LoadHistory();]]>
						</body>
					</do-on>
					<object access-modifier="private" name="Active" display-name="Active" uuid="7b699ae0-c597-4fef-9b58-5ab2c726b709" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
					<do-trace access-modifier="private" target="Active" ver="5">
						<body>
							<![CDATA[Main_panel.private.LoadSaveBusy || RecHistory.Error == ""]]>
						</body>
					</do-trace>
				</object>
				<object access-modifier="private" name="btnHistRequestList" display-name="btnHistRequestList" uuid="8870faa5-cc51-4f50-b095-37566cebf696" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
					<object access-modifier="private" name="Active" display-name="Active" uuid="df27a1ba-9258-4b27-9ba5-af21fee1e1d7" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
					<do-trace access-modifier="private" target="Active" ver="5">
						<body>
							<![CDATA[!Main_panel.private.LoadSaveBusy.LoadingHistory && RecHistory.Error == ""]]>
						</body>
					</do-trace>
					<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="0df52690-f50e-45c4-a8b4-d912d013b310" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
					<do-trace access-modifier="private" target="IsVisible" ver="5">
						<body>
							<![CDATA[parent.IsVisible && Main_panel.private.Permission.Filtering]]>
						</body>
					</do-trace>
					<object access-modifier="private" name="Checked" display-name="Checked" uuid="c33a00f6-43a3-45ec-a492-c66b21717192" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
					<object access-modifier="private" name="OnMenuClick" display-name="OnMenuClick" uuid="ee3a3845-5207-4d43-9942-22b7b3771cca" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="InvokeTrigger" value="false" ver="5"/>
						<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
							<body kind="om">
								<![CDATA[cmd: string = Main_panel.private.MenuResult.Id;

if (cmd == "withoutFilter")
{
	Main_tables_Historical.SetRequestFilter("");
	Main_panel.private.LoadHistory();
}
else if (cmd == "customFilter")
{
	Main_panel.private.ShowRequestFilter.Invoke();
}
else if (cmd == "byGeneration")
{
	EventsChronology = 0;
}
else if (cmd == "byActivation")
{
	EventsChronology = 1;
}]]>
							</body>
						</do-on>
					</object>
					<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
						<body kind="javascript">
							<![CDATA[var items = [];
items.push({ 'id': "withoutFilter", 'title': "Без фильтра", 'checked': !StatePanel.RequestFilterON.Value });
items.push({ 'title': "-" });
items.push({ 'id': "customFilter", 'title': "Запрос с фильтрацией", 'checked': StatePanel.RequestFilterON.Value });

if (private.RequestFilter.enableEventsChronology)
{
	items.push({ 'title': "-" });
	items.push({ 'id': "byGeneration", 'title': "По времени генерации", 'checked': (EventsChronology.Value == 0) });
	items.push({ 'id': "byActivation", 'title': "По времени срабатывания", 'checked': (EventsChronology.Value == 1) });
}
return JSON.stringify(items);]]>
						</body>
					</do>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-new" form-by-id="false">
						<object access-modifier="private" uuid="57380896-2a08-440c-8f47-9a0c398b468e" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
							<init target="PointHeight" ver="5" value="30"/>
							<init target="Items" ver="5">
								<expr>
									<![CDATA[GetMenuItems()]]>
								</expr>
							</init>
							<init target="pTheme" ver="5" ref="here.pTheme"/>
							<init target="pResult" ver="5" ref="Main_panel.private.MenuResult"/>
							<init target="pAction" ver="5" ref="OnMenuClick"/>
							<init target="WindowX" ver="5">
								<expr>
									<![CDATA[MenuWindowX]]>
								</expr>
							</init>
							<init target="WindowY" ver="5">
								<expr>
									<![CDATA[MenuWindowY]]>
								</expr>
							</init>
							<init target="pOnClosed" ver="5" ref="MenuClosed"/>
						</object>
					</do-on>
					<object access-modifier="private" name="MenuClosed" display-name="MenuClosed" uuid="6ea08a3d-fa40-4e19-b1c9-c86857a5642a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="InvokeTrigger" value="false" ver="5"/>
						<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
							<body kind="om">
								<![CDATA[Checked = false;]]>
							</body>
						</do-on>
					</object>
					<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[Checked = true;]]>
						</body>
					</do-on>
					<object access-modifier="private" name="MenuWindowX" display-name="MenuWindowX" uuid="c0938c74-ae21-470e-9bef-8ee384d7680d" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
					<object access-modifier="private" name="MenuWindowY" display-name="MenuWindowY" uuid="4e82e4d1-5b52-4bc1-ba47-6ceb1ed8d3a6" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="InvokeTrigger" value="false" ver="5"/>
				</object>
				<object access-modifier="private" name="IsVisible" display-name="IsVisible" uuid="5300b159-cb0e-4730-bd7b-50a128191d39" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
				<do-trace access-modifier="private" target="IsVisible" ver="5">
					<body>
						<![CDATA[!HideFlag && ActiveMode == 1 && Main_panel.private.Permission.ViewEventHistory.Value]]>
					</body>
				</do-trace>
				<designed target="Scale" value="1" ver="3"/>
				<designed target="Visible" value="true" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="3"/>
				<object access-modifier="private" name="HideFlag" display-name="HideFlag" uuid="9ddde135-9c6b-4142-a40e-1c7e2b5f7771" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4"/>
				<init target="IsVisible" ver="5" value="false"/>
				<do access-modifier="private" name="GetBeginInterval" display-name="GetBeginInterval" ver="5" type="timestamp" type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa">
					<body kind="om">
						<![CDATA[return DateTime.Create(DateTime.Year(Date_start.Value), DateTime.Month(Date_start.Value), DateTime.Day(Date_start.Value),
	DateTime.Hour(Time_start.Value), DateTime.Minute(Time_start.Value), DateTime.Second(Time_start.Value));]]>
					</body>
				</do>
				<do access-modifier="private" name="GetEndInterval" display-name="GetEndInterval" ver="5" type="timestamp" type-id="27c3d64b-a025-4ed3-8f63-d47e43a496aa">
					<body kind="om">
						<![CDATA[return DateTime.Create(DateTime.Year(Date_final.Value), DateTime.Month(Date_final.Value), DateTime.Day(Date_final.Value),
	DateTime.Hour(Time_final.Value), DateTime.Minute(Time_final.Value), DateTime.Second(Time_final.Value));]]>
					</body>
				</do>
				<object access-modifier="private" name="DateTimeChanged" display-name="DateTimeChanged" uuid="5b4d9546-fa23-4565-b875-e4e327e29380" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5" description="" cardinal="1">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[if (GetBeginInterval() >= GetEndInterval())
	Error = "Недопустимое значение границ интервала запроса истории";
else Error = "";]]>
						</body>
					</do-on>
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="InvokeTrigger" value="false" ver="5"/>
				</object>
				<object access-modifier="private" name="Error" display-name="Error" uuid="ac060b2a-b5cb-4ea5-82ea-1722318f3d22" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
			</object>
		</object>
		<object access-modifier="private" name="private" display-name="private" uuid="ad383bce-cd5d-411e-b5f1-4a7978aa1525" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
			<designed target="X" value="0" ver="2"/>
			<designed target="Y" value="0" ver="2"/>
			<designed target="Rotation" value="0" ver="2"/>
			<designed target="Scale" value="1" ver="2"/>
			<designed target="Visible" value="false" ver="2"/>
			<designed target="Enabled" value="true" ver="2"/>
			<designed target="Tooltip" value="" ver="2"/>
			<object access-modifier="private" name="Hist_on" display-name="Hist_on" uuid="3fe8a0ef-011e-4594-a3ad-ed24792eb874" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<object access-modifier="private" name="Oper_on" display-name="Oper_on" uuid="dfb85b4f-75f2-42b7-9839-97468dc16394" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<object access-modifier="private" name="followLastEventMemory" display-name="followLastEventMemory" uuid="bc2a0701-45ba-4c40-991c-fd9a232fab1b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
			<object access-modifier="private" name="count_of_connections" display-name="count_of_connections" uuid="f516084b-6338-4fef-a4dd-1d838a14fec1" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="2"/>
			<object access-modifier="private" name="Filter_lowSeverity" display-name="Filter_lowSeverity" uuid="39125fba-aa14-4adc-b196-4bca6fe37770" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<object access-modifier="private" name="Filter_highSeverity" display-name="Filter_highSeverity" uuid="ac68314c-b072-4399-aae5-c34369d752d1" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<object access-modifier="private" name="Filter_messages" display-name="Filter_messages" uuid="9cc62e81-9cda-466b-8fcd-ac1d37e90fd9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<object access-modifier="private" name="Filter_sources" display-name="Filter_sources" uuid="3f2bdede-7bec-4474-a8f1-416c498ab155" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<object access-modifier="private" name="Filter_off" display-name="Filter_off" uuid="685da825-9dc2-4526-a084-c42aaca860a3" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
			<object access-modifier="private" name="UserName" display-name="UserName" uuid="544c3562-0d73-40ed-aac6-4373dc437d5d" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="2"/>
			<object access-modifier="private" name="AckComment" display-name="AckComment" uuid="bedb456d-a6b4-4eaa-9d92-56885aefba12" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<object access-modifier="private" name="AckContinue" display-name="AckContinue" uuid="9d27da94-d903-406d-a57d-3d48d7b61716" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="javascript">
						<![CDATA[//Функция квитирования сообщений в нескольких режимах

// определяем режим квитирования
if (AckMode == 0)
{
	try
	{
		if (OnAck.InvokeTrigger) {}
		AckMode = 2;//внешний
	}
	catch(error)
	{
		AckMode = 1;//внутренний OPCAE
	}
}

// проверка разрешения
if (!Main_panel.private.Permission.Acknowledgment.Value) 
{	
	if (Main_panel.private.Permission.Acknowledgment.Result==-1)	Main_panel.private.MessageNoLogOn.Invoke();	
	if (Main_panel.private.Permission.Acknowledgment.Result==-2)	Main_panel.private.MessageNoPermission.Invoke();	
	return;
}

//#27841 в основном коде сбрасываем информацию о квитировании
private.EventParams[3] = "";
var sources = [];
var msgs = JSON.parse(AckedMsgs);
for (let i = 0; i < msgs.length; i++)
{
	if (AckMode == 1)
		ApSource.Acknowledge(msgs[i].source, msgs[i].condition, msgs[i].time, msgs[i].cookie);
	if (AckMode == 2)
		sources.push(msgs[i].source);
}

if (AckMode == 2 && sources.length > 0)
{//#27841 в основном коде выполняем внешнее квитирование по собранным данным
	private.EventParams[3] = JSON.stringify(sources);
	OnAck.Invoke();
}]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="DoubleClick" display-name="DoubleClick" uuid="871bc211-65f7-4634-89f5-5ffda52355be" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
					<body kind="om">
						<![CDATA[//Квитирование двойным нажатием
ackSost: variant;
ackRequest: variant;
end: bool = false;
acked: bool = false;
needToAck: bool = false;

if (AcknowledgmentDoubleClick && !FollowLatestEvent) 
{
	Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.FirstSelectedRow();
	while (!end)
	{
		if (Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetStatus() == 0 && Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetRow() == Main_panel.private.selectedRow)
		{
			ackSost = Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetData(private.TableView.Static.Column_Ack.GetIndex()); //Состояние квитирования
			ackRequest = Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetData(private.TableView.Static.Column_AckRequired.GetIndex()); //Признак квитирования
			if (!Variant.IsEmpty(ackSost)) acked = Variant.ToBool(ackSost,false); else acked = true;
			if (!Variant.IsEmpty(ackRequest)) needToAck = Variant.ToBool(ackRequest,false); else needToAck = false;
			if (!acked && needToAck) AckSelected();
			break;
		}
		end = !Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.HasNext();
		Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.Next();
	}
	Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.Close();
}
]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="nAckMode" display-name="nAckMode" uuid="20d02caa-9683-451c-a1d9-b20e540ddc35" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="2"/>
			<object access-modifier="private" name="SecurityContext_1" display-name="SecurityContext_1" uuid="6b980106-8126-441d-8118-374e7e965c1c" base-type="SecurityContext" base-type-id="d9cb0fff-b70a-4e2d-833d-3f73cf74e0dd" ver="2">
				<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="CurrentUserChanged">
					<body kind="om">
						<![CDATA[if (UseSecurity)
	UserName = CurrentUserDisplayName;
]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="BoolToken_Acknowledgment" display-name="BoolToken_Acknowledgment" uuid="cecaf780-bf51-45de-883a-afcb255a28fd" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="Acknowledgment"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_ClearCurrentEvents" display-name="BoolToken_ClearCurrentEvents" uuid="81935575-2b85-4a80-9121-f7e0848fbbde" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="ClearCurrentEvents"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_EditSettings" display-name="BoolToken_EditSettings" uuid="72d15cae-052e-4189-acee-15e302f42f91" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="EditSettings"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_ExportDataAvailability" display-name="BoolToken_ExportDataAvailability" uuid="296021cf-3943-440b-ad9e-54ccbc8dd302" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="ExportDataAvailability"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_Filtering" display-name="BoolToken_Filtering" uuid="14531ee4-d861-48b6-b71e-09acb07aac90" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="Filtering"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_SoundPlaybackManagment" display-name="BoolToken_SoundPlaybackManagment" uuid="7881cad4-8d83-47f3-b296-cf3c8bf5a13a" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="SoundPlaybackManagment"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_TakeCurrentEventsSnapshot" display-name="BoolToken_TakeCurrentEventsSnapshot" uuid="6c1ca24c-12b6-4cf2-b8c0-29c72daa5436" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="TakeCurrentEventsSnapshot"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_ViewCurrentEvents" display-name="BoolToken_ViewCurrentEvents" uuid="67d2a179-f9cf-444f-9708-20b0939f9974" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="ViewCurrentEvents"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
					<body kind="om">
						<![CDATA[PermissionChanged();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="BoolToken_ViewEventHistory" display-name="BoolToken_ViewEventHistory" uuid="1192b917-88fa-4ddf-8c42-36a350f678c7" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="ViewEventHistory"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
					<body kind="om">
						<![CDATA[PermissionChanged();]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="BoolToken_ArrangeEventHistoryIntoPages" display-name="BoolToken_ArrangeEventHistoryIntoPages" uuid="3e6b6062-5f2f-41ee-9f56-1ad9e1b4f1e3" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="ArrangeEventHistoryIntoPages"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_EventTableSortAvailability" display-name="BoolToken_EventTableSortAvailability" uuid="57ee1953-ad85-44ef-826f-d51bc3a539b4" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="EventTableSortAvailability"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="BoolToken_FileSystemAccess" display-name="BoolToken_FileSystemAccess" uuid="6aa283f4-e309-4792-95fc-54cffbec9343" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="FileSystemAccess"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
					<body kind="om">
						<![CDATA[// необходимо обновить, так как значение корневого пути экспорта зависит от этого ограничения
Export.ExportPath.Update(Export.ExportPath.Value);]]>
					</body>
				</do-on>
			</object>
			<object access-modifier="private" name="BoolToken_Printing" display-name="BoolToken_Printing" uuid="17172688-2637-4dd2-8be0-cba5eb7f31ad" base-type="BoolToken" base-type-id="9cc1c61e-9310-406a-8f93-18028f747d59" ver="2">
				<init target="Right" ver="5" value="Printing"/>
				<init target="SecurityContext" ver="5" ref="SecurityContext_1"/>
				<init target="Application" ver="5" ref="SecurityApplication"/>
			</object>
			<object access-modifier="private" name="bInit" display-name="bInit" uuid="4af7ef3a-d4eb-466c-a403-fa0aa88ef90a" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
			<do access-modifier="private" name="Initializer" display-name="Initializer" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[//Функция инициализации
if (!Main_panel.private.bInit) Main_panel.private.bInit = true; //Признак инициализации
else return;//Инициализация проходит только один раз

//DebugTool_1.Log("Initializer");

LoadConfiguration(ConfigurationFolder);

//Инициализируем видимость панелей
DisplayToolbar = DisplayToolbarAtStartup;
DisplayStatePanel = DisplayStatePanelAtStartup;

Main_panel.private.InitComplete = true;

]]>
				</body>
			</do>
			<do access-modifier="private" name="func_Operative_mode" display-name="func_Operative_mode" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[
// Дожидаемся полной инициализации и подключения к источнику
if (ApSource.ConnectionState != 2 || !Main_panel.private.InitComplete) return;

Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Filter = SubscriptionAdvancedFilter; 
Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Mode = ActiveConditionsList ? TypeConvert.ToUint1(1) : TypeConvert.ToUint1(2);

Main_tables_Operative.TableModel_1.ApAlarmQuery_1.ReloadSmart(true, true);

StatePanel.ViewFilterStateChange(); // Выводим в строку фильтр подписки и отображения]]>
				</body>
			</do>
			<do access-modifier="private" name="SaveConfiguration" display-name="SaveConfiguration" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[ToolBar.SaveSettings();
TableView.SaveSettings();
Export.SaveSettings();
EventSettings.SaveSettings();
SeverityGroups.SaveSettings();
CommentPattern.SaveSettings();
PresetFilters.SaveSettings();
ContextMenu.SaveSettings();
Print.SaveSettings();
QueryProcessing.SaveSettings();]]>
				</body>
			</do>
			<object access-modifier="private" name="selectedRow" display-name="selectedRow" uuid="fd1097f9-f99d-4bf0-991a-36837af04c52" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="2"/>
			<do access-modifier="private" name="PermissionChanged" display-name="PermissionChanged" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[//#25491 переключаем режим при недостатке прав
if (BoolToken_ViewCurrentEvents.Value && !BoolToken_ViewEventHistory.Value && ActiveMode==1)
	ActiveMode = 0;
if (!BoolToken_ViewCurrentEvents.Value && BoolToken_ViewEventHistory.Value && ActiveMode==0)
	ActiveMode = 1;]]>
				</body>
			</do>
			<object access-modifier="private" name="tempAutoScroll" display-name="tempAutoScroll" uuid="e9dcbe63-3fb2-46bf-89ef-64971952dfc7" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
			<object access-modifier="private" name="firstRowAdded" display-name="firstRowAdded" uuid="addd2527-c0b9-47a5-ae5c-3f281d33f4b5" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
			<do access-modifier="private" name="GetAlarmsSequence" display-name="GetAlarmsSequence" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="om">
					<![CDATA[//Функция поиска последовательности сообщений источника. Возвращает строку с полными тегами
end: bool = false;//Конец иттератора
AckSost: variant;//Состояние квитирования
Acked: bool;//Флаг квитирования
source:string;//Источник
sourceString: string = "";//Строка с источниками


//Выделение источников сообщений
if (ActiveMode == 0)
{
	Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.FirstSelectedRow();
	while (!end)
	{
		if (Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetStatus() == 0)
		{
	 		AckSost = Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetData(private.TableView.Static.Column_Ack.GetIndex()); //Состояние "Квитировано" в случае, если квитирование не требуется равно EMPTY, если квитировано = true, если неквитировано = false;
			source = Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.GetText(private.TableView.Static.Column_SystemSource.GetIndex());
			if (!Variant.IsEmpty(AckSost)) Acked = Variant.ToBool(AckSost,false); else Acked = true; //Если поле "Квитировано" не пустое (требуется квитирование) то смотрим на статус квитирования
			if (!Acked)
			{
				if (!String.Contains(sourceString, source+"\t"))
					sourceString = sourceString + source+"\t";//каждый полный тег должен быть закрыт разделителем!
			}
		}
		end = !Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.HasNext();
		Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.Next();
	}
	Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1.Close();
}
else
{
	Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.FirstSelectedRow();
	while (!end)
	{
		if (Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.GetStatus() == 0)
		{
	 		AckSost = Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.GetData(private.TableView.Static.Column_Ack.GetIndex()); //Состояние "Квитировано" в случае, если квитирование не требуется равно EMPTY, если квитировано = true, если неквитировано = false;
			source = Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.GetText(private.TableView.Static.Column_SystemSource.GetIndex());
			if (!Variant.IsEmpty(AckSost)) Acked = Variant.ToBool(AckSost,false); else Acked = true; //Если поле "Квитировано" не пустое (требуется квитирование) то смотрим на статус квитирования
			if (!Acked)
			{
				if (!String.Contains(sourceString, source+"\t"))
					sourceString = sourceString + source+"\t";//каждый полный тег должен быть закрыт разделителем!
			}
		}
		end = !Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.HasNext();
		Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.Next();
	}
	Main_tables_Historical.Table_History_mode.TablePersistentIterator_1.Close();
}
return sourceString;]]>
				</body>
			</do>
			<object access-modifier="private" name="tempHeight" display-name="tempHeight" uuid="04ef677c-60ce-47af-9c8a-ea5827787ced" base-type="float8" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="3"/>
			<do access-modifier="private" name="LoadHistory" display-name="LoadHistory" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (ActiveMode == 1)
{
	// Если даты некорректны, то выводим сообщение об ошибке
	if (!SetHistoricalInterval(ToolBar.RecHistory.GetBeginInterval(), ToolBar.RecHistory.GetEndInterval()))
	{
		ShowError.message = "Недопустимое значение границ интервала запроса истории";
		ShowError.Invoke();
	}
}]]>
				</body>
			</do>
			<object access-modifier="private" name="DropListMenuChoise" display-name="DropListMenuChoise" uuid="fbc133d3-9821-4143-b552-1563b4d2bc39" base-type="int1" base-type-id="756a0a23-7e63-4a13-8a35-e8a38909e5ed" ver="3"/>
			<object access-modifier="private" name="ApItem" display-name="ApItem" uuid="523a3d6e-71fd-43eb-a7db-7f4b2c1a1652" base-type="ApItemBool" base-type-id="e3f11724-0f76-4497-8d01-38fbb82fb844" ver="3">
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAdviseStateChanged">
					<body kind="om">
						<![CDATA[ //инициализируем флаг для пропуска первого значения после подписки
if (adviseState != 2)
	initStart = false;

if (adviseState == 4) // ошибка подписки
	adviseError = "Сигнал очистки очереди звуков: " + Tag + "\n" + AdviseStateString;
else adviseError = "";]]>
					</body>
				</do-on>
				<init target="Path" ver="5" ref="ClearSoundQueryTag "/>
				<init target="Source" ver="5" ref="ApSource"/>
				<object access-modifier="private" name="initStart" display-name="initStart" uuid="5109b81e-f94e-4c7b-9413-8ea4e2fbacb0" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
				<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="OnValueChanged">
					<body kind="om">
						<![CDATA[if (Quality >= 192 && value && initStart)
	Main_tables_Operative.ClearSoundQueue();

if (AdviseState == 2)
	initStart = true;]]>
					</body>
				</do-on>
				<object access-modifier="private" name="adviseError" display-name="adviseError" uuid="e7a8e7b5-0b89-44be-bc56-77dbf4d8ffc3" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
			</object>
			<object access-modifier="private" name="ViewFilter" display-name="ViewFilter" uuid="4a69cdb5-b675-43a8-8fae-e7b97f710c0a" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="-50" ver="3"/>
				<designed target="Y" value="-50" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="1" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="3"/>
				<object access-modifier="private" name="JsonFilter" display-name="JsonFilter" uuid="c4881f03-bf12-43a9-8037-b7d93a0483c6" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
					<designed target="X" value="-50" ver="3"/>
					<designed target="Y" value="-50" ver="3"/>
					<designed target="ZValue" value="0" ver="3"/>
					<designed target="Rotation" value="0" ver="3"/>
					<designed target="Scale" value="1" ver="3"/>
					<designed target="Visible" value="false" ver="3"/>
					<designed target="Opacity" value="1" ver="3"/>
					<designed target="Enabled" value="true" ver="3"/>
					<designed target="Tooltip" value="" ver="3"/>
					<object access-modifier="private" name="used_filters" display-name="used_filters" uuid="9fba5018-5ac5-4f52-ac8d-719b45606032" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
					<object access-modifier="private" name="json" display-name="json" uuid="cb59c586-75b3-4b28-a4e8-aed1774711be" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
					<do access-modifier="private" name="UsedFiltersContainKey" display-name="UsedFiltersContainKey" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
						<body kind="javascript">
							<![CDATA[if (used_filters == "") return false;
var obj = JSON.parse(used_filters);
if (obj.length<1) return false;
return obj.includes(key);]]>
						</body>
						<param access-modifier="private" name="key" display-name="" uuid="6de86e9f-3d70-4819-95cd-aa6ee2f1bf1a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					</do>
					<do access-modifier="private" name="UsedFiltersPreset" display-name="UsedFiltersPreset" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
						<body kind="javascript">
							<![CDATA[//read
var obj = [];
if (used_filters != "" && used_filters.length>0 && private.PresetFilters.mode>0)
	obj = JSON.parse(used_filters);
//add or remove
if (obj.includes(name))
	obj = obj.filter(function(_value, _index, _arr){return _value!=name;});
else
	obj.push(name);
//save
used_filters = obj.length==0 ? "" : JSON.stringify(obj);//для переключения на вариант безфильтра надо устанавливать пустое значение

//apply
var data = JSON.parse(UsedFiltersCombine());
var allkeys = JSON.parse(private.ViewFilter.GetColumns());
var keys = [];
for (let i = 0; i < allkeys.length; i++)
if (data[allkeys[i]] != undefined)
{
	keys.push(allkeys[i]);
	if (allkeys[i] == private.TableView.Static.Column_Ack.Id)
		SetAdvancedFilterAsJson(allkeys[i], Main_panel.private.PresetFilters.GetAckCondition(data[allkeys[i]]));
	else
		SetAdvancedFilter(allkeys[i], data[allkeys[i]]);
}
//disable absent conditions
for (let i = 0; i < allkeys.length; i++)
	if (keys.includes(allkeys[i])==false)
		SetAdvancedFilterAsJson(allkeys[i],"");
]]>
						</body>
						<param access-modifier="private" name="name" display-name="" uuid="873d2d57-bad7-45d8-8c91-2e13c140cd36" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					</do>
					<do access-modifier="private" name="UsedFiltersCombine" display-name="UsedFiltersCombine" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
						<body kind="javascript">
							<![CDATA[//read
var used_filters_array = [];
if (used_filters != "" && used_filters.length>0)
	used_filters_array = JSON.parse(used_filters);
var allkeys = JSON.parse(private.ViewFilter.GetColumns());
//collect
var data = {}; var keys = [];
function DataCollect(key,str)
{
	if (str != "")
		{
			if (keys.includes(key)==false) keys.push(key);
			if (data[key]==undefined) data[key] = [];
			if (data[key].includes(str)==false)
			{
				data[key].push(str);
			}
		}
}
for (let i = 0; i < Main_panel.private.PresetFilters.name.Length; i++)
if (used_filters_array.includes(Main_panel.private.PresetFilters.name[i]))
{
	var sj = Main_panel.private.PresetFilters.json[i]!="" ? JSON.parse(Main_panel.private.PresetFilters.json[i]) : {};
	for (let j = 0; j < allkeys.length; j++)
		DataCollect(allkeys[j], sj[allkeys[j]]);
}
//modify
var ackdata = data[private.TableView.Static.Column_Ack.Id];
if (ackdata != undefined)
	{
		//только в случае наличия единственного условия требуется фильтрация по ack
		var conditions = ackdata.map(function(_value){return Main_panel.private.PresetFilters.GetAckCondition(_value);});
		if (conditions.includes("") || conditions.length!=1)
			keys = keys.filter(function(_value){return _value!=private.TableView.Static.Column_Ack.Id;});
	}
//result
var result = {};
for (let i = 0; i < keys.length; i++)
	result[keys[i]] = data[keys[i]].length==1 ? data[keys[i]][0] : data[keys[i]].join(" ИЛИ ");
return JSON.stringify(result);]]>
						</body>
					</do>
				</object>
				<do access-modifier="private" name="GetDescription" display-name="GetDescription" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[var columns = JSON.parse(ViewFilter.GetColumns());
function MakeDescr(jsonstr)
{
	var json = JSON.parse(jsonstr);
	var text = "";
	function AddDescr(title,value)
	{
		if (value!=undefined && value.length > 0)
		{
			if (text.length>0) text += ", ";
			text += title + ": " + value;
		}
	}
	for (let c = 0; c < columns.length; c++)
	{
		var id = columns[c];
		var value = json[id];
		if (id != Main_panel.private.TableView.Static.Column_Ack.Id || value != "Все")
			AddDescr(GetColTitle(id),value);
	}
	return text;
}

var descr = "";
if (JsonFilter.used_filters == "")
	descr = MakeDescr(JsonFilter.json);
else
	descr = MakeDescr(JsonFilter.UsedFiltersCombine());
return descr;]]>
					</body>
				</do>
				<do access-modifier="private" name="GetColumns" display-name="GetColumns" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//выдаём столбцы в порядке отображения в диалоге
var obj = [];
obj.push(TableView.Static.Column_Time.Id);
obj.push(TableView.Static.Column_ActiveTime.Id);
obj.push(TableView.Static.Column_DeactiveTime.Id);
obj.push(TableView.Static.Column_Severity.Id);
obj.push(TableView.Static.Column_Group.Id);
obj.push(TableView.Static.Column_Message.Id);
obj.push(TableView.Static.Column_Source.Id);

for (let i = 0; i < TableView.systemFlag.Length; i++)
	if (TableView.userFlag[i])
		obj.push(TableView.idCache[i]);

obj.push(TableView.Static.Column_Ack.Id);
obj.push(TableView.Static.Column_AckTime.Id);
obj.push(TableView.Static.Column_Actor.Id);
obj.push(TableView.Static.Column_Comment.Id);

return JSON.stringify(obj);]]>
					</body>
				</do>
				<do access-modifier="private" name="GetColTitle" display-name="GetColTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[private.TableView.GetColPos(id)].Title;]]>
					</body>
					<param access-modifier="private" name="id" display-name="" uuid="0c5b43d5-3458-411b-87a1-7e53f9f85e09" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				</do>
				<do access-modifier="private" name="SetAdvancedFilterAsSuperJson" display-name="SetAdvancedFilterAsSuperJson" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[if (superjson == "") superjson = "{}";//установим пустой фильтр
JsonFilter.json = superjson;//сохраним заданный фильтр
JsonFilter.used_filters = filter_key=="" ? ""/*#29355 пользовательский фильтр должен быть в единственном виде для правильной работы логики*/ : JSON.stringify([filter_key]);//сохраним ключ заданного фильтра
var columns = JSON.parse(ViewFilter.GetColumns());
var filter = JSON.parse(superjson);
for (let c = 0; c < columns.length; c++)
{
	var id = columns[c];
	var value = filter[id];
	if (id == Main_panel.private.TableView.Static.Column_Ack.Id)
	{
		value = PresetFilters.GetAckCondition(value);
		SetAdvancedFilterAsJson(id, value);
	}
	else
		SetAdvancedFilter(id, value);
}]]>
					</body>
					<param access-modifier="private" name="superjson" display-name="" uuid="4958c88c-29c5-4690-8f16-8ec6481ba3d0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					<param access-modifier="private" name="filter_key" display-name="" uuid="12a06e82-5f25-430a-af0a-5734e2ab04b9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				</do>
			</object>
			<object access-modifier="private" name="RequestFilter" display-name="RequestFilter" uuid="7fccd401-262b-4652-827c-a6aa992f9d01" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="-50" ver="3"/>
				<designed target="Y" value="-50" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="1" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<object access-modifier="private" name="severity" display-name="severity" uuid="bda6135a-2142-4ec4-88e9-d36944b2412f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
				<object access-modifier="private" name="message" display-name="message" uuid="9847b393-e080-423e-8f59-05ae9c97baa3" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
				<object access-modifier="private" name="source" display-name="source" uuid="eb7480a7-636a-498e-8dc7-d7350c3afd2b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
				<object access-modifier="private" name="acknow" display-name="acknow" uuid="4f36346b-7b43-4855-bc50-c157f0671833" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="3"/>
				<object access-modifier="private" name="enableEventsChronology" display-name="enableEventsChronology" uuid="9cd2dfe5-31ef-463a-b93f-eb6f3d4d369a" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
			</object>
			<object access-modifier="private" name="OpenCommentAck" display-name="OpenCommentAck" uuid="380e4f83-55f5-408b-90fb-fb9ceb5b0c66" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="052df691-6bff-406c-91ae-35b8ffb410ed" base-type="CommentAck" base-type-id="849094ab-4a33-4e58-ad4d-5a8e53262f5c" ver="2">
						<init target="pAlarms" ver="5" ref="here"/>
						<designed target="WindowPosition" value="3" ver="2"/>
						<init target="Focus" ver="5" value="true"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="Action_OpenContextMenu" display-name="Action_OpenContextMenu" uuid="ac38b08a-4ab5-4d08-8691-647b7f49fb58" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-new">
					<object access-modifier="private" uuid="e2e1450c-aaf8-4174-a29e-e97fe0e2fe42" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
						<init target="WindowX" ver="5">
							<expr>
								<![CDATA[left]]>
							</expr>
						</init>
						<init target="WindowY" ver="5">
							<expr>
								<![CDATA[top]]>
							</expr>
						</init>
						<init target="Items" ver="5">
							<expr>
								<![CDATA[GetMenuItems()]]>
							</expr>
						</init>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="pResult" ver="5" ref="MenuResult"/>
						<init target="pAction" ver="5" ref="OnMenuClick"/>
					</object>
				</do-on>
				<object access-modifier="private" name="left" display-name="left" uuid="9af3511c-aa12-4853-a31d-7b4c90d9aa60" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
				<object access-modifier="private" name="top" display-name="top" uuid="0461bbeb-219a-48c9-8cd5-7f262a2dbd8b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
				<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return ContextMenu.AddDesign(true);]]>
					</body>
				</do>
				<object access-modifier="private" name="OnMenuClick" display-name="OnMenuClick" uuid="c8a27721-dcb8-47f1-abc8-950ee8a8ac97" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="InvokeTrigger" value="false" ver="5"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[cmd: string = MenuResult.Id;

if (cmd == "operative")
	ActiveMode = 0;
else if (cmd == "historical")
	ActiveMode = 1;
else if (cmd == "ack")
	AckSelected();
else if (cmd == "ackAll")
	AckAll();
else if (cmd == "addComment")
{
	nAckMode = 4;// Режим ввода комментария выбранным сообщениям
	AckDataCollect();
	AckComment = ComputerName; // Комментарий квитирования по умолчанию
	OpenCommentAck.Invoke();
}
else if (cmd == "snapshot")
{
	Main_tables_Operative.TableModel_1.Frozen = !Main_tables_Operative.TableModel_1.Frozen;
	ToolBar.SnapshotON = Main_tables_Operative.TableModel_1.Frozen;
}
else if (cmd == "mute")
	Mute = !Mute;
else if (cmd == "skipSound")
	SkipCurrentSound();
else if (cmd == "clearSoundQueue")
	ClearSoundQueue();
else if (cmd == "clear")
	ClearOperativeEventList();
else if (cmd == "viewFilter")
	ShowViewFilter.Invoke();
else if (cmd == "defaultSorting")
	TableView.SetDefaultSorting();
else if (cmd == "sort")
	OpenSortForm.Invoke();
else if (cmd == "print")
	OpenPrintForm.Invoke();
else if (cmd == "export")
{
	if (ActiveMode == 0)
		ExportOperTable.Invoke();
	else ExportHistoryTable.Invoke();
}
else if (cmd == "opentrend")
{
	SourceDataCollect();
	OnOpenTrends.Invoke();
}
else if (cmd == "openform")
{
	FormDataCollect();
	OnOpenForm.Invoke();
}
else if (cmd == "toolbar")
	DisplayToolbar = !DisplayToolbar;
else if (cmd == "statusbar")
	DisplayStatePanel = !DisplayStatePanel;
else if (cmd == "options")
	EditSettings.Invoke();]]>
						</body>
					</do-on>
				</object>
			</object>
			<object access-modifier="private" name="Action_OpenColumnsMenu" display-name="Action_OpenColumnsMenu" uuid="4756eb0e-ba3e-4a83-8551-b666cb58cded" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-new" form-by-id="false">
					<object access-modifier="private" uuid="4f0d2e17-b8ca-41fe-a750-cce9b33be464" base-type="Menu" base-type-id="07bb4545-980a-4140-bbaa-4d1397447864" ver="5">
						<init target="WindowX" ver="5">
							<expr>
								<![CDATA[left]]>
							</expr>
						</init>
						<init target="WindowY" ver="5">
							<expr>
								<![CDATA[top]]>
							</expr>
						</init>
						<init target="Items" ver="5">
							<expr>
								<![CDATA[GetMenuItems()]]>
							</expr>
						</init>
						<init target="pResult" ver="5" ref="MenuResult"/>
						<init target="pAction" ver="5" ref="OnMenuClick"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
				<object access-modifier="private" name="left" display-name="left" uuid="42712efb-e08a-4135-9ed7-faa0c86850be" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
				<object access-modifier="private" name="top" display-name="top" uuid="5933d1b7-10c9-4f7b-b1cf-ddee8ca17e7b" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
				<do access-modifier="private" name="GetMenuItems" display-name="GetMenuItems" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[// формируем коллекцию столбцов
var columns = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
		columns.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);

// формируем коллекцию элементов меню
var items = [];
var i = 0;
while (i < columns.length)
{
	var column = columns[i];
	
	// для некоторых столбцов определяем активность команды меню
	var active = true;	
	if (i == 0) // Colum_1 Column_Time
		active = !Main_tables_Operative.Table_Operative_mode.Columns[private.TableView.Static.Column_ActiveTime.pos].Hidden || Main_tables_Operative.Table_Operative_mode.Columns[private.TableView.Static.Column_Time.pos].Hidden;
	else if (i == 1) // Colum_2 Column_ActiveTime
		active = !Main_tables_Operative.Table_Operative_mode.Columns[private.TableView.Static.Column_Time.pos].Hidden || Main_tables_Operative.Table_Operative_mode.Columns[private.TableView.Static.Column_ActiveTime.pos].Hidden;
	else if (i == 3) // Colum_4 Column_Message
		active = Main_tables_Operative.Table_Operative_mode.Columns[private.TableView.Static.Column_Message.pos].Hidden;
	
	items.push({
		 'id': column.GetIndex(),
		 'title': column.Title == "" ? column.Description : column.Title,
		 'checked': !column.Hidden,
		 'staysOpen': true,
 		 'active': active,
		});

	i += 1;
}

// сортируем элементы меню в соответствии с порядком отображения в таблице
items = items.sort((a, b) => a.id - b.id);

return JSON.stringify(items);]]>
					</body>
				</do>
				<object access-modifier="private" name="OnMenuClick" display-name="OnMenuClick" uuid="5169e38d-a0c8-458e-a64e-ba4e62f3e80a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="5">
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="InvokeTrigger" value="false" ver="5"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="javascript">
							<![CDATA[// индекс столбца, видимость которого нужно изменить
var index = MenuResult.Id;

// формируем коллекции столбцов
var ColumnOper = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
		ColumnOper.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);

var ColumnHist = [];
for (let i = 0; i < Main_tables_Historical.Table_History_mode.Columns.Length; i++)
	if (Main_tables_Historical.Table_History_mode.Columns[i].Title != "-")//cheat1
		ColumnHist.push(Main_tables_Historical.Table_History_mode.Columns[i]);

// изменяем видимость столбца с нужным идентификатором
for (let i = 0; i < ColumnOper.length; i++)
{
	if (ColumnOper[i].GetIndex() == index)
	{
		var hidden = ColumnOper[i].Hidden == true;
		ColumnOper[i].Hidden = !hidden;
		ColumnHist[i].Hidden = !hidden;

		// при изменении видимости столбцов со временем переоткрываем меню		
		if (i == 0 || i == 1)
			Action_OpenColumnsMenu.Invoke();
			
		break;
	}
}

// сохраняем настройки
TableView.SaveSettings();]]>
						</body>
					</do-on>
				</object>
			</object>
			<object access-modifier="private" name="ShowSaveDialog" display-name="ShowSaveDialog" uuid="74ab7dfb-12fb-4497-8102-ef3ca7be0b20" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="8c0c5e97-cbe8-446f-abb1-099b6810fcf2" base-type="SaveFileDialog" base-type-id="d69a91c3-89e9-4e7b-994e-9242dbc5e095" ver="4">
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="Result" ver="5" ref="FileDialogResult"/>
						<init target="OnComplete" ver="5" ref="SaveToFile"/>
						<init target="FileTypeFilter" ver="5" value="Файл AVZ (*.avz)|*.avz"/>
						<init target="DefaultPath" ver="5">
							<expr>
								<![CDATA[Export.ExportPath]]>
							</expr>
						</init>
						<init target="RootPath" ver="5">
							<expr>
								<![CDATA[Export.ExportPath.Root]]>
							</expr>
						</init>
					</object>
				</do-on>
				<object access-modifier="private" name="SaveToFile" display-name="SaveToFile" uuid="2be43d92-ae32-425c-b8e4-04d13af2e581" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
					<designed target="Enabled" value="true" ver="4"/>
					<designed target="InvokeTrigger" value="false" ver="4"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[Save(FileDialogResult.FilePath, true);]]>
						</body>
					</do-on>
				</object>
				<do access-modifier="private" name="Save" display-name="Save" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[packFiles = _packFiles;
EventParams[2] = path;
EventParams[4] = "";//сбрасываем ошибку
datFile: string;
infFile: string;
folder: string;

private.LoadSaveBusy.SavingFile = true;

if (packFiles)
{
	zipFile = path;
	zipFolder = path+".alarmstemp";
	datFile = File.CombinePath(zipFolder, "alarms.json");
	infFile = File.CombinePath(zipFolder, "alarms.inf");
	folder = zipFolder;
	File.CreateRecursiveFolder(folder);
}
else
{
	zipFile = "";
	zipFolder = "";
	datFile = File.CombinePath(path, "alarms.json");
	infFile = File.CombinePath(path, "alarms.inf");
	folder = path;
	//File.CreateRecursiveFolder(folder);//возможно это забота внешнего кода
}

if (!File.Exists(folder))
{
	EventParams[4] = "Папка "+path+" отсутствует";
	Fin();
}
else
{
	saveInf(infFile);
	if (ActiveMode == 0)
	{
		Main_tables_Operative.TableModel_1.savedFilePath = datFile;
		Main_tables_Operative.TableModel_1.GetContentAsJson();
	}
	else
	{
		Main_tables_Historical.TableModel_1.savedFilePath = datFile;
		Main_tables_Historical.TableModel_1.GetContentAsJson();
	}
}]]>
					</body>
					<param access-modifier="private" name="path" display-name="" uuid="e8c31f6e-51e6-4f9a-9fa2-0ed9874658ef" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					<param access-modifier="private" name="_packFiles" display-name="" uuid="8ecf5313-6f51-44c2-9e51-6e8cd454d728" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
				</do>
				<do access-modifier="private" name="Saved" display-name="Saved" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[if (packFiles)
{
	Archiver.AsyncPack(zipFolder, zipFile);
}
else
	Fin();]]>
					</body>
				</do>
				<do access-modifier="private" name="Fin" display-name="Fin" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[if (packFiles && File.Exists(zipFolder))
	File.RemoveRecursive(zipFolder);

if (EventParams[4]/*error*/ != "" && packFiles)//диалоги показываем только при внутреннем использовании
{
	ShowError.message = EventParams[4];
	ShowError.Invoke();
}
else if (packFiles)
{
	ShowInfo.message = "События сохранены в файл:\n"  + EventParams[2];
	ShowInfo.Invoke();
}
private.LoadSaveBusy.SavingFile = false;
OnSave.Invoke();]]>
					</body>
				</do>
				<object access-modifier="private" name="Archiver" display-name="Archiver" uuid="fac99176-477e-4610-9f2b-c306f805d46b" base-type="Archiver" base-type-id="3d5db667-b706-495b-a916-9785b07dd0ae" ver="5" description="" cardinal="1">
					<designed target="CompressionLevel" value="0" ver="5"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="PackFinished">
						<body kind="om">
							<![CDATA[if (error != "")
	EventParams[4] = error;
Fin();]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="packFiles" display-name="packFiles" uuid="bb07a272-6557-4f1d-9ade-c219b00002dc" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="zipFile" display-name="zipFile" uuid="a483a9d1-e06c-44c8-a5d2-0e36ef5952bb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="zipFolder" display-name="zipFolder" uuid="99b325e6-99e8-4af0-8777-eb22d1df1751" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="saveInf" display-name="saveInf" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[var info = {};
if (ActiveMode==0)
{
	getOperTimes();
	info.start = _operStart;
	info.end = _operEnd;
}
else
{
	info.start = Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalRangeStart/*utc*/;
	info.end = Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalRangeEnd/*utc*/;
}
try
{
	File.WriteTextFile(filePath, JSON.stringify(info, null, 2));
}
catch(err)
{
	EventParams[4] = "Не удалось сохранить "  + filePath + ": " + err.message;
}]]>
					</body>
					<param access-modifier="private" name="filePath" display-name="" uuid="fff57b9b-5d96-4aec-a128-a13b4cc25b06" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				</do>
				<do access-modifier="private" name="getOperTimes" display-name="getOperTimes" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[// определяем временной диапазон загруженных событий
activeTimeIndex: int4 = Main_tables_Operative.Table_Operative_mode.MapColumnToModel(private.TableView.Static.Column_ActiveTime.GetIndex());
t1: uint8 = DateTime.UtcNow();
t2: uint8 = 0;
Main_tables_Operative.TableModel_1.TableIterator_1.FirstSelected();
while (!Main_tables_Operative.TableModel_1.TableIterator_1.End())
{
	t: uint8 = Variant.ToUint8(Main_tables_Operative.TableModel_1.GetCellData(Main_tables_Operative.TableModel_1.TableIterator_1.CurrentRow, activeTimeIndex), 0);
	if (t < t1)
		t1 = t;
	if (t > t2)
		t2 = t;
	Main_tables_Operative.TableModel_1.TableIterator_1.Next();
}
//#27530 немного окгругляем время с точностью до секунд
_operStart = t1/10000000*10000000;//utc
_operEnd = (t2/10000000+1)*10000000;//utc]]>
					</body>
				</do>
				<object access-modifier="private" name="_operStart" display-name="_operStart" uuid="a2afa577-6af2-4620-b773-3c25c6268235" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="_operEnd" display-name="_operEnd" uuid="b345b189-ac19-4131-906d-010927e522ff" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5" description="" cardinal="1"/>
			</object>
			<object access-modifier="private" name="ShowOpenDialog" display-name="ShowOpenDialog" uuid="b9869b56-79f9-44d2-9a1f-8f25295d3613" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="dd0ef520-9ef7-4aba-8b18-0fc55eb5933f" base-type="OpenFileDialog" base-type-id="41505bc5-e0a8-4d93-b1a9-de842aaf215b" ver="4">
						<init target="Result" ver="5" ref="FileDialogResult"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="OnComplete" ver="5" ref="LoadFromFile"/>
						<init target="FileTypeFilter" ver="5" value="Файл AVZ (*.avz)|*.avz"/>
						<init target="DefaultPath" ver="5">
							<expr>
								<![CDATA[Export.ExportPath]]>
							</expr>
						</init>
						<init target="RootPath" ver="5">
							<expr>
								<![CDATA[Export.ExportPath.Root]]>
							</expr>
						</init>
					</object>
				</do-on>
				<object access-modifier="private" name="LoadFromFile" display-name="LoadFromFile" uuid="9f3f0c99-510f-4777-ba3d-fc57bfdfa065" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
					<designed target="Enabled" value="true" ver="4"/>
					<designed target="InvokeTrigger" value="false" ver="4"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[Open(FileDialogResult.FilePath, true);]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="Archiver" display-name="Archiver" uuid="803d5269-4937-4a66-9cec-d2792057193e" base-type="Archiver" base-type-id="3d5db667-b706-495b-a916-9785b07dd0ae" ver="5" description="" cardinal="1">
					<designed target="CompressionLevel" value="0" ver="5"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="UnpackFinished">
						<body kind="om">
							<![CDATA[if (error != "")
	EventParams[4] = error;
Unpacked();]]>
						</body>
					</do-on>
				</object>
				<do access-modifier="private" name="Open" display-name="Open" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[//переключаемся в исторический сразу, и блокируем кнопки
private.LoadSaveBusy.LoadingFile = true;
Main_tables_Historical.TableModel_1.Clear();
if (ActiveMode != 1)
	ActiveMode = 1;

unpackFiles = _unpackFiles;
EventParams[4] = "";

if (unpackFiles)
{
	zipFolder = _path + ".alarmstemp";
	File.CreateRecursiveFolder(zipFolder);
	datFile = File.CombinePath(zipFolder, "alarms.json");
	infFile = File.CombinePath(zipFolder, "alarms.inf");
	Main_tables_Historical.TableModel_1.openedFilePath = _path;
	Archiver.AsyncUnpack(_path, zipFolder);
}
else
{
	zipFolder = "";
	datFile = File.CombinePath(_path, "alarms.json");
	infFile = File.CombinePath(_path, "alarms.inf");
	Main_tables_Historical.TableModel_1.openedFilePath = datFile;
	Unpacked();
}]]>
					</body>
					<param access-modifier="private" name="_path" display-name="" uuid="37df8a82-891c-4208-943f-992ed35d07cb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					<param access-modifier="private" name="_unpackFiles" display-name="" uuid="1793442b-1759-47c3-8cb3-f0cde8f4ca47" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
				</do>
				<object access-modifier="private" name="datFile" display-name="datFile" uuid="989c5c73-bd84-4f65-ad7a-946d5a538805" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="infFile" display-name="infFile" uuid="30e8b4f9-b191-4a73-a91f-e98f627cdc9e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="zipFolder" display-name="zipFolder" uuid="75767536-ea23-4bd8-a25e-f3f2f7113c74" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="Unpacked" display-name="Unpacked" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[//open info sync first
try
{
	var inf = File.ReadTextFile(infFile);
	var info = JSON.parse(inf);
	infStart = info.start;
	infEnd = info.end;
}
catch(err)
{
	EventParams[4] = "Не удалось загрузить из "  + infFile + ": " + err.message;
	Fin();
	return;
}
//open data async
try
{
	var data = File.ReadTextFile(datFile);
	Main_tables_Historical.TableModel_1.SetContentAsJson(data);
}
catch(err)
{
	EventParams[4] = "Не удалось загрузить из "  + datFile + ": " + err.message;
	Fin();
}]]>
					</body>
				</do>
				<do access-modifier="private" name="Fin" display-name="Fin" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[if (unpackFiles && File.Exists(zipFolder))
	File.RemoveRecursive(zipFolder);

if (EventParams[4]/*error*/ != "" && unpackFiles)//диалоги показываем только при внутреннем использовании
{
	ShowError.message = EventParams[4];
	ShowError.Invoke();
}
else
{
	Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalRangeStart = infStart;
	Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalRangeEnd = infEnd;
	ShowHistoricalInterval(DateTime.ToLocal(infStart), DateTime.ToLocal(infEnd));
	HistTableEmpty.Update();

	//ShowInfo.message = "События успешно загружены";
	//ShowInfo.Invoke();
}
private.LoadSaveBusy.LoadingFile = false;
//OnOpen.Invoke();]]>
					</body>
				</do>
				<object access-modifier="private" name="unpackFiles" display-name="unpackFiles" uuid="ef644e0c-fd1a-417e-9d5d-f54d540f0fd4" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="infStart" display-name="infStart" uuid="ff5f566c-c119-444a-abc0-39c6699a9c29" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="infEnd" display-name="infEnd" uuid="77068371-af63-4b26-b68c-89ec05a4a533" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="5" description="" cardinal="1"/>
			</object>
			<object access-modifier="private" name="ExportHistoryTable" display-name="ExportHistoryTable" uuid="457a82a4-1887-4408-9789-2aace0266b95" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="e0081261-01a5-4a0a-9e40-7f649ec7a176" base-type="ExportAlarms" base-type-id="4eaa655b-e7df-43ce-a704-693e19fb182e" ver="3">
						<init target="pAlarms" ver="5" ref="here"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="Scale" ver="5">
							<expr>
								<![CDATA[GetFormScale(1220, 500)]]>
							</expr>
						</init>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="Init_TableModel" ver="5" ref="Main_tables_Historical.TableModel_1"/>
						<init target="WindowScalingMode" ver="5">
							<expr>
								<![CDATA[TypeConvert.ToUint4(GetFormScale(1220,500)<1?1:0)]]>
							</expr>
						</init>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="ExportOperTable" display-name="ExportOperTable" uuid="ddb39ec9-4786-444b-a77b-10efb9713a2e" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="069f93f3-9ba5-4c11-babb-cdb6ef592e79" base-type="ExportAlarms" base-type-id="4eaa655b-e7df-43ce-a704-693e19fb182e" ver="3">
						<init target="pAlarms" ver="5" ref="here"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="Init_TableModel" ver="5" ref="Main_tables_Operative.TableModel_1"/>
						<init target="Scale" ver="5">
							<expr>
								<![CDATA[GetFormScale(1220, 500)]]>
							</expr>
						</init>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="WindowScalingMode" ver="5">
							<expr>
								<![CDATA[TypeConvert.ToUint4(GetFormScale(1220,500)<1?1:0)]]>
							</expr>
						</init>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="EditSettings" display-name="EditSettings" uuid="642bc580-5c86-494b-a2bd-6537300e945a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="44a3a732-4ce2-42d0-96ce-4cb7ad114e91" base-type="SettingsForm" base-type-id="82dc7618-130c-486c-840d-5d302f40306b" ver="3">
						<init target="pAlarms" ver="5" ref="here"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="ShowViewFilter" display-name="ShowViewFilter" uuid="48d9b255-4a15-44f1-a100-60302bcf9b7c" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="bd3f6d0a-2613-47e0-9805-1ab0c3c63c43" base-type="FilterViewForm" base-type-id="0eb5fd44-6f82-41a2-83b6-c72fb7903de1" ver="3">
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<init target="Link_Alarms" ver="5" ref="here"/>
						<init target="iAlarms" ver="5" ref="here"/>
						<init target="iTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="ShowRequestFilter" display-name="ShowRequestFilter" uuid="1d9f452f-0761-46c4-9c3f-9e938d32b08e" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="10906d28-55f0-42ac-b947-ff95b7d98bfb" base-type="FilterForm" base-type-id="3a63182a-45e8-4259-a203-84dcd20232b8" ver="3">
						<init target="Link_Alarms" ver="5" ref="here"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="OpenPrintForm" display-name="OpenPrintForm" uuid="3e4965b1-d569-48a0-b88e-127f58c8586b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
				<designed target="Enabled" value="true" ver="4"/>
				<designed target="InvokeTrigger" value="false" ver="4"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="a496e93d-8690-4fa4-9b8d-7fc398caebd0" base-type="PrintForm" base-type-id="a0785a72-33ef-4e4e-a349-99dd6fa180bc" ver="3">
						<init target="pAlarms" ver="5" ref="here"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="Scale" ver="5">
							<expr>
								<![CDATA[GetFormScale(1000, 750)]]>
							</expr>
						</init>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
						<designed target="WindowScalingMode" value="1" ver="5"/>
						<init target="WindowScalingMode" ver="5">
							<expr>
								<![CDATA[TypeConvert.ToUint4(GetFormScale(1000,750)<1?1:0)]]>
							</expr>
						</init>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="OpenSortForm" display-name="OpenSortForm" uuid="65b241d7-f987-4552-9e1f-4583f2e187cf" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="f2db7041-4132-4caa-b182-1b0583052444" base-type="SortForm" base-type-id="95d52964-3d3f-43d2-ad6f-f3cb68a1c51b" ver="3">
						<init target="Alarms_1" ver="5" ref="here"/>
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="Action_RequestCancelHistoryQuery" display-name="Action_RequestCancelHistoryQuery" uuid="3e0e3ded-17eb-4b77-afdb-74c7d99b3a4a" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="3">
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="InvokeTrigger" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="Invoked" form-by-id="false" form-action="open-dialog">
					<object access-modifier="private" uuid="87c44b33-d824-4761-a8bb-150261aa1c32" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="4">
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="Message" ver="5" value="Прервать запрос истории событий?"/>
						<init target="Buttons" ver="5" value="2"/>
						<init target="Icon" ver="5" value="1"/>
						<init target="YesAction" ver="5" ref="Action_CancelHistoryQuery"/>
						<designed target="WindowCaption" value="Запросить данные" ver="4"/>
					</object>
				</do-on>
				<object access-modifier="private" name="Action_CancelHistoryQuery" display-name="Action_CancelHistoryQuery" uuid="e0b304b9-4a19-4aa8-8a7e-c1dcd1d1511b" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
					<designed target="Enabled" value="true" ver="4"/>
					<designed target="InvokeTrigger" value="false" ver="4"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
						<body kind="om">
							<![CDATA[CancelHistoryQuery();]]>
						</body>
					</do-on>
				</object>
			</object>
			<object access-modifier="private" name="MessageNoPermission" display-name="MessageNoPermission" uuid="c6a301a5-b527-43f5-997d-2f9a106c9c4d" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
					<object access-modifier="private" uuid="e23acfd4-b6be-4770-849d-7b5d9c4c88c6" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="4">
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<init target="Message" ver="5" value="Отсутствует разрешение на выполнение данной операции."/>
						<designed target="WindowCaption" value="Ошибка" ver="4"/>
						<init target="Icon" ver="5" value="2"/>
						<init target="Buttons" ver="5" value="0"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="MessageNoLogOn" display-name="MessageNoLogOn" uuid="558cd957-fe54-4ef9-a358-36f38909b4f7" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="2">
				<designed target="Enabled" value="true" ver="2"/>
				<designed target="InvokeTrigger" value="false" ver="2"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
					<object access-modifier="private" uuid="eabcc8fb-1588-45ee-a886-e31372e6ff77" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="4">
						<init target="AlwaysOnTop" ver="5" ref="AlwaysOnTopForm"/>
						<designed target="WindowCaption" value="Ошибка" ver="4"/>
						<init target="Icon" ver="5" value="2"/>
						<init target="Buttons" ver="5" value="0"/>
						<init target="Message" ver="5" value="Операция невозможна! 
Необходима регистрация оператора."/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="CommentPattern" display-name="CommentPattern" uuid="05e74a11-af98-414b-92ec-7e08e39e937e" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="-50" ver="3"/>
				<designed target="Y" value="-50" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="0.01" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<object access-modifier="private" name="PatternsTable" display-name="PatternsTable" uuid="5e811027-631f-4f50-9b5f-da4d9b776c2b" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
					<designed target="Frozen" value="false" ver="3"/>
					<designed target="MaxRowCount" value="2147483647" ver="3"/>
				</object>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="4"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "commenttemplates.json");
if (File.Exists(filePath))
{
	//log("Загрузка шаблонов комментариев из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var comments = JSON.parse(json);
		
		PatternsTable.Reset();
		PatternsTable.AddColumn("Patterns","","","","string",false,true);
		if (comments.CommentTemplates.length > 0)
		{
			PatternsTable.InsertRows(0, comments.CommentTemplates.length);
			for (let i = 0; i < comments.CommentTemplates.length; i++)
				PatternsTable.SetCellData(i,0,comments.CommentTemplates[i]);
		}
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		return false;
	}
}

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "commenttemplates.json");
//log("Сохранение шаблонов комментариев в файл "  + filePath);
try
{
	var comments = {};
	comments.CommentTemplates = [];
	for (let i = 0; i < PatternsTable.GetRowCount(); i++)
		comments.CommentTemplates.push(PatternsTable.GetCellData(i,0));
	
	File.WriteTextFile(filePath, JSON.stringify(comments, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
					</body>
				</do>
			</object>
			<do access-modifier="private" name="SelectedRowsFromJSON" display-name="SelectedRowsFromJSON" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
				<body kind="javascript">
					<![CDATA[//Функция разложения строки с номерами строк в JSON-формате
var str = JSON.parse(StringJSON);
if (index > str.length - 1) return -1;
else return str[index];
]]>
				</body>
				<param access-modifier="private" name="StringJSON" display-name="" uuid="48e70a9a-2df3-4a4c-8242-6a3871557077" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				<param access-modifier="private" name="index" display-name="" uuid="73120e86-6784-4c5b-bd46-754ae7c1b004" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
			</do>
			<object access-modifier="private" name="ShowError" display-name="ShowError" uuid="893c58a4-264f-48e8-8b3d-17f8c86c74fc" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
				<designed target="Enabled" value="true" ver="4"/>
				<designed target="InvokeTrigger" value="false" ver="4"/>
				<object access-modifier="private" name="message" display-name="message" uuid="9e698768-7d56-4a88-a25e-8af4c9a25aaf" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
					<object access-modifier="private" uuid="6493e936-29ea-4725-b47e-b476daa386b7" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="4">
						<init target="Message" ver="5">
							<expr>
								<![CDATA[message]]>
							</expr>
						</init>
						<init target="Icon" ver="5" value="3"/>
						<init target="Buttons" ver="5" value="0"/>
						<designed target="WindowCaption" value="Ошибка" ver="4"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="ShowInfo" display-name="ShowInfo" uuid="a211b8be-e066-4277-9413-0a3e8307c483" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
				<designed target="Enabled" value="true" ver="4"/>
				<designed target="InvokeTrigger" value="false" ver="4"/>
				<object access-modifier="private" name="message" display-name="message" uuid="71e31336-4166-4fb4-9523-a67496459df8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked" form-action="open-dialog" form-by-id="false">
					<object access-modifier="private" uuid="3a14469f-f660-49f4-be02-383d689a6e8a" base-type="MessageDialog" base-type-id="a468f863-f603-4768-ad4b-e16bc34ea78e" ver="4">
						<init target="Message" ver="5">
							<expr>
								<![CDATA[message]]>
							</expr>
						</init>
						<init target="Icon" ver="5" value="0"/>
						<init target="Buttons" ver="5" value="0"/>
						<init target="pTheme" ver="5" ref="here.pTheme"/>
					</object>
				</do-on>
			</object>
			<object access-modifier="private" name="DisplayAcknowledgeInColumn" display-name='Отображение кнопки "Квитировать" в столбце' uuid="bbd833f5-877f-4fef-ace8-cec7e2b81eac" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
			<object access-modifier="private" name="ComputerName" display-name="ComputerName" uuid="40c62753-7dd5-40df-a952-414afdf09d86" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<do access-modifier="private" name="SeverityJSONtoString" display-name="SeverityJSONtoString" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[//Функция преобразования JSON объекта в строку для важностей: например, 1,2-5
//Умеет парсить, например, это:
//{"OR":[{"severity":8},{"AND":[{">=":{"severity":100}},{"<=":{"severity":150}}]}]}
//{"severity":100}
//{"AND":[{">=":{"severity":100}},{"<=":{"severity":105}}]}
var obj = inputStr;
var strOut = "";
if (obj != "") obj = JSON.parse(obj); //Проверяем наличие в JSON-строке элементов
else return strOut;

if (obj.OR != undefined)
{
	for (let i = 0; i < obj.OR.length; i++)
	{
		if (obj.OR[i].AND != undefined)
		{
			for (let j = 0; j < obj.OR[i].AND.length; j++)
			{
				if (strOut != "") strOut += ",";
				if (obj.OR[i].AND[j][">="] != undefined) 
				{
					strOut += obj.OR[i].AND[j][">="]["severity"] + "-" + obj.OR[i].AND[j+1]["<="]["severity"];
					j++;
				}
			}
		}
		else
		{
			if (strOut != "") strOut += ",";
		 	strOut += obj.OR[i].severity;
		}
	}
}
if (obj.AND != undefined)
{
	for (let j = 0; j < obj.AND.length; j++)
	{
		if (strOut != "") strOut += ",";
		if (obj.AND[j].severity != undefined) strOut += obj.AND[j].severity;
		if (obj.AND[j][">="] != undefined) 
		{
			strOut += obj.AND[j][">="]["severity"] + "-" + obj.AND[j+1]["<="]["severity"];
			j++;
		}
	}
}

if (obj.severity != undefined && obj.severity != 0) strOut += obj.severity; //Если в JSON-строке только одно число
//log(strOut);
return strOut;
]]>
				</body>
				<param access-modifier="private" name="inputStr" display-name="" uuid="15d6ae75-5054-4dc4-b523-0bb251cdcfba" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			</do>
			<do access-modifier="private" name="GapToArray" display-name="GapToArray" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[//Преобразование последовательности в массив идущих друг за другом чисел
var str = inputString;
var numberArray = [];
var tempArray = [];
var commonArray = [];
var gapPattern = /\d+\s?[-]\s?\d+/;

str = inputString.replace(/[ ]/g,"");
//Проверка на случай, если элемент всего один
if (/(^\s?[0-9]{1,3}\s?$)|(^\s?[0-9]{1,3}\s?[-]\s?[0-9]{1,3}\s?$|^\s?(1000)$)/.test(str))commonArray[0] = str;
else commonArray = str.split(",");
if (/[,]/.test(commonArray[commonArray.length-1])) return "error";

//Проверка на верную запись диапазона чисел, запись его чисел в виде элемента массива
for (let i = 0; i < commonArray.length; i++)
{
	if (gapPattern.test(commonArray[i])) //Если элемент - диапазон чисел, то проверяем его и формируем массив
	{
		tempArray = commonArray[i].match(/\d+/g);
		if (parseInt(tempArray[0]) >= parseInt(tempArray[1])) return "error";
		while (parseInt(tempArray[0]) <= parseInt(tempArray[1]))
		{
			numberArray.push(tempArray[0]);
			tempArray[0] = parseInt(tempArray[0])+1;
		}
	}
	else numberArray.push(commonArray[i]);
	tempArray = [];
}
return numberArray.join(',');]]>
				</body>
				<param access-modifier="private" name="inputString" display-name="" uuid="532690fc-8c14-49ad-a833-0842ad40b89d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			</do>
			<do access-modifier="private" name="JSONstringForFilter" display-name="JSONstringForFilter" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="javascript">
					<![CDATA[//Функция преобразует исходную строк в формат JSON: проводит поиск по шаблонам и составляет массив элементов, затем применяется обратная польская запись для определения порядка действий;
//filterType == 0 - на выходе строка будет в формате фильтра отображения, 1 - фильтра запроса;
//source: различаются форматы строки для severity и для time. Все остальные идут как строка символов (например, message);

//Алгоритм следующий:
//1.входная строка делится на аргументы и логические элементы по шаблону elementPattern(логические элементы)
//2.формируется массив из этих элементов, в котором пользовательские лог.операции приводятся к единому формату, преобразуются аргументы в зависимости от типа поля
//3.проверяется наличие ошибок в получившемся массиве
//4.формируется польская запись: определяются веса лог.операций и сортировка массива в соотвествии с аргументами и весами
//5.формируется json-строка из объектов, представляющих из себя массив логической операции, элементами которого являются аргументы. Массивы могут быть вложенными.

// Если строка пустая, выходим
inputString = inputString.trim(); // Удаляем лишние пробелы из входной строки
if (inputString.trim() == "")
	return "";

var resultArray = []; //Массив с аргументами и лог.операторами в формате польской записи
var operatorArray = []; //Массив с лог.операторами с сортировкой по приоритету следования
var gravityPrev = 0;
var gravity = 0;
var prevPrevElem = '';
var prevElem = '';
var commonArray = []; //Массив с элементами, состоящими из элементов входной строки
var elementPattern;
var signPattern;
var argumentPattern;
var formatPattern;
var commonArrayStr;
var operatorPattern;
var tempArray = [];
var stringMode; //Формат выходной строки

try
{
	// Инициализируем шаблон на поиск операторов, чисел и операндов
	switch (source)
	{
		case "severity":
			elementPattern = /(\s*ИЛИ\s*)|(\s*И\s*)|(\s*AND\s*)|(\s*OR\s*)|(\s*\&\s*)|(\s*\|\s*)|(\s*<>\s*)|(\s*!=\s*)|\s*[(]\s*|\s*[)]\s*/gi;//Все доступные пользователю логические операции
			operatorPattern = /^([(]|[)]|[&]|[|]|[!=]|[<>])$/;//Представление логических операций внутри скрипта
			signPattern = /([><=]+)/g;//Знаковые выражения ==, >, <, <=, >=
			argumentPattern = /(-?[0-9]+)/g;//Значение аргумента со знаком
			formatPattern = /^[><=]*-?[0-9]+$/;
			stringMode = 1;
			break;
		case "time":
			elementPattern = /(\s*ИЛИ\s*)|(\s*И\s*)|(\s*AND\s*)|(\s*OR\s*)|(\s*\&\s*)|(\s*\|\s*)|\s*[(]\s*|\s*[)]\s*/gi;
			operatorPattern = /^([(]|[)]|[&]|[|])$/;
			signPattern = /([><=]+)/;
			argumentPattern = /((0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.]\d{4}\s([01]\d|2[0-3])(:[0-5]\d){2}(\.[0-9]{3})+)/;
			formatPattern = /(.*)/;
			stringMode = 2;
			break;
		default:
			elementPattern = /([""]{2}.*?[^"]{1}[^"]{1}[""]{2})|[)]\s*((ИЛИ)|(И)|(НЕ)|(NOT)|(\!)|(\|)|(\&))\s*[(]|( ИЛИ )|( И )|(\s*НЕ )|(\s*NOT )|( \& )|( \| )|(\s*\! )|( \& )|( \| )|[(]|[)]|( )/gi;
			operatorPattern = /^([(]|[)]|[&]|[|]|[!])$/;
			signPattern = /([=]*)/g;
			argumentPattern = /(.*)/;
			formatPattern = /(.*)/;
			stringMode = 0;
			break;
	}
	var arrayPattern = /object/;//Шаблон массива

	// Парсим входную строку по elementPattern и формируем массив всех составляющих строки
	let temp = inputString.replace(/\s\s+/g,' ');//Сокращаем лишние пробелы в строке до одного пробела
	temp = temp.replace(elementPattern,'^$&^'); //Формируем строку, в которых выделены логические операторы, """" и скобки
	commonArray = temp.split("^"); //Формируем массив элементов из полученной строки разделением по ^

	// Преобразуем элементы массива в единую запись (обработка значений времени, числовых и строковых)
	for (let i = 0; i < commonArray.length; i++)
	{
		let index = 0;
		if (commonArray[i] != " ") commonArray[i] = commonArray[i].trim();
		
		if (commonArray[i] == "") index = 1;
		if (/^(И|AND|\&)$/i.test(commonArray[i]) || commonArray[i] == " ") index = 2;
		if (/^(ИЛИ|OR|\|)$/i.test(commonArray[i])) index = 3;
		if (/^(НЕ|NOT)$/i.test(commonArray[i]) && stringMode == 0) index = 4;
		if (/^(!=|<>)$/.test(commonArray[i]) && stringMode == 1) index = 5;
		if (/^([)]|[(])$/.test(commonArray[i])) index = 6;

		switch (index)
		{
			case 1://Удаление пустых элементов
				commonArray.splice(i,1);
				i--;
				break;
			case 2://Обработка логического И
				commonArray[i] = "&";
				break;
			case 3://Обработка логического ИЛИ
				commonArray[i] = "|";
				break;
			case 4://Обработка логического НЕ
				commonArray[i] = "!";
				if (commonArray[i-1] == ")")//Если за скобкой нет логической операции & или |, то по умолчанию добавляем &
				{
					commonArray.splice(i,0,"&");
					i++;
				}
				break;
			case 5://Обработка отрицания для числовых значений
				commonArray[i] = "!";
				if (commonArray[i+1] != "(" && commonArray[i+1] != "") commonArray[i+1] = "==" + commonArray[i+1]; //Добавляем аргументу знак ==
				break;
			case 6:
				break;
			default://Обработка аргумента
				//Только для строковых полей. Избавляемся от ковычек и добавляем к аргументу **
				if (stringMode == 0)
				{
					if (/^"".*""$/.test(commonArray[i])) commonArray[i] = commonArray[i].replace(/^""|""$/g, "");//Избавляемся от двойных ковычек
					if (!operatorPattern.test(commonArray[i])) commonArray[i] = `*${commonArray[i]}*`;//Добавляем аргументам **
					if (commonArray[i-1] == ")")
					{
						commonArray.splice(i,0,"&");
						i++;
					}
				}
				//Только для полей времени. Приводим к единому формату (дата + часы:минуты:секунды.мс). Парсим точное совпадение
				if (stringMode == 2)
				{	
					let addDate = "";
					//Приводим к единому формату (дата + часы:минуты:секунды.мс)
					if (!(argumentPattern.test(commonArray[i])))	
					{
						//Предполагается, что не указаны мс
						addDate = ".000";
						//Проверка, указаны ли секунды
						if (!/(0[1-9]|[12][0-9]|3[01])[- \.](0[1-9]|1[012])[.]\d{4}\s([0-1]\d|2[0-3])(:[0-5]\d){2}/.test(commonArray[i])) addDate = ":00" + addDate;
						//Проверка, указаны ли часы - минуты
						if (!/(0[1-9]|[12][0-9]|3[01])[- \.](0[1-9]|1[012])[.]\d{4}\s([0-1]\d|2[0-3])(:[0-5]\d){1}/.test(commonArray[i])) addDate = " 00:00" + addDate;
						commonArray[i] = commonArray[i] + addDate;
					}
			
					 //Добавляем аргументу знак ==
					if (!(signPattern.test(commonArray[i]))) commonArray[i] = "==" + commonArray[i];
					//Приведение выражения ==21.02.2018 10:50:06.123 к виду : >=21.02.2018 10:50:06.123 И <21.02.2018 10:50:07.124;
					if (/^(={2})\d/.test(commonArray[i]))
					{
						let newDate;
						let timeValue = commonArray[i].replace(signPattern,"");
						//В зависимости от указания формата значения, прибавляем свой отрезок времени
						if (addDate == "") newDate = DataTimeAdd(timeValue, "ms");
						if (addDate == ".000") newDate = DataTimeAdd(timeValue, "sec");
						if (addDate == ":00.000") newDate = DataTimeAdd(timeValue, "min");
						if (addDate == " 00:00:00.000") newDate = DataTimeAdd(timeValue, "day");
						commonArray[i] = ">=" + timeValue;
						commonArray.splice(i+1,0,"&");
						commonArray.splice(i+2,0,"<" + newDate);
						i = i + 2;
					}
				}
				break;
		}
	}

	// На этом этапе парсинг строки окончен. Необходимо представить строку в виде польской записи
	// Проходим поэлементно массив для формирования польской записи
	for (let i = 0; i < commonArray.length; i++)
	{	
		//Если элемент - логический оператор
		if (operatorPattern.test(commonArray[i]))
		{
			gravity = GravityValue(commonArray[i]);
			//В случае, если "("
			if (gravity == 4) 
			{
				operatorArray.push(commonArray[i]);
				continue;
			}
	
			//В случае, если ")" - скобка закрылась
			if (gravity == 5)
			{
				let bracketIndex = operatorArray.lastIndexOf("(", operatorArray.length-1)
				//Операторы, что были в скобках, записываем в результирующий массив
				while (operatorArray.length - 1 != bracketIndex)resultArray.push(operatorArray.pop());
				operatorArray.pop();
			}
		
			//В случае, если предыдущий оператор имеет больший вес - записываем в результирующий массив кроме случае с ()
			if (operatorArray.length != null) gravityPrev = GravityValue(operatorArray[operatorArray.length-1]);
			while (gravityPrev >= gravity && gravityPrev != 4 && gravityPrev != 5 && operatorArray.length != 0)
			{
				resultArray.push(operatorArray.pop());
				gravityPrev = GravityValue(operatorArray[operatorArray.length-1]);
			}
			
			//")" - не записываем
			if (gravity != 5) operatorArray.push(commonArray[i]);
		}
		else resultArray.push(commonArray[i]);
		
		//Если массив кончился - записываем остатки операндов в результирующий массив
		if (i == commonArray.length - 1)
		{
			while (operatorArray.length != 0)
			{
				resultArray.push(operatorArray.pop());
			}
		}
	}
	
	// Формирование JSON-строки
	var jsonStr = "";
	for (let i = 0; i < resultArray.length; i++)
	{
		// Если всего один элемент в массиве, то выводим только это условие
		if (resultArray.length == 1)
			if (!arrayPattern.test(resultArray[i]))
			{
				let expr = MakeExpression(resultArray[i]);
				if (expr != null)
					jsonStr = JSON.stringify(expr);
			}
		
		// Если условий несколько
		if (operatorPattern.test(resultArray[i]) && resultArray.length > 1)
		{
			let operator = resultArray[i].match(/[&]|[|]|[!]/);
			if (operator != null)
			{
				operator = operator[0];
				if (operator == "!")
				{
					operator = "NOT";
					
					//В случае, если есть отрицание, применяем к скобкам или выражению
					if (!arrayPattern.test(resultArray[i-1]))
						prevElem = MakeExpression(resultArray[i-1]);
					else prevElem = resultArray[i-1];
					
					let notExpression = {'NOT': prevElem};					
					resultArray.splice(i-1, 2, notExpression);
					i-= 1;
					
					// записываем выражение в виде строки
					jsonStr = JSON.stringify(notExpression);
				}
				else
				{
					if (operator == "&")
						operator = "AND";
					else if (operator == "|")
						operator = "OR";
					
					// Считываем элемент i-2 и i-1, если это не объекты - преобразуем
					if (!arrayPattern.test(resultArray[i-2]))
						prevPrevElem = MakeExpression(resultArray[i-2]);
					else prevPrevElem = resultArray[i-2];
					if (!arrayPattern.test(resultArray[i-1]))
						prevElem = MakeExpression(resultArray[i-1]);
					else prevElem = resultArray[i-1];
					
					// Создаем объект с именем оператора, который является массивом и заполняем его
					var objectInfo = {};					
					objectInfo[`${operator}`] = [];
					objectInfo[objectInfo[`${operator}`].push(prevPrevElem)];
					objectInfo[objectInfo[`${operator}`].push(prevElem)];
		
					// Заменяем элементы i-2 и i-1 на полученное выражение
					resultArray.splice(i-2, 3, objectInfo);
					i-= 2;
					
					// записываем объект в виде строки					
					jsonStr = JSON.stringify(objectInfo);
				}
			}
		}
	}
	
	if (jsonStr == "" || jsonStr == "null")
		return "Error: Проверьте корректность введенных данных";
	
	//log(jsonStr);
	return jsonStr;
}
catch(err)
{
	//throw err;
	return "Error: " + err.toString();
}

// Функция опеределения веса оператора
function GravityValue(gravity)
{
	switch(gravity)
	{
		case '&':
			gravity = 2;
			break;
		case '|':
			gravity = 1;
			break;
		case '(':
			gravity = 4;
			break;
		case ')':
			gravity = 5;
			break;
		case '!':
			gravity = 3;
			break;
	}
	return gravity;
}
	
// Фукнция получения выражения вида^
// ">": { "data": 10 }" - фильтр отображения
// ">": { "severity": 10 }" - фильтр запроса
// Выбор формата выходного выражения. filterType = 0 - фильтр отображения, 1 - фильтр запроса
function MakeExpression(str)
{
	// проверяем формат
	if (!formatPattern.test(str))
		throw "неверный формат";
	// определяем операцию сравнения
	let operator = str.match(signPattern);
	if (operator == null) operator = "==";
	else if (operator[0] == "=") operator = "=="; // заменяем оператор равенства
	else operator = operator[0];

	// определяем аргумент
	let argument = str.match(argumentPattern);
	if (argument != null)
		argument = argument[0];
	else
	{
		if (stringMode == 1)			
			throw str + " не является числом";
		else if (stringMode == 2)
			throw str + " не является временем";
		else argument = "";
	}
	
	let expression = {};
	switch (stringMode)
	{
		case 1:// Важность
			if (filterType == 0)
				expression = {[operator]: {"data":parseInt(argument)}};
			else expression = {[operator]: {[source]:parseInt(argument)}};
			break;
			
		case 2:// Дата
			// перед нахождением выражения здесь надо преобразовать строку времени в запись вида мм-дд-гг ч:м:с:мс
			argument = StringToDateTime(argument);
			if (filterType == 0)
				expression = {[operator]: {"data":argument}};
			else expression = {[operator]: {[source]:argument}};
			break;
		default://Символы
			if (filterType == 0)
			{
				if (isFormatted)
					expression = {text:argument.toString().trim()};
				else expression = {data:argument.toString().trim()};
			}
			else
				expression = {[source]:argument.toString().trim()};
			break;
	}
	return expression;
}]]>
				</body>
				<param access-modifier="private" name="inputString" display-name="" uuid="4e9d2815-c15e-444f-ae81-23c4d319fe78" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
				<param access-modifier="private" name="source" display-name="" uuid="2d748526-a04e-4371-be05-dfed3fc08435" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
				<param access-modifier="private" name="filterType" display-name="" uuid="0ec23269-f0f9-4679-ab02-ee82f681db3d" base-type="int1" base-type-id="756a0a23-7e63-4a13-8a35-e8a38909e5ed" ver="3"/>
				<param access-modifier="private" name="isFormatted" display-name="" uuid="1daff452-bfec-4876-94d4-d344a8883f15" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
			</do>
			<do access-modifier="private" name="CheckValueString" display-name="CheckValueString" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
				<body kind="javascript">
					<![CDATA[//Функция проверки корректности ввода значений типа string. Возвращает true, если ошибок нет
var commonArray = [];
var count = 0;
commonArray = JSON.parse(inputString);
if (commonArray == null) return true; 
//опеределяем количество скобок
try
{
	for (let i = 0; i < commonArray.length; i++)
	{
		if (commonArray[i] == "(") count++;
		if (commonArray[i] == ")") count--;
		switch (commonArray[i])
		{
			case "(":
				count++;
				if (i == commonArray.length - 1) return false; 
				break;
			case ")":
				count--;
				break;
			case "&":
			case "|":
				if (commonArray[i-1] == "(" || commonArray[i-1] == "!" || commonArray[i-1] == "&" || commonArray[i-1] == "|") return false; 
				if (commonArray[i+1] == ")" || commonArray[i+1] == "&" || commonArray[i+1] == "|") return false; 
				if (i == commonArray.length - 1) return false; 
				break;
			case "!":
				if (commonArray[i+1] == ")" || commonArray[i+1] == "&" || commonArray[i+1] == "|"|| commonArray[i+1] == "!") return false; 
				if (i == commonArray.length - 1) return false; 
				break;
		}
	}
}
catch (err)
{
	return false; 
}
if (count != 0) return false; 
return true;

]]>
				</body>
				<param access-modifier="private" name="inputString" display-name="" uuid="8a6ecd2e-417a-42c7-aec2-04c024d28ae4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			</do>
			<do access-modifier="private" name="CheckValueInt" display-name="CheckValueInt" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" form-by-id="true">
				<param access-modifier="private" name="inputValue" display-name="" uuid="e7478ddd-cb1b-4003-857f-06ea3e5f690a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				<body kind="javascript">
					<![CDATA[//Функция проверки корректности ввода значений типа int
var commonArray = [];
var count = 0;
commonArray = JSON.parse(inputValue);
if (commonArray == null) return true; 
//опеределяем количество скобок
try
{
	for (let i = 0; i < commonArray.length; i++)
	{
		if (commonArray[i] == "(") count++;
		if (commonArray[i] == ")") count--;
		switch (commonArray[i])
		{
			case "(":
				count++;
				if (i == commonArray.length - 1) error = true;
				break;
			case ")":
				count--;
				break;
			case "&":
			case "|":
				if (commonArray[i-1] == "(" || commonArray[i-1] == "!" || commonArray[i-1] == "&" || commonArray[i-1] == "|") return false; 
				if (commonArray[i+1] == ")" || commonArray[i+1] == "&" || commonArray[i+1] == "|") return false; 
				if (i == commonArray.length - 1) return false; 
				break;
			case "!":
				if (commonArray[i+1] == ")" || commonArray[i+1] == "&" || commonArray[i+1] == "|" || commonArray[i+1] == "!") return false; 
				if (i > 0 && commonArray[i-1] != "&" && commonArray[i-1] != "|") return false;
				if (i == commonArray.length - 1) return false; 
				break;
			default:
				if (!/^(==|<=|>=|>|<)\d+$/.test(commonArray[i])) return false; 
				break;
		}
	}
}
catch (err)
{
	return false; 
}
if (count != 0) return false; 
return true;]]>
				</body>
			</do>
			<do access-modifier="private" name="CheckValueDateTime" display-name="CheckValueDateTime" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
				<body kind="javascript">
					<![CDATA[//Функция проверки корректности ввода значений типа time. Возвращает true, если ошибок нет
var commonArray = [];
var count = 0;
commonArray = JSON.parse(inputValue);
if (commonArray == null) return true; 

//опеределяем количество скобок
try
{
	for (let i = 0; i < commonArray.length; i++)
	{
		if (commonArray[i] == "(") count++;
		if (commonArray[i] == ")") count--;
		switch (commonArray[i])
		{
			case "(":
				count++;
				if (i == commonArray.length - 1) error = true;
				break;
			case ")":
				count--;
				break;
			case "&":
			case "|":
				if (commonArray[i-1] == "(" || commonArray[i-1] == "!" || commonArray[i-1] == "&" || commonArray[i-1] == "|") return false; 
				if (commonArray[i+1] == ")" || commonArray[i+1] == "&" || commonArray[i+1] == "|") return false; 
				if (i == commonArray.length - 1) return false; 
				break;
			case "!":
				if (commonArray[i+1] == ")" || commonArray[i+1] == "&" || commonArray[i+1] == "|"|| commonArray[i+1] == "!") return false; 
				if (i > 0 && commonArray[i-1] != "&" && commonArray[i-1] != "|") return false;
				if (i == commonArray.length - 1) return false; 
				break;
			default:
				if (!/^(==|<=|>=|>|<) *((0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.]\d{4}\s([01]\d|2[0-3])(:[0-5]\d){2}(\.[0-9]{3})+)?$/.test(commonArray[i])) return false; 
				if (/^(==|<=|>=|>|<) *(31.12.9999 23:59:59.999)?$/.test(commonArray[i])) return false; 
				break;
		}
	}
}
catch (err)
{
	return false; 
}
if (count != 0) return false; 
return true;]]>
				</body>
				<param access-modifier="private" name="inputValue" display-name="" uuid="abb617a8-37b1-4730-9e04-0024bc80e8aa" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			</do>
			<do access-modifier="private" name="StringToDateTime" display-name="StringToDateTime" ver="5" type="uint8" type-id="c8ff7701-da6e-4d53-888a-81fa680ff561">
				<body kind="om">
					<![CDATA[str: string = inputString;
time: uint8 = DateTime.Parse(str);
time = DateTime.ToUtc(time);//перевод времени в формат utc
return time;]]>
				</body>
				<param access-modifier="private" name="inputString" display-name="" uuid="fe03fef0-cf93-4f63-9ef9-d0a176f36970" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			</do>
			<do access-modifier="private" name="DataTimeAdd" display-name="DataTimeAdd" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="om">
					<![CDATA[//Функция прибавления временного отрезка на 1 у.е.
data: uint8 = DateTime.Parse(inputString);
ms: uint2 = 0;
msString: string;

if (offsetMode == "ms") data = DateTime.AddMSeconds(data, 1);
if (offsetMode == "sec") data = DateTime.AddSeconds(data, 1);
if (offsetMode == "min") data = DateTime.AddMinutes(data, 1);
if (offsetMode == "day") data = DateTime.AddDays(data, 1);

ms = DateTime.MSecond(data);//Для вывода мс
if (ms < 10) msString = ".00";
else if (ms < 100) msString = ".0";
else msString = ".";
msString = String.Concat(msString, String.ToString(ms));

resultStr: string = DateTime.ToString(data);
resultStr = String.Concat(resultStr, msString);
return resultStr;]]>
				</body>
				<param access-modifier="private" name="inputString" display-name="" uuid="a3226cbc-39a3-49b1-808a-81d899096720" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				<param access-modifier="private" name="offsetMode" display-name="" uuid="edcbd435-2710-4fdb-a929-f0c721aae8b9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			</do>
			<object access-modifier="private" name="EventSettings" display-name="EventSettings" uuid="00ab1bfc-3de1-46f2-8d32-b1e69559e487" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="-30" ver="3"/>
				<designed target="Y" value="-30" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="0.01" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<object access-modifier="private" name="DecoratorSettings" display-name="DecoratorSettings" uuid="910582af-7c55-469d-a64b-d76c4e19534c" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
					<designed target="Frozen" value="false" ver="3"/>
					<designed target="MaxRowCount" value="2147483647" ver="3"/>
				</object>
				<designed target="ZValue" value="0" ver="3"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[TableInitializer();

var filePath = File.CombinePath(ConfigurationPath, "eventstyles.json");
if (File.Exists(filePath))
{
	//log("Загрузка настроек событий из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var eventstyles = JSON.parse(json);
		
		if (eventstyles.Version==undefined)
		{
			eventstyles.BlinkColumns = 0x2;
			eventstyles.BlinkAllColumns = true;
			
			if (eventstyles.Table != null && eventstyles.Table.length > 0)
			{
				eventstyles.Table2 = [];
				for (let i = 0; i < eventstyles.Table.length; i++)
					{
						var item = {};
						item.activity = eventstyles.Table[i][0];
						item.subcondition = "";
						item.severity = eventstyles.Table[i][1];
						item.group = eventstyles.Table[i][2];
						item.background = eventstyles.Table[i][3];
						item.text = eventstyles.Table[i][4];
						//item.example = eventstyles.Table[i][5];//example dont saved
						item.blinking = eventstyles.Table[i][6];
						item.blinkingBackground = eventstyles.Table[i][7];
						item.blinkingText = eventstyles.Table[i][8];
						item.id = i;
						item.ackBackground = 0;
						item.ackText = 0;
						eventstyles.Table2.push(item);
					}
			}
		}
		else if (eventstyles.Version==1)
		{
			// признак выделения всей строки в отдельном поле
			eventstyles.BlinkAllColumns = (eventstyles.BlinkColumns & 0x8000) > 0;
			
			// порядок бит приводим к порядку столбцов в таблице
			var blinkColumns = eventstyles.BlinkColumns & 0xFF7FFF;
			if (eventstyles.BlinkColumns & 0x400) blinkColumns |= 0x800;
			if (eventstyles.BlinkColumns & 0x800) blinkColumns |= 0x1000;
			if (eventstyles.BlinkColumns & 0x1000) blinkColumns |= 0x2000;
			if (eventstyles.BlinkColumns & 0x2000) blinkColumns |= 0x400;
			if (eventstyles.BlinkColumns & 0x4000) blinkColumns |= 0x10000;
			if (eventstyles.BlinkColumns & 0x10000) blinkColumns |= 0x4000;
			if (eventstyles.BlinkColumns & 0x20000) blinkColumns |= 0x8000;
			eventstyles.BlinkColumns = blinkColumns;
		}
		if (eventstyles.BlinkColumns!=undefined)//eventstyles.Version==2
		{
			var obj = [];
			if (eventstyles.BlinkColumns & 0x1) obj.push(TableView.Static.Column_Time.Id);
			if (eventstyles.BlinkColumns & 0x2) obj.push(TableView.Static.Column_ActiveTime.Id);
			if (eventstyles.BlinkColumns & 0x4) obj.push(TableView.Static.Column_DeactiveTime.Id);
			if (eventstyles.BlinkColumns & 0x8) obj.push(TableView.Static.Column_Message.Id);
			if (eventstyles.BlinkColumns & 0x10) obj.push(TableView.Static.Column_Source.Id);
			if (eventstyles.BlinkColumns & 0x20) obj.push(TableView.Static.Column_Severity.Id);
			if (eventstyles.BlinkColumns & 0x40) obj.push(TableView.Static.Column_Ack.Id);
			if (eventstyles.BlinkColumns & 0x80) obj.push(TableView.Static.Column_AckTime.Id);
			if (eventstyles.BlinkColumns & 0x100) obj.push(TableView.Static.Column_Actor.Id);
			if (eventstyles.BlinkColumns & 0x200) obj.push(TableView.Static.Column_Comment.Id);
			if (eventstyles.BlinkColumns & 0x400) obj.push(TableView.Static.Column_Active.Id);
			if (eventstyles.BlinkColumns & 0x800) obj.push(TableView.Static.Column_AckRequired.Id);
			if (eventstyles.BlinkColumns & 0x1000) obj.push(TableView.Static.Column_Quality.Id);
			if (eventstyles.BlinkColumns & 0x2000) obj.push(TableView.Static.Column_Value.Id);
			if (eventstyles.BlinkColumns & 0x4000) obj.push("kind");
			if (eventstyles.BlinkColumns & 0x8000) obj.push("prev_active_time");
			if (eventstyles.BlinkColumns & 0x10000) obj.push(TableView.Static.Column_Group.Id);
			eventstyles.BlinkingColumns = JSON.stringify(obj);
		}
		
		DefColBackground = eventstyles.DefColBackground;
		DefColText = eventstyles.DefColText;
		AckColBackground = eventstyles.AckColBackground;
		AckColText = eventstyles.AckColText;
		SelectEventsCol = eventstyles.SelectEventsCol;
		AckStyleMode = eventstyles.AckStyleMode;
		BlinkingColumns = eventstyles.BlinkingColumns;
		BlinkAllColumns = eventstyles.BlinkAllColumns;
		CustomColors = JSON.stringify(eventstyles.CustomColors);
		
		DecoratorSettings.Clear();
		if (eventstyles.Table2 != null && eventstyles.Table2.length > 0)
		{
			DecoratorSettings.InsertRows(0, eventstyles.Table2.length);
			for (let i = 0; i < eventstyles.Table2.length; i++)
			{
				DecoratorSettings.SetCellData(i,0,eventstyles.Table2[i].activity);
				DecoratorSettings.SetCellData(i,1,eventstyles.Table2[i].subcondition);
				DecoratorSettings.SetCellData(i,2,eventstyles.Table2[i].severity);
				DecoratorSettings.SetCellData(i,3,eventstyles.Table2[i].group);
				DecoratorSettings.SetCellData(i,4,eventstyles.Table2[i].background);
				DecoratorSettings.SetCellData(i,5,eventstyles.Table2[i].text);
				//DecoratorSettings.SetCellData(i,6,"");//example dont saved
				DecoratorSettings.SetCellData(i,7,eventstyles.Table2[i].blinking);
				DecoratorSettings.SetCellData(i,8,eventstyles.Table2[i].blinkingBackground);
				DecoratorSettings.SetCellData(i,9,eventstyles.Table2[i].blinkingText);
				DecoratorSettings.SetCellData(i,10,eventstyles.Table2[i].id);
				DecoratorSettings.SetCellData(i,11,eventstyles.Table2[i].ackBackground);
				DecoratorSettings.SetCellData(i,12,eventstyles.Table2[i].ackText);
			}
		}
		
		ResetDecorators();
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "eventstyles.json");
//log("Сохранение настроек событий в файл "  + filePath);
try
{
	var events = {Version:3};
	events.Table2 = [];
	for (let i = 0; i < DecoratorSettings.GetRowCount(); i++)
	{
		var item = {};
		item.activity = DecoratorSettings.GetCellData(i,0);
		item.subcondition = DecoratorSettings.GetCellData(i,1);
		item.severity = DecoratorSettings.GetCellData(i,2);
		item.group = DecoratorSettings.GetCellData(i,3);
		item.background = DecoratorSettings.GetCellData(i,4);
		item.text = DecoratorSettings.GetCellData(i,5);
		//item.example = DecoratorSettings.GetCellData(i,6);//example dont saved
		item.blinking = DecoratorSettings.GetCellData(i,7);
		item.blinkingBackground = DecoratorSettings.GetCellData(i,8);
		item.blinkingText = DecoratorSettings.GetCellData(i,9);
		item.id = DecoratorSettings.GetCellData(i,10);
		item.ackBackground = DecoratorSettings.GetCellData(i,11);
		item.ackText = DecoratorSettings.GetCellData(i,12);
		events.Table2.push(item);
	}
	events.DefColBackground = DefColBackground;
	events.DefColText = DefColText;
	events.AckColBackground = AckColBackground;
	events.AckColText = AckColText;
	events.SelectEventsCol = SelectEventsCol;
	events.AckStyleMode = AckStyleMode;
	events.BlinkingColumns = BlinkingColumns;
	events.BlinkAllColumns = BlinkAllColumns;
	if (CustomColors != "")
		events.CustomColors = JSON.parse(CustomColors);
	
	File.WriteTextFile(filePath, JSON.stringify(events, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
					</body>
				</do>
				<do access-modifier="private" name="TableInitializer" display-name="TableInitializer" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[if (DecoratorSettings.GetColumnCount() > 0) return;
DecoratorSettings.AddColumn("activity","","","","string",false,true);
DecoratorSettings.AddColumn("subcondition","","","","string",false,true);
DecoratorSettings.AddColumn("severity","","","","string",false,true);
DecoratorSettings.AddColumn("group","","","","string",false,true);
DecoratorSettings.AddColumn("background","","","","uint4",false,true);
DecoratorSettings.AddColumn("text","","","","uint4",false,true);
DecoratorSettings.AddColumn("example","","","","string",false,true);
DecoratorSettings.AddColumn("blinking","","","","string",false,true);
DecoratorSettings.AddColumn("blinkingBackground","","","","uint4",false,true);
DecoratorSettings.AddColumn("blinkingText","","","","uint4",false,true);
DecoratorSettings.AddColumn("id","","","","uint4",false,true);
DecoratorSettings.AddColumn("ackBackground","","","","uint4",false,true);
DecoratorSettings.AddColumn("ackText","","","","uint4",false,true);]]>
					</body>
				</do>
				<object access-modifier="private" name="DefColBackground" display-name="DefColBackground" uuid="45df4f65-7dad-4b3f-90c6-8216a6c4c5dc" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
				<object access-modifier="private" name="DefColText" display-name="DefColText" uuid="725d17fa-68ee-4508-b4b4-ea73ec3a9789" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
				<object access-modifier="private" name="AckColBackground" display-name="AckColBackground" uuid="ed028760-c4f2-4aa3-90f6-c5fc90368b56" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
				<object access-modifier="private" name="AckColText" display-name="AckColText" uuid="6be6eb10-2226-4eb2-a560-9d33a6a78b1c" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
				<object access-modifier="private" name="SelectEventsCol" display-name="SelectEventsCol" uuid="f08a8a65-7aac-49a3-86db-0d3c87ce35d9" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
				<object access-modifier="private" name="AckStyleMode" display-name="AckStyleMode" uuid="2dfed435-8f32-4bc7-92d6-9d0d24fed383" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
				<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[//Значения по умолчанию
DefColBackground = 0xffffffff;
DefColText = 0xff000000;
AckColBackground = 0xffffffff;
AckColText = 0xff000000;
SelectEventsCol = 0xff0080ff;
AckStyleMode = false;
BlinkingColumns = GetBlinkingColumnsDefault();
BlinkAllColumns = true;

ResetDecorators();]]>
					</body>
				</do>
				<do access-modifier="private" name="MakeJSONstring" display-name="MakeJSONstring" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" form-by-id="true">
					<param access-modifier="private" name="inputString" display-name="" uuid="3109f0de-b765-4870-94bd-1a79fe021593" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
					<body kind="javascript">
						<![CDATA[//Функция преобразует исходную строку в формат JSON вида ">": { "severity": 10 }"
//определяются логические операторы и происходит поэтапное формирование логических выражений из элементов массива и происходит формирование строки в JSON формате
var str = inputString;
var objectInfo = {};
var JSONStr = '';
var tempArray =[];

//Если пустая строка, то возвращаем "0" для того, чтобы в очередь не попадали значения
//if (inputString == "") return '{"severity": 0 }';

//Шаблон диапазона
var gapPattern = /\d+[-]\d+/;

//Заполняем массив символами строки
var commonArray = str.split(",");

//Фукнция получения выражения вида ">": { "severity": 10 }"
function MakeExpression(str,gap)
{
	let argument = str.match(/\d+/g);
	let expression = {};
	//Если имеем дело с диапазоном
	expression = {[gap]: {["data:" + `${columnId}`] : parseInt(argument[0])}};
	return expression
}

//Если элемент всего один и не диапазон
if (commonArray.length == 1 && !gapPattern.test(commonArray[0])) 
{
	objectInfo = MakeExpression(commonArray[0],"==");
	JSONStr = JSON.stringify(objectInfo);
	return JSONStr;
}

//Формирование JSON-строки
for (let i = 0; i < commonArray.length; i++)
{
	let tempObject = {};
	tempObject[`AND`] = [];
	if (gapPattern.test(commonArray[i]))
	{
		tempArray = commonArray[i].match(/\d+/g);
		tempObject[`AND`].push(MakeExpression(tempArray[0],">="));
		tempObject[`AND`].push(MakeExpression(tempArray[1],"<="));
		if (commonArray.length > 1)
		{
			if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
			objectInfo[`OR`].push(tempObject);
		}
		else objectInfo = tempObject;
	}
	else
	{
		if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
		objectInfo[`OR`].push(MakeExpression(commonArray[i],"=="));
	}
}

//записываем объект в виде строки
JSONStr = JSON.stringify(objectInfo);
return JSONStr;]]>
					</body>
					<param access-modifier="private" name="columnId" display-name="" uuid="974bb16c-4ceb-4bb4-8943-407af17fa153" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeObjectFormatDictionary" display-name="MakeObjectFormatDictionary" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Формирование наборов форматов
var formatDictionary = {};

formatDictionary = {};
formatDictionary[`format_name`] = formatName;
formatDictionary[`format`] = {};
formatDictionary[`format`][`enum_format`] = JSON.parse(enumCondition);

return JSON.stringify(formatDictionary,null,2);]]>
					</body>
					<param access-modifier="private" name="formatName" display-name="" uuid="9b0e76a5-cebe-4232-a221-9cc06b6f8ec8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="enumCondition" display-name="" uuid="db378015-4587-4017-81a6-050be2d4822e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeObjectFormatDictionaryBool" display-name="MakeObjectFormatDictionaryBool" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Формирование наборов форматов
var formatDictionary = {};

formatDictionary = {};
formatDictionary[`format_name`] = formatName;
formatDictionary[`format`] = {};
formatDictionary[`format`][`bool_format`] = JSON.parse(enumCondition);

return JSON.stringify(formatDictionary,null,2);]]>
					</body>
					<param access-modifier="private" name="formatName" display-name="" uuid="2de23ca9-8e88-43c9-91bd-524340b0ecb6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
					<param access-modifier="private" name="enumCondition" display-name="" uuid="96762dc4-c837-4c0a-9d21-161c5a060548" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				</do>
				<do access-modifier="private" name="MakeObjectFormatting" display-name="MakeObjectFormatting" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Формирование правил форматирования

var formatting = {};

formatting[`formatting_rule_name`] = "formatting_" + formatName;
formatting[`formatting_column`] = columnName;

//Если задаётся текст по-умолчанию
if (text_default != "")
{
formatting[`text`] = text_default;
}

//Выбор типа форматирования: ссылка на формат или условие-значение
if (condition == "")
{
	formatting[`format`] = formatName;
}
else formatting.conditions = JSON.parse(condition);

return JSON.stringify(formatting,null,2);]]>
					</body>
					<param access-modifier="private" name="formatName" display-name="" uuid="a0895ee0-22c0-4caa-803f-dafa239d79bc" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="columnName" display-name="" uuid="2de6c15a-dabf-4891-8664-ffca465dc852" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="condition" display-name="" uuid="ef8d80b2-43bb-44b0-88ff-1f7b1d3c98b8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="text_default" display-name="" uuid="32758a14-47ac-4b2b-8526-48315507938b" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeObjectDefStyle" display-name="MakeObjectDefStyle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Формирование строки декоратора для остальных сообщений
var Object = {};

var backgroundColor;
var textColor;
Object.Decorating = [];
Object.StyleDictionary = [];

backgroundColor = DefColBackground.toString(16); //цвет фона
textColor = DefColText.toString(16); //цвет текста

//Формирование объекта правил декорирования
var decorating = {};
var styleDictionary = {};
decorating[`decoration_rule_name`] = ruleName;
decorating[`rowstyle`] = ruleName + "_style";
//decorating[`columnstyle`] = {};
//decorating[`columnstyle`][`ack_required`] = columnStyleName;
Object.Decorating.push(decorating);

styleDictionary[`style_name`] = ruleName + "_style";
styleDictionary[`style`] = {};
styleDictionary[`style`][`background_color`] = '#'+ backgroundColor +'';
styleDictionary[`style`][`color`] = '#'+textColor+'';

//Настройка границ
styleDictionary[`style`][`border`] = {'all':{'color':'#ff000000','style':'none','width':'2'}};

Object.StyleDictionary.push(styleDictionary);

return JSON.stringify(Object,null,2);

]]>
					</body>
					<param access-modifier="private" name="ruleName" display-name="" uuid="94c6cc38-6d18-40fd-9ac3-b215e740da01" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeObjectDecorations" display-name="MakeObjectDecorations" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" form-by-id="true">
					<param access-modifier="private" name="ruleName" display-name="" uuid="0cba4961-7f10-434d-b925-d4e05fcd5469" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="conditionName" display-name="" uuid="2f2b12be-3dd0-4773-af48-b22d9ecfb75f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="rowStyleName" display-name="" uuid="e341edd9-c685-43cd-80cf-7c7f97e57050" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<body kind="javascript">
						<![CDATA[//Формирование объекта правил декорирования
var decorating = {};
decorating[`decoration_rule_name`] = ruleName;
decorating[`decoration_rule`] = {"==":{	["condition:"+conditionName]:true}};
decorating[`rowstyle`] = rowStyleName;
if (columnStyle != "")
{
	decorating[`columnstyle`] = {};
	decorating[`columnstyle`] = JSON.parse(columnStyle);
}
return JSON.stringify(decorating,null,2);]]>
					</body>
					<param access-modifier="private" name="columnStyle" display-name="" uuid="5307304d-9960-4d8a-9fae-285db08fc565" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeObjectStyleDictionary" display-name="MakeObjectStyleDictionary" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[// Формирование объекта набора стилей

var styleDictionary = {};

styleDictionary[`style_name`] = styleName;
styleDictionary[`style`] = {};
styleDictionary[`style`][`background_color`] = '#' + backgroundColor +'';
styleDictionary[`style`][`color`] = '#'+textColor+'';

// Заполняем параметры мигания
if (blinkingTime != "0") {
	styleDictionary[`style`][`blinker`] = {};
	styleDictionary[`style`][`blinker`][`blinker_color`] = '#'+blinkTextColor+'';
	styleDictionary[`style`][`blinker`][`blinker_background_color`] = '#'+blinkBackColor+'';
	styleDictionary[`style`][`blinker`][`blinker_period`] = blinkingTime;
}

// Настройка границ
styleDictionary[`style`][`border`] = {'all':{'color':'#ff000000','style':'none','width':'2'}};

return JSON.stringify(styleDictionary,null,2);]]>
					</body>
					<param access-modifier="private" name="styleName" display-name="" uuid="64359537-763f-4f05-a2ae-9b3d3a8f1b82" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="backgroundColor" display-name="" uuid="cbc2a0e5-3374-4be0-a42f-83ac681e736e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="textColor" display-name="" uuid="a502a3b6-13dd-4b65-99b0-474ae3336e49" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="blinkBackColor" display-name="" uuid="239e9397-6434-4104-ad2d-ec4ce2241512" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="blinkTextColor" display-name="" uuid="c5436668-fe49-4c38-9b33-ed12288d43de" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
					<param access-modifier="private" name="blinkingTime" display-name="" uuid="1a1ede80-6b90-4928-8002-1803dd3b2804" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeObjectSelStyle" display-name="MakeObjectSelStyle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Формирование строки декоратора для выбранного сообщения
var Object = {};

var backgroundColor;
var textColor;
Object.Decorating = [];
Object.StyleDictionary = [];

backgroundColor = SelectEventsCol.toString(16); //цвет фона
textColor = DefColText.toString(16); //цвет текста

//Формирование объекта правил декорирования
var decorating = {};
var styleDictionary = {};
decorating[`decoration_rule_name`] = ruleName;
decorating[`decoration_rule`] = {"row:isSelected": true};
decorating[`rowstyle`] = ruleName + "_style";
Object.Decorating.push(decorating);

styleDictionary[`style_name`] = ruleName + "_style";
styleDictionary[`style`] = {};
styleDictionary[`style`][`border`] ={'top':{'color':'#'+ backgroundColor +'','style':'solid','width':'2'},'bottom':{'color':'#'+ backgroundColor +'','style':'solid','width':'2'}};
Object.StyleDictionary.push(styleDictionary);

return JSON.stringify(Object,null,2);
]]>
					</body>
					<param access-modifier="private" name="ruleName" display-name="" uuid="b9f982af-73e5-491e-8fe5-53c1401cecb9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="MakeAckButtonCondition" display-name="MakeAckButtonCondition" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Функция преобразует исходную строку в формат JSON для условий важности
//определяются логические операторы и происходит поэтапное формирование логических выражений из элементов массива и происходит формирование строки в JSON формате
//todo метод почти полностью дублирует MakeRequestJSON
var objectInfo = {};
var resultObject = {};
var JSONStr = '';
var tempArray = [];
var AND = [];

//Если пустая строка, то возвращаем "0" для того, чтобы в очередь не попадали значения
//if (inputString == "") return '{"severity": 0 }';

//Шаблон диапазона
var gapPattern = /\d+[-]\d+/;

//Заполняем массив символами строки
var commonArray = inputString.split(",");

//Фукнция получения выражения вида ">": { "severity": 10 }"
function MakeExpression(str,gap)
{
	let argument = str.match(/\d+/g);
	let expression = {};
	//Если имеем дело с диапазоном
	if (argument==null || argument.length==0) expression = {'data:severity':0};
	else if (gap != "") expression = {[gap]: {'data:severity':parseInt(argument[0])}};
	else expression = {'data:severity':parseInt(argument[0])};
	return expression
}

//Если элемент всего один и не диапазон
if (commonArray.length == 1 && !gapPattern.test(commonArray[0])) 
{
	JSONStr = JSON.stringify(MakeExpression(commonArray[0],""));
	return JSONStr;
}

//Формирование JSON-строки
for (let i = 0; i < commonArray.length; i++)
{
	let tempObject = {};
	tempObject[`AND`] = [];
	if (gapPattern.test(commonArray[i]))
	{
		tempArray = commonArray[i].match(/\d+/g);
		tempObject[`AND`].push(MakeExpression(tempArray[0],">="));
		tempObject[`AND`].push(MakeExpression(tempArray[1],"<="));
		if (commonArray.length > 1)
		{
			if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
			objectInfo[`OR`].push(tempObject);
		}
		else objectInfo = tempObject;
	}
	else
	{
		if (objectInfo[`OR`] == undefined) objectInfo[`OR`] = [];	
		objectInfo[`OR`].push(MakeExpression(commonArray[i],""));
	}
}
//Отрицание всего сущего
resultObject[`NOT`] = objectInfo;

//записываем объект в виде строки
JSONStr = JSON.stringify(resultObject);
//log(JSONStr);
return JSONStr;
]]>
					</body>
					<param access-modifier="private" name="inputString" display-name="" uuid="3f201f2a-743f-4cca-97d6-79f37f6da36a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<designed target="Opacity" value="1" ver="3"/>
				<object access-modifier="private" name="BlinkingColumns" display-name="BlinkingColumns" uuid="101d2f31-931b-4ad5-bd53-fbaeabd975cd" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				<do access-modifier="private" name="BuildDecorator" display-name="BuildDecorator" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[TableInitializer();
//Формирование строки декоратора для оперативной и исторической таблицы
try{
var Object = {Conditions:[], Decorating:[], StyleDictionary:[], FormatDictionary:[], Formatting:[]};
var ObjectHistoryMode = {Conditions:[], Decorating:[], StyleDictionary:[], FormatDictionary:[], Formatting:[]};
var ackColBackground = AckColBackground.toString(16);
var ackColText = AckColText.toString(16);
	var ignoreOtherEvents = NotAckOtherEvents.Value; // Не квитировать события группы прочие
	var dontShowButton = FollowLatestEvent.Value || isExport; // Режим принудительного слежения за последним событием

{//Настройки декоратора по умолчанию
	//Для обычных сообщений
	Object.Decorating.push(JSON.parse(MakeObjectDefStyle('default_settings')).Decorating[0]);
	Object.StyleDictionary.push(JSON.parse(MakeObjectDefStyle('default_settings')).StyleDictionary[0]);
	ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDefStyle('default_settings')).Decorating[0]);
	ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectDefStyle('default_settings')).StyleDictionary[0]);
	//Для обычных квитированных сообщений
	if (AckStyleMode)
	{
		var other_decorating = {'decoration_rule_name':"other_acked_events",'rowstyle':"other_acked_events_style",'decoration_rule':{'AND':[{'data:ack':true},{'data:ack_required':true}]}};
		var other_aestyle = {'style_name':"other_acked_events_style", 'style':{'background_color':'#'+ackColBackground,'color':'#'+ackColText,'border':{'all':{'color':'#ff000000','style':'none','width':'2'}}}};
		Object.Decorating.push(JSON.parse(JSON.stringify(other_decorating)));
		Object.StyleDictionary.push(other_aestyle);
		if (MergeModeOff) other_decorating['decoration_rule']['AND'].push({'data:kind':1});
		ObjectHistoryMode.Decorating.push(other_decorating);
		ObjectHistoryMode.StyleDictionary.push(other_aestyle);
	}
	//Применять стиль квитированного сообщения по умолчанию к столбцам :Время генерации, Квитировано, Время квитирования, Пользователь, Комментарий
	if (!AckStyleMode)
	{
		var other_decorating = {'decoration_rule_name':"column_acked",'decoration_rule':{'AND':[{'data:ack':true},{'data:ack_required':true}]},'columnstyle':{'time':"column_acked",'ack':"column_acked",'ack_time':"column_acked",'actor_id':"column_acked",'ack_comment':"column_acked"}};
		var other_aestyle = {'style_name':"column_acked",'style':{'background_color':'#'+ackColBackground,'color':'#'+ackColText,'border':{'all':{'color':'#ff000000','style':'none','width':'2'}}}};
		Object.Decorating.push(JSON.parse(JSON.stringify(other_decorating)));
		Object.StyleDictionary.push(other_aestyle);
		if (MergeModeOff) other_decorating['decoration_rule']['AND'].push({'data:kind':1});
		ObjectHistoryMode.Decorating.push(other_decorating);
		ObjectHistoryMode.StyleDictionary.push(other_aestyle);
	}
}

var severityFormattingConditions = [];
var severityFormattingConditionsHistoryMode = [];
for (let i = DecoratorSettings.GetRowCount() - 1; i >= 0; i--)
{
	var active = DecoratorSettings.GetCellData(i,0); //состояние активности
	var activeHistoryMode = active;
	var activeHistoryMode2 = active;
	{
		if (active=="Активные")
		{
			active = JSON.stringify({'data:active':true});
			activeHistoryMode = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':2}, {'data:kind':0}]}):(active);
			activeHistoryMode2 = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':2}, {'data:kind':0}, {'AND':[{'data:kind':1},{'data:active':true}]}]}):(active);
		}
		else if (active=="Неактивные")
		{
			active = JSON.stringify({'data:active':false});
			activeHistoryMode = (MergeModeOff)?JSON.stringify({'data:kind':3}):(active);
			activeHistoryMode2 = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':3}, {'AND':[{'data:kind':1},{'data:active':false}]}]}):(active);
		}
		else
		{
			active = "";
			activeHistoryMode = (MergeModeOff)?JSON.stringify({'OR':[{'data:kind':2}, {'data:kind':0}, {'data:kind':3}]}):("");
			activeHistoryMode2 = "";
		}
	}
	var subcondition = DecoratorSettings.GetCellData(i,1); //подусловие
	var severity = DecoratorSettings.GetCellData(i,2); //значение важности
	if (severity == "") continue; //если важность не указана, пропускаем
	var group = DecoratorSettings.GetCellData(i,3); //значение группы важности
	var backgroundColor = DecoratorSettings.GetCellData(i,4).toString(16); //цвет фона
	var textColor = DecoratorSettings.GetCellData(i,5).toString(16); //цвет текста
	var blinkBackColor = DecoratorSettings.GetCellData(i,8).toString(16); //цвета фона мигания
	var blinkTextColor = DecoratorSettings.GetCellData(i,9).toString(16); //цвет текста мигания
	ackColBackground = (DecoratorSettings.GetCellData(i,11)==0 ? AckColBackground : DecoratorSettings.GetCellData(i,11)).toString(16);
	ackColText = (DecoratorSettings.GetCellData(i,12)==0 ? AckColText : DecoratorSettings.GetCellData(i,12)).toString(16);
	{//определяем время мигания в мс
		var blinkingTime = "0";
		switch (DecoratorSettings.GetCellData(i,7))
		{
			case "Нет":
				blinkingTime = "0";
				break;
			case "0.5 сек":
				blinkingTime = "500";
				break;
			case "1 сек":
				blinkingTime = "1000";
				break;
			case "2 сек":
				blinkingTime = "2000";
				break;
		}
	}
	
	{//Заполняем условия декорирования для квитированного и неквитированного состояния
		function MakeObjectConditions(activeValue,ackValue,conditionName){
			if (severity == "") return "";
			var conditions = {'condition_name':conditionName, 'condition':{'AND':[]}};
			//Добавляем в массив AND условия важности
			conditions['condition']['AND'].push(JSON.parse(MakeJSONstring(severity, "severity")));
			//Добавляем в массив AND подусловие
			if (subcondition != "") conditions['condition']['AND'].push({'data:subcondition_name':subcondition});
			//Добавляем в массив AND условие активности
			if (activeValue != "") conditions['condition']['AND'].push(JSON.parse(activeValue));
			//Добавляем в массив AND условие квитирования
			if (ackValue != "") conditions['condition']['AND'].push(JSON.parse(ackValue));
			if (conditions['condition']['AND'].length == 1) conditions['condition'] = conditions['condition']['AND'][0];
			return JSON.stringify(conditions,null,2);
		}
		Object.Conditions.push(JSON.parse(MakeObjectConditions(active, JSON.stringify({'data:ack':true}), "ack_" + i)));
		Object.Conditions.push(JSON.parse(MakeObjectConditions(active, JSON.stringify({'data:ack':false}), "not_ack_" + i)));
		Object.Conditions.push(JSON.parse(MakeObjectConditions(active, JSON.stringify({'data:ack':null}), "not_ack_not_req_" + i)));
		if (MergeModeOff)
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(active/*fix*/, JSON.stringify({'data:kind':1}), "ack_" + i)));
		else
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, JSON.stringify({'data:ack':true}), "ack_" + i)));
		if (MergeModeOff)
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, "", "not_ack_" + i)));
		else
			ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, JSON.stringify({'data:ack':false}), "not_ack_" + i)));
		ObjectHistoryMode.Conditions.push(JSON.parse(MakeObjectConditions(activeHistoryMode, JSON.stringify({'data:ack':null}), "not_ack_not_req_" + i)));
	
		// Заполняем стиль декорирования для квитированного и неквитированного состояния
		if (AckStyleMode)//Применять стиль квитированного сообщения к всем столбцам
		{
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, '')));
			ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, '')));
			
			Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, ackColBackground, ackColText, "", "", "0")));
			ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, ackColBackground, ackColText, "", "", "0")));
		}
		else// При применении к отдельным столбцам, создается отдельный стиль и стиль декорирования для столбцов и строки
		{
			let columns = {'time':"column_ack_"+i,'ack':"column_ack_"+i,'ack_time':"column_ack_"+i,'actor_id':"column_ack_"+i,'ack_comment':"column_ack_"+i};
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, JSON.stringify(columns))));
			ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_ack_" + i, "ack_" + i, "row_ack_" + i, JSON.stringify(columns))));
		
			Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("column_ack_" + i, ackColBackground, ackColText, "", "", "0")));
			ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("column_ack_" + i, ackColBackground, ackColText, "", "", "0")));		
		
			Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, backgroundColor, textColor, "", "", "0")));
			ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_ack_" + i, backgroundColor, textColor, "", "", "0")));
		}
	
		Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, isExport?"0":blinkingTime)));
		Object.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_not_req_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, "0")));
		ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, "0")));
		ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectStyleDictionary("row_not_ack_not_req_" + i, backgroundColor, textColor, blinkBackColor, blinkTextColor, "0")));
	
		//Заполняем правила декорирования для квитированного и неквитированного состояния
		if (BlinkAllColumns)
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_" + i, "not_ack_" + i, "row_not_ack_" + i, '')));
		else
			Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_" + i, "not_ack_" + i, "row_not_ack_not_req_" + i, BlinkColumnParsing("row_not_ack_" + i))));
		Object.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_not_req_" + i, "not_ack_not_req_" + i, "row_not_ack_not_req_" + i, '')));
	
		ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_" + i, "not_ack_" + i, "row_not_ack_" + i,'')));
		ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectDecorations("dec_not_ack_not_req_" + i, "not_ack_not_req_" + i, "row_not_ack_not_req_" + i, '')));
	}

	{//Задаем форматирование для столбца группы-важности
		if (group == "") continue;
		function madeCondition(activeValue)
		{
			var conditionItem = {'text':group,'condition':{'AND':[]}};
			conditionItem[`condition`][`AND`].push(JSON.parse(MakeJSONstring(severity, "severity")));
			if (activeValue != "")
				conditionItem[`condition`][`AND`].push(JSON.parse(activeValue));
			if (subcondition != "")
				conditionItem[`condition`][`AND`].push({'data:subcondition_name':subcondition});
			if (conditionItem[`condition`][`AND`].length == 1)
				conditionItem[`condition`] = conditionItem[`condition`][`AND`][0];
			return JSON.stringify(conditionItem);
		}
		severityFormattingConditions.push(JSON.parse(madeCondition(active)));
		severityFormattingConditionsHistoryMode.push(JSON.parse(madeCondition(activeHistoryMode2)));
	}
}

{//Декоратор для кнопки КВИТИРОВАТЬ
	var decorating = {};
	decorating['decoration_rule_name'] = 'ack_button';
	decorating['decoration_rule'] = {'AND': [{'data:ack': false},{'data:ack_required': true}]};
	if (ignoreOtherEvents)
		decorating['decoration_rule']['AND'].push({"==":{"condition:severity_of_other_events":true}});
	if (dontShowButton)
		decorating['columnstyle'] = {'ack_required':'hide_ack_button'}//#23602 нельзя оставлять пустым, но неправильным можно
	else
		decorating['columnstyle'] = {'ack_required':'ack_button'}
	Object.Decorating.push(decorating);

	var styleDictionary = {'style_name':"ack_button"};
	styleDictionary['style'] = {'blinker':{'blinker_period':'0'}};
	styleDictionary['style']['background_color'] = "#fff0f0f0";
	styleDictionary['style']['color'] = "#ff000000";
	styleDictionary['style']['text_align'] = "center";
	styleDictionary['style']['border'] = {'all':{'color':'#ff000000','style':'groove','width':'2'}};
	Object.StyleDictionary.push(styleDictionary);
}

//Настройки декоратора для выделенной строки //LineSelectionView
if (!FollowLatestEvent.Value || Main_panel.ToolBar.SnapshotON.Value)
{
	Object.Decorating.push(JSON.parse(MakeObjectSelStyle('row_selected')).Decorating[0]);
	Object.StyleDictionary.push(JSON.parse(MakeObjectSelStyle('row_selected')).StyleDictionary[0]);
}
ObjectHistoryMode.Decorating.push(JSON.parse(MakeObjectSelStyle('row_selected')).Decorating[0]);
ObjectHistoryMode.StyleDictionary.push(JSON.parse(MakeObjectSelStyle('row_selected')).StyleDictionary[0]);

//Заполняем словарь форматов для столбцов
var kindColumnFormat = JSON.stringify([{'value':0, 'text':'Активация'}, {'value':1, 'text':'Квитанция квитирования'}, {'value':2, 'text':'Псевдоактивация'}, {'value':3, 'text':'Деактивация'}]);
Object.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionaryBool("ack_column", JSON.stringify([{'value':true, 'text':'Да'}, {'value':false, 'text':'Нет'}]))));
Object.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionaryBool("active_column", JSON.stringify([{'value':true, 'text':'Активно'}, {'value':false, 'text':'Неактивно'}]))));
Object.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionary("kind_column_format", kindColumnFormat)));
Object.FormatDictionary.push({'format_name':"variant_format",'format':{"var_format":[{"value_type": "FloatTypeCategory","text_format": "%g"}]}});
ObjectHistoryMode.FormatDictionary.push(JSON.parse(MakeObjectFormatDictionary("kind_column_format", kindColumnFormat)));
ObjectHistoryMode.FormatDictionary.push({'format_name':"variant_format",'format':{"var_format":[{"value_type": "FloatTypeCategory","text_format": "%g"}]}});

//Заполняем правила форматирования для столбцов
Object.Formatting.push(JSON.parse(MakeObjectFormatting("group_column", "group", JSON.stringify(severityFormattingConditions.reverse()), "")));
Object.Formatting.push(JSON.parse(MakeObjectFormatting("active_column", "active","","")));
Object.Formatting.push(JSON.parse(MakeObjectFormatting("kind_column_format", "kind","","")));
Object.Formatting.push(JSON.parse(MakeObjectFormatting("variant_format", "value","","")));

ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("group_column", "group", JSON.stringify(severityFormattingConditionsHistoryMode.reverse()), "")));
ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("kind_column_format", "kind","","")));
ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("variant_format", "value","","")));
if (MergeModeOff)
{
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("active_column", "active", JSON.stringify([{'condition':{'data:kind':0},'text':'Активно'},{'condition':{'data:active':true},'text':'Активно'},{'condition':{'data:active':false},'text':'Активно'}]),"")));
	
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("deactive_time_column_mergeMode", "deactive_time",JSON.stringify([{'condition':{'data:kind':0},'text':' '}]),"")));
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_time_column_mergeMode", "ack_time",JSON.stringify([{'condition':{'data:kind':2},'text':' '},{'condition':{'data:kind':0},'text':' '}]),"")));
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("actor_id_column_mergeMode", "actor_id",JSON.stringify([{'condition':{'data:kind':0},'text':' '}, {'condition':{'data:kind':2},'text':' '}]),"")));
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_comment_column_mergeMode", "ack_comment",JSON.stringify([{'condition':{'data:kind':0},'text':' '}, {'condition':{'data:kind':2},'text':' '}]),"")));
} else
	ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("active_column", "active",JSON.stringify([{'condition':{'data:active':true},'text':'Активно'},{'condition':{'data:active':false},'text':'Неактивно'}]),"")));

{//OtherEventsDecorating++
// Функция включения/выключения декорирования кнопки КВИТИРОВАТЬ для остальных сообщений важностей, а также для режима FollowLastEvent
	if (ignoreOtherEvents)
	{
		var severity = Main_panel.private.SeverityJSONtoString(Main_tables_Operative.ApAlarmQueue_4.JsonFilter); //Важность в виде массива чисел
		var severityJSON = Main_panel.private.EventSettings.MakeAckButtonCondition(severity); //Важность в виде JSON строки в формате декоратора
		Object.Conditions.push({'condition_name':"severity_of_other_events",'condition':JSON.parse(severityJSON)});
		
		Object.Decorating.push({'decoration_rule_name':"dec_other_events", 'decoration_rule':{'condition:severity_of_other_events':false}, 'rowstyle':"row_other_events"});
		Object.StyleDictionary.push({'style_name':"row_other_events", 'style':{'blinker':{'blinker_period':'0'}}});
	}
	{//ack_required column formatting
		var buttonTitle = (dontShowButton)?("Не квитировано"):("Квитировать");
		var _conds = [];
		var tempObj = {'condition':{'AND':[{'data:ack':false},{'data:ack_required':true}]},'text':buttonTitle};
		if (ignoreOtherEvents)
			tempObj['condition']['AND'].push({'condition:severity_of_other_events':true});
		_conds.push(tempObj);
		
		_conds.push({'condition':{'data:ack':true},'text': 'text:ack_time'});
		_conds.push({'condition':{'data:ack_required':false},'text': ' '});
		if (ignoreOtherEvents)
			_conds.push({'condition':{'condition:severity_of_other_events':false},'text': ' '});
		
		Object.Formatting.push(JSON.parse(MakeObjectFormatting("ack_required_column", "ack_required", JSON.stringify(_conds), "")));
	}	
	{//ack column formatting
		var tempObj = {'formatting_rule_name':"formatting_ack_column",'formatting_column':"ack"};
		if (ignoreOtherEvents)
			tempObj['conditions'] = [{'condition':{'condition:severity_of_other_events': false},'text':" "}, {'condition':{'condition:severity_of_other_events': true},'format':"ack_column"}];
		else
			tempObj['format'] = "ack_column";
		Object.Formatting.push(tempObj);
	}
	{//History decorator
		//Conditions
		if (ignoreOtherEvents)
			ObjectHistoryMode.Conditions.push({'condition_name':"severity_of_other_events",'condition':JSON.parse(severityJSON)});
		//Formatting ack column
		var conds = [];
		if (ignoreOtherEvents)
			conds.push({'condition':{'condition:severity_of_other_events':false},'text': ' '});
		if (MergeModeOff)
			conds.push({'condition':{'AND':[{'OR':[{'data:kind':2},{'data:kind':0}]},{'data:ack_required':true}]},'text':'Нет'});
		conds.push({'condition':{'data:ack':true},'text':'Да'});
		conds.push({'condition':{'data:ack':false},'text':'Нет'});
		ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_column", "ack", JSON.stringify(conds), "")));
		//Formatting ack_required column
		var conditions = [];
		if (ignoreOtherEvents)
			conditions.push({'condition':{'condition:severity_of_other_events':false},'text':" "});
		if (MergeModeOff) {
			conditions.push({'condition':{'data:ack_required':false},'text':" "});
			conditions.push({'condition':{'data:kind':2},'text':'Не квитировано'});
			conditions.push({'condition':{'AND':[{'data:kind':0}, {'data:ack_required':true}]}, 'text':'Не квитировано'});
		}
		conditions.push({'condition':{'data:ack':true},'text':'text:ack_time'});
		conditions.push({'condition':{'data:ack':false},'text':"Не квитировано"});
		if (!MergeModeOff)
			conditions.push({'condition':{'data:ack_required':false},'text': " "});
		ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("ack_required_column", "ack_required", JSON.stringify(conditions), "")));
		//value column
		if (MergeModeOff)
			ObjectHistoryMode.Formatting.push(JSON.parse(MakeObjectFormatting("value_hide_format", "value", JSON.stringify([{'condition':{'AND':[{'data:kind':1}, {'data:ack_required':true}]}, 'text':' '}]),"")));
	}
}

{//AddObjectDescription
	var conditions = ObjectDescription.ObjectDescriptionDecorating();
	if (conditions != "")
	{
		Object.Formatting.push(JSON.parse(EventSettings.MakeObjectFormatting("source_column_rootObjectDescription", "source", conditions, "")));
		ObjectHistoryMode.Formatting.push(JSON.parse(EventSettings.MakeObjectFormatting("source_column_rootObjectDescription", "source", conditions, "")));
	}
}

return JSON.stringify(isHistory ? ObjectHistoryMode : Object);
}catch (err){log("Exception in BuildDecorator:");throw(err);}]]>
					</body>
					<param access-modifier="private" name="isHistory" display-name="" uuid="0b58be82-10b8-41e9-ae73-5ac84f6ce8c8" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
					<param access-modifier="private" name="isExport" display-name="" uuid="20fa2de6-254a-4b47-b98d-ea7de9119753" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
				</do>
				<do access-modifier="private" name="ResetDecorators" display-name="ResetDecorators" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[Main_tables_Operative.Table_Operative_mode.TableDecorator_1.JsonDecorator = BuildDecorator(false, false);
Main_tables_Historical.Table_History_mode.TableDecorator_1.JsonDecorator = BuildDecorator(true, false);]]>
					</body>
				</do>
				<do access-modifier="private" name="BlinkColumnParsing" display-name="BlinkColumnParsing" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[//Функция парсинга числа мигающих столбцов
var columnIds = BlinkingColumns==""?[]: JSON.parse(BlinkingColumns);
var Object = {};
for (let i = 0; i < columnIds.length; i++)
	Object[columnIds[i]] = styleName;
var jsonStr = JSON.stringify(Object);
return jsonStr;]]>
					</body>
					<param access-modifier="private" name="styleName" display-name="" uuid="a0e8a056-c7f2-4cf3-ab11-fe7728f92fab" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				</do>
				<object access-modifier="private" name="BlinkAllColumns" display-name="BlinkAllColumns" uuid="29700f10-e02f-415d-bd1e-bf34b3428130" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
				<object access-modifier="private" name="MergeModeOff" display-name="MergeModeOff" uuid="62d8d6e2-5353-404c-b429-e2606d172c6b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
				<object access-modifier="private" name="CustomColors" display-name="CustomColors" uuid="893eef2d-fe45-4eb5-aac1-388af2fa1328" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="4"/>
				<do access-modifier="private" name="GetBlinkingColumnsDefault" display-name="GetBlinkingColumnsDefault" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[var obj = [];
obj.push(TableView.Static.Column_ActiveTime.Id);
return JSON.stringify(obj);]]>
					</body>
				</do>
			</object>
			<object access-modifier="private" name="OperTableEmpty" display-name="OperTableEmpty" uuid="e27ce299-12f9-4a54-a1eb-426945bdd9de" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
			<object access-modifier="private" name="HistTableEmpty" display-name="HistTableEmpty" uuid="2957d527-b010-4908-835a-2d114ba28ff9" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
				<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[HistTableEmpty = Main_tables_Historical.Table_History_mode.GetRowCount() == 0;]]>
					</body>
				</do>
			</object>
			<designed target="ZValue" value="0" ver="3"/>
			<object access-modifier="private" name="LoadSaveBusy" display-name="LoadSaveBusy" uuid="6c1f3bff-96b7-4866-985a-7e102af36050" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1">
				<object access-modifier="private" name="LoadingHistory" display-name="LoadingHistory" uuid="a957d3d6-585d-4d24-acd5-7930bf9c9125" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
						<body kind="om">
							<![CDATA[Main_tables_Historical.StatusBar.SetVisible();]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="LoadingFile" display-name="LoadingFile" uuid="aba96a70-3071-48f9-a213-058ab899b526" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="SavingFile" display-name="SavingFile" uuid="e1df3dea-7034-4478-a7d6-32b9f232d7ce" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
			</object>
			<object access-modifier="private" name="tempActiveMode" display-name="tempActiveMode" uuid="d6cf6808-eec9-48bd-bb19-fb0b8d5e2a14" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
			<designed target="Opacity" value="1" ver="3"/>
			<init target="tempActiveMode" ver="5" value="-1"/>
			<do access-modifier="private" name="CheckActiveMode" display-name="CheckActiveMode" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[//Функция корректировки режима работы в соответствии с разрешением на просмотр событий
allowOperMode: bool = CurrentEventsAvailable; //Разрешение на опер. события
allowHistMode: bool = EventHistoryAvailable; //Разрешение на ист. события
mode: int4 = ActiveMode; //Текущий режим
prevValue: int4 = Main_panel.private.tempActiveMode; //Предыдущий режим

//Если значение не меняется, выходим
if (mode == prevValue) 
{
	return;
}

//Если это первый запуск, устанавливаем без изменений
if (prevValue == -1) 
{
	Main_panel.private.tempActiveMode = ActiveMode;
	return;
}

//Если нет разрешения на отображение событий в соотв-м режиме, устанавливаем предыдущее значение
if (mode == 0 && !allowOperMode || mode == 1 && !allowHistMode) 
{
	ActiveMode = prevValue;
	return;
}

Main_panel.private.tempActiveMode = ActiveMode;
return;]]>
				</body>
			</do>
			<object access-modifier="private" name="DuplicateCheck" display-name="DuplicateCheck" uuid="bdd62799-e149-4fb9-9d4e-47fe84255fc5" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
			<object access-modifier="private" name="InitComplete" display-name="InitComplete" uuid="37a29976-7090-4388-b2f7-a82d29a8933b" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
			<do access-modifier="private" name="isInformativeEvent" display-name="isInformativeEvent" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
				<body kind="javascript">
					<![CDATA[// Функция возвращает true, если элемент относится к группе важности "Прочие"

if (!NotAckOtherEvents.Value) return false

var severityArray = Main_tables_Operative.ApAlarmQueue_4.severityArray.split(",").map(function(value){
    return parseInt(value, 10);
});

if (severityArray.indexOf(severity) == -1) return false

return true]]>
				</body>
				<param access-modifier="private" name="severity" display-name="" uuid="883395fe-5169-470c-852b-1d365951a69e" base-type="uint2" base-type-id="ae923ad8-8b75-4813-8121-36efe3cc8c12" ver="3"/>
			</do>
			<do access-modifier="private" name="ShowHistoricalInterval" display-name="ShowHistoricalInterval" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[// Начало диапазона
Main_panel.ToolBar.RecHistory.Date_start.Value = timeStart;
Main_panel.ToolBar.RecHistory.Time_start.Value = timeStart;

// Конец диапазона
Main_panel.ToolBar.RecHistory.Date_final.Value = timeEnd;
Main_panel.ToolBar.RecHistory.Time_final.Value = timeEnd;

// После установки новых значений надо выполнить проверку
Main_panel.ToolBar.RecHistory.DateTimeChanged.Invoke();]]>
				</body>
				<param access-modifier="private" name="timeStart" display-name="" uuid="d7f14cfd-2dc4-466f-9b28-24195f823d69" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="3"/>
				<param access-modifier="private" name="timeEnd" display-name="" uuid="be6c30b3-bfcd-4aff-8614-1462dee4f535" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="3"/>
			</do>
			<do access-modifier="private" name="GetFormScale" display-name="GetFormScale" ver="5" type="float8" type-id="7ad62ecf-96dd-4751-9b96-e77954b44409">
				<body kind="om">
					<![CDATA[// Изменение масштаба формы при низком разрешении монитора
// Возвращает коэффициент масштабирования Scale

mX: int4 = ScreenX(MouseX, MouseY);
mY: int4 = ScreenY(MouseX, MouseY);

// Определение номера монитора
monitorNumber: int4 = 0;
count: int4 = MonitorList_1.Count();
i: int4 = 0;
while (i < count)
{
	x0: int4 = MonitorList_1.GetX(i);
	y0: int4 = MonitorList_1.GetY(i);
	if (mX > x0 && mX < x0 + MonitorList_1.GetResolutionX(i) && mY > y0 && mY < y0 + MonitorList_1.GetResolutionY(i))
			monitorNumber = i; // запоминаем номер монитора
	i += 1;
}

height *= 1.05;
width *= 1.05;
resX: int4 = MonitorList_1.GetResolutionX(monitorNumber);
resY: int4 = MonitorList_1.GetResolutionY(monitorNumber);
newScale: double = Math.Min(resY/height, resX/width);

//DebugTool_1.Log("newScale = " + String.ToString(newScale));

if (newScale < 1.0)
	return newScale;
else return 1.0;]]>
				</body>
				<param access-modifier="private" name="width" display-name="" uuid="e1ea16e7-8674-4032-b65f-6cea5e40e332" base-type="float8" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="4"/>
				<param access-modifier="private" name="height" display-name="" uuid="a84d3863-61bd-4c2c-889b-d584a0d3d434" base-type="float8" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="4"/>
			</do>
			<object access-modifier="private" name="MonitorList_1" display-name="MonitorList_1" uuid="6a513328-096f-4f53-80ae-1776dee4acbd" base-type="MonitorList" base-type-id="c74bfc5a-253e-4144-8b20-917cf4cf333b" ver="4"/>
			<do access-modifier="private" name="IsAbsolutePath" display-name="IsAbsolutePath" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
				<param access-modifier="private" name="filename" display-name="" uuid="6219a967-d8de-4362-9955-25c78f50af7e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				<body kind="javascript">
					<![CDATA[if (!File.Exists("/opt/"))
{
	if (/^(.+):(\\.*)$/.test(filename))
		return true;
	else
		return false;
}
else
{
	if (/^\//.test(filename))
		return true;
	else
		return false;
}]]>
				</body>
			</do>
			<object access-modifier="private" name="Export" display-name="Export" uuid="5e854529-f7ad-4a70-a775-6ac16691680c" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="-30" ver="3"/>
				<designed target="Y" value="-30" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="0.01" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="4"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "export.json");
if (File.Exists(filePath))
{
	//log("Загрузка параметров экспорта из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var settings = JSON.parse(json);
		
		ExportPath.Update(settings.Path);
		ViewColumnSettings.Value = settings.ViewColumnSettings;
		
		return true;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "export.json");
//log("Сохранение параметров экспорта в файл "  + filePath);
try
{
	var settings = {};
	settings.Path = ExportPath.GetValue();
	settings.ViewColumnSettings = ViewColumnSettings.Value;
	
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
					</body>
				</do>
				<object access-modifier="private" name="ViewColumnSettings" display-name="ViewColumnSettings" uuid="52cbd321-6eba-4d66-bf9d-9d469eed78dd" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
				<object access-modifier="private" name="ExportPath" display-name="ExportPath" uuid="379e7ca4-905c-46f9-8ded-2c93eb1a566b" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="3">
					<object access-modifier="private" name="Root" display-name="Root" uuid="78f6fdf1-d6cb-451e-8647-f2970062f8b0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					<do access-modifier="private" name="Update" display-name="Update" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
						<body kind="om">
							<![CDATA[// путь экспорта по умолчанию
d: string = File.ToNative(File.CombinePath(File.CombinePath(GetProgramDataFolder(), "Export"), "_"));
Default = String.SubString(d, 0, String.Length(d) - 1);

// если не указан, то используем путь экспорта по умолчанию
if (exportFolder == "")
	exportFolder = Default;

// завершаем путь разделителем, чтобы отличать путь к файлу от пути к папке
t: string = File.CombinePath(exportFolder, "_");
exportFolder = String.SubString(t, 0, String.Length(t) - 1);

// задаем путь для экспорта
ExportPath = File.ToNative(exportFolder);

// Если FileSystemAccess = true, то пользователь может сменить этот путь на любой другой, иначе он ограничен этой папкой.
if (Permission.FileSystem)
	Root = "/"; // корневой путь произвольного доступа
else Root = ExportPath;

//DebugTool_1.Log("ExportPath updated to '" + ExportPath + "' with '" + Root + "' root");]]>
						</body>
						<param access-modifier="private" name="exportFolder" display-name="" uuid="c8a2450c-c569-4b23-a9a9-f41e6d813bef" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					</do>
					<object access-modifier="private" name="Default" display-name="Default" uuid="e0c0f78e-6789-4b9f-887e-c717c4690dea" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
					<do access-modifier="private" name="GetValue" display-name="GetValue" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
						<body kind="om">
							<![CDATA[return ExportPath;]]>
						</body>
					</do>
				</object>
				<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[// пустое значение приведет к подстановке пути по умолчанию
ExportPath.Update("");]]>
					</body>
				</do>
			</object>
			<object access-modifier="private" name="TableView" display-name="TableView" uuid="6ea2514b-79e5-405b-a5bb-7d9698253ded" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="4">
				<designed target="X" value="-10" ver="4"/>
				<designed target="Y" value="-10" ver="4"/>
				<designed target="ZValue" value="0" ver="4"/>
				<designed target="Rotation" value="0" ver="4"/>
				<designed target="Scale" value="1" ver="4"/>
				<designed target="Visible" value="false" ver="4"/>
				<designed target="Opacity" value="1" ver="4"/>
				<designed target="Enabled" value="true" ver="4"/>
				<designed target="Tooltip" value="" ver="4"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var result = true;
RequestFilter.enableEventsChronology = true;//особенность этой версии

var ColumnOper = [];
var ColumnHist = [];
function BuildColumns()
{
	ColumnOper = [];
	ColumnHist = [];
	for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
		if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
		{
			ColumnOper.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
			ColumnHist.push(Main_tables_Historical.Table_History_mode.Columns[i]);
		}
}

var tableviewPath = File.CombinePath(ConfigurationPath, "tableview.json");
if (File.Exists(tableviewPath))
{
	//log("Загрузка настроек вида таблицы из файла "  + tableviewPath);
	try
	{
		var json = File.ReadTextFile(tableviewPath);
		var tableview = JSON.parse(json);
		if (tableview.Version == undefined)
		{
			//в разных ветках номера меняются поэтому конвертируем циклом
			var convert = {"Column_1":"time", "Column_2":"active_time","Column_3":"deactive_time","Column_4":"message","Column_5":"source",
				"Column_6":"severity","Column_7":"ack","Column_8":"ack_time","Column_9":"actor_id","Column_10":"ack_comment","Column_14":"active",
				"Column_17":"ack_required","Column_19":"quality","Column_20":"value","Column_21":"kind","Column_22":"prev_active_time","Column_23":"group"};
			var newCols = {};
			var temp = [];
			for (let i = 0; i < tableview.Columns.length; i++)
			{
				var key = Object.keys(tableview.Columns[i])[0];
				var id = convert[key];
				newCols[id] = tableview.Columns[i][key];
				temp.push({'Id':id, 'Index':newCols[id].Index});
			}
			//правка индексов
			temp = temp.sort((a, b) => a.Index - b.Index);
			for (let i = 0; i < temp.length; i++)
				newCols[temp[i].Id].Index = i;
			//спец столбцы
			if (newCols["prev_active_time"] != undefined)
			{
				tableview.Config = [
					{"Id":"kind", "Title":"Тип события", "SortMode":0, "VisibleInTable":true, "ModelType":"int4", "ItsCustom":true},
					{"Id":"prev_active_time", "Title":"Время предшествующей активации", "SortMode":0, "VisibleInTable":true, "ModelType":"timestamp", "ItsCustom":true}
					];
			}
			tableview.Columns = newCols;
		}

		SetColumnsCfg(JSON.stringify(tableview.Config));
		BuildColumns();

		// Сбрасываем текущую сортировку
		for (let i = 0; i < ColumnOper.length; i++)
		{
			ColumnOper[i].SortingEnabled = false;
			ColumnHist[i].SortingEnabled = false;
		}

		//if (tableview.Version==2)...
		var indexesArray = [];
		for (let i = 0; i < ColumnOper.length; i++)
		{
			var key = ColumnOper[i].Id;
			ColumnOper[i].Title = tableview.Columns[key].Title;
			ColumnHist[i].Title = tableview.Columns[key].Title;
			ColumnOper[i].Width = tableview.Columns[key].Width;
			ColumnHist[i].Width = tableview.Columns[key].Width;
			ColumnOper[i].Hidden = tableview.Columns[key].Hidden;
			ColumnHist[i].Hidden = tableview.Columns[key].Hidden;
			ColumnOper[i].WidthResizeMode = tableview.Columns[key].WidthResizeMode;
			ColumnHist[i].WidthResizeMode = tableview.Columns[key].WidthResizeMode;
			ColumnOper[i].Font = tableview.Columns[key].Font;
			ColumnHist[i].Font = tableview.Columns[key].Font;
			ColumnOper[i].TitleFont = tableview.Columns[key].TitleFont;
			ColumnHist[i].TitleFont = tableview.Columns[key].TitleFont;
			// ширина столбца
			widthColumn[i] = tableview.Columns[key].Width;
	
			// Формируем порядок столбцов
			var columnIndex = tableview.Columns[key].Index;
			if (columnIndex != null)
				indexesArray[columnIndex] = i/*colNumber*/;
		}
		//#25486 Применение порядка столбцов
		for (let i = 0; i < indexesArray.length; i++)
			if (indexesArray[i] != null)
			{
				Main_tables_Operative.Table_Operative_mode.MoveColumn(ColumnOper[indexesArray[i]].GetIndex(), i);
				Main_tables_Historical.Table_History_mode.MoveColumn(ColumnHist[indexesArray[i]].GetIndex(), i);
			}


		Main_tables_Operative.Table_Operative_mode.RowHeight = tableview.RowHeight;
		Main_tables_Historical.Table_History_mode.RowHeight = tableview.RowHeight;

		Main_tables_Operative.Table_Operative_mode.HeaderHeight = tableview.TitleHeight;
		Main_tables_Historical.Table_History_mode.HeaderHeight = tableview.TitleHeight;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + tableviewPath + ": " + error);
		SetColumnsCfg("");
		BuildColumns();
		SetDefaultView();
		result = false;
	}
}
else
{
	SetColumnsCfg("");
	BuildColumns();
	SetDefaultView();
}

var sortingPath = File.CombinePath(ConfigurationPath, "sorting.json");
if (File.Exists(sortingPath))
{
	//log("Загрузка параметров сортировки из файла "  + sortingPath);
	try
	{
		var json = File.ReadTextFile(sortingPath);
		var sorting = JSON.parse(json);
	
		// Сбрасываем текущую сортировку
		for (let i = 0; i < ColumnOper.length; i++)
		{
			ColumnOper[i].SortingEnabled = false;
			ColumnHist[i].SortingEnabled = false;
		}
		if (sorting.Version == undefined)
		{
			var newCols = {};
			//в разных ветках номера меняются поэтому используем цикл
			for (let i = 0; i < sorting.Columns.length; i++)
			{
				if (sorting.Columns[i]["Colum_1"] != undefined) newCols["time"] = sorting.Columns[i]["Colum_1"];
				if (sorting.Columns[i]["Colum_2"] != undefined) newCols["active_time"] = sorting.Columns[i]["Colum_2"];
				if (sorting.Columns[i]["Colum_3"] != undefined) newCols["deactive_time"] = sorting.Columns[i]["Colum_3"];
				if (sorting.Columns[i]["Colum_4"] != undefined) newCols["message"] = sorting.Columns[i]["Colum_4"];
				if (sorting.Columns[i]["Colum_5"] != undefined) newCols["source"] = sorting.Columns[i]["Colum_5"];
				if (sorting.Columns[i]["Colum_6"] != undefined) newCols["severity"] = sorting.Columns[i]["Colum_6"];
				if (sorting.Columns[i]["Colum_7"] != undefined) newCols["ack"] = sorting.Columns[i]["Colum_7"];
				if (sorting.Columns[i]["Colum_8"] != undefined) newCols["ack_time"] = sorting.Columns[i]["Colum_8"];
				if (sorting.Columns[i]["Colum_9"] != undefined) newCols["actor_id"] = sorting.Columns[i]["Colum_9"];
				if (sorting.Columns[i]["Colum_10"] != undefined) newCols["ack_comment"] = sorting.Columns[i]["Colum_10"];
				if (sorting.Columns[i]["Colum_14"] != undefined) newCols["active"] = sorting.Columns[i]["Colum_14"];
				if (sorting.Columns[i]["Colum_17"] != undefined) newCols["ack_required"] = sorting.Columns[i]["Colum_17"];
				if (sorting.Columns[i]["Colum_19"] != undefined) newCols["quality"] = sorting.Columns[i]["Colum_19"];
				if (sorting.Columns[i]["Colum_20"] != undefined) newCols["value"] = sorting.Columns[i]["Colum_20"];
				if (sorting.Columns[i]["Colum_21"] != undefined) newCols["kind"] = sorting.Columns[i]["Colum_21"];
				if (sorting.Columns[i]["Colum_22"] != undefined) newCols["prev_active_time"] = sorting.Columns[i]["Colum_22"];
				if (sorting.Columns[i]["Colum_23"] != undefined) newCols["group"] = sorting.Columns[i]["Colum_23"];
			}
			sorting.Columns = newCols;
		}
		//if (sorting.Version==2)...
		for (let i = 0; i < ColumnOper.length; i++)
		{
			var key = ColumnOper[i].Id;
			ColumnOper[i].SortingEnabled = sorting.Columns[key].SortingEnabled;
			ColumnHist[i].SortingEnabled = sorting.Columns[key].SortingEnabled;
			ColumnOper[i].SortPriority = sorting.Columns[key].SortPriority;
			ColumnHist[i].SortPriority = sorting.Columns[key].SortPriority;
			ColumnOper[i].SortOrder = sorting.Columns[key].SortOrder;
			ColumnHist[i].SortOrder = sorting.Columns[key].SortOrder;
		}
		
		// Применяем сортировку		
		Main_tables_Operative.Table_Operative_mode.ApplySort();
		Main_tables_Historical.Table_History_mode.ApplySort();
		CheckDefaultSorting();
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + sortingPath + ": " + error);
		SetDefaultSorting();
		result = false;
	}
}
else
	SetDefaultSorting();

return result;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var ColumnOper = [];
var ColumnHist = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
	{
		ColumnOper.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
		ColumnHist.push(Main_tables_Historical.Table_History_mode.Columns[i]);
	}

var table; // Указатель на таблицу
var tableColumns; // Массив столбцов

// Если таблица в оперативном режиме, то берем ее параметры, если нет - берем параметры исторической таблицы
if (ActiveMode == 0)
{
	tableColumns = ColumnOper;
	table = Main_tables_Operative.Table_Operative_mode;
}
else
{
	tableColumns = ColumnHist;
	table = Main_tables_Historical.Table_History_mode;
}

// Запись настроек ширины столбцов во временные переменные в случае, если они видны
for (let i = 0; i < tableColumns.length; i++)
{
	if (tableColumns[i].Width != 0)
		widthColumn[i] = tableColumns[i].Width;
}

var tableviewPath = File.CombinePath(ConfigurationPath, "tableview.json");
//log("Сохранение настроек вида таблицы в файл "  + tableviewPath);
try
{
	var tableView = {};
	tableView.Version = 2;
	tableView.Config = JSON.parse(userDataJson==""?"[]":userDataJson);
	tableView.Columns = {};
	for (let i = 0; i < tableColumns.length; i++)
	{
		var column = {};
		column.Title = tableColumns[i].Title;
		column.Width = widthColumn[i];
		column.Hidden = tableColumns[i].Hidden;
		column.WidthResizeMode = tableColumns[i].WidthResizeMode;
		column.Index = tableColumns[i].GetIndex();
		column.Font = tableColumns[i].Font;
		column.TitleFont = tableColumns[i].TitleFont;
		tableView.Columns[tableColumns[i].Id] = column;
	}
	// Записываем высоту строки и заголовка
	tableView.RowHeight = table.RowHeight;
	tableView.TitleHeight = table.HeaderHeight;

	File.WriteTextFile(tableviewPath, JSON.stringify(tableView, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + tableviewPath + ": " + error);
}

// Имеем отдельный файл с параметрами сортировки, хотя можно было бы сохранять эту инфрмацию в tableview.json

var sortingPath = File.CombinePath(ConfigurationPath, "sorting.json");
//log("Сохранение параметров сортировки в файл "  + sortingPath);
try
{
	var sorting = {};
	sorting.Version = 2;
	sorting.Columns = {};
	for (let i = 0; i < tableColumns.length; i++)
	{
		var column = {};
		column.SortingEnabled = tableColumns[i].SortingEnabled;
		column.SortPriority = tableColumns[i].SortPriority;
		column.SortOrder = tableColumns[i].SortOrder;
		sorting.Columns[tableColumns[i].Id] = column;
	}

	File.WriteTextFile(sortingPath, JSON.stringify(sorting, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + sortingPath + ": " + error);
}]]>
					</body>
				</do>
				<object access-modifier="private" name="ConfigSaveTimer" display-name="ConfigSaveTimer" uuid="f48e15bc-2d65-4e0f-b6a1-45cdf73d2933" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="4">
					<designed target="Period" value="500" ver="4"/>
					<designed target="Active" value="false" ver="4"/>
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
						<body kind="om">
							<![CDATA[Active = false;
SaveSettings();
viewChanged = false;]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="viewChanged" display-name="viewChanged" uuid="8a175ad3-b4a0-413f-b33f-3a3f3dd4344a" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
						<body kind="om">
							<![CDATA[if (Value)	
	ConfigSaveTimer.Active = true;]]>
						</body>
					</do-on>
				</object>
				<object access-modifier="private" name="widthColumn" display-name="widthColumn" uuid="ceb1a71e-77b7-4e45-93bf-7e2c46ee3a94" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4" cardinal="28"/>
				<object access-modifier="private" name="defaultSorting" display-name="defaultSorting" uuid="4e3cd402-0256-4576-aaea-131dca7e9c95" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
				<do access-modifier="private" name="SetDefaultView" display-name="SetDefaultView" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[// Ширина столбцов по умолчанию и их видимость
i:int4 = 0;
while(i < Main_tables_Operative.Table_Operative_mode.Columns.Length)
{
	id:string = Main_tables_Operative.Table_Operative_mode.Columns[i].Id;
	widthColumn[i] = DefaultColumnWidth(id);
	Main_tables_Operative.Table_Operative_mode.Columns[i].Width = widthColumn[i];
	Main_tables_Historical.Table_History_mode.Columns[i].Width = widthColumn[i];
	hidden:bool = ! DefaultColumnVisible(id);
	Main_tables_Operative.Table_Operative_mode.Columns[i].Hidden = hidden;
	Main_tables_Historical.Table_History_mode.Columns[i].Hidden = hidden;
	i=i+1;
}
]]>
					</body>
				</do>
				<do access-modifier="private" name="DefaultColumnWidth" display-name="DefaultColumnWidth" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[if (columnId == Static.Column_Time.Id) return 145;
if (columnId == Static.Column_ActiveTime.Id) return 145;
if (columnId == Static.Column_DeactiveTime.Id) return 145;
if (columnId == Static.Column_Message.Id) return 700;
if (columnId == Static.Column_AckTime.Id) return 130;
if (columnId == Static.Column_Group.Id) return 120;
return 100;]]>
					</body>
					<param access-modifier="private" name="columnId" display-name="" uuid="4e257a8b-2f5d-4aeb-8598-5460ff0435a5" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				</do>
				<do access-modifier="private" name="DefaultColumnVisible" display-name="DefaultColumnVisible" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="om">
						<![CDATA[//todo дублирование кода с загрузчиком конфиги из файла
if (columnId == Static.Column_Time.Id) return true;
if (columnId == Static.Column_Message.Id) return true;

return false;
]]>
					</body>
					<param access-modifier="private" name="columnId" display-name="" uuid="6f4ba8ec-a39e-4049-989b-6c0497bf8884" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				</do>
				<do access-modifier="private" name="CheckDefaultSorting" display-name="CheckDefaultSorting" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// Функция проверки сортировки по умолчанию 
// сначала по столбцу "Время генерации" - по убыванию, затем по столбцу "Время срабатывания" - по убыванию

var ColumnOper = [];
var ColumnHist = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
	{
		ColumnOper.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
		ColumnHist.push(Main_tables_Historical.Table_History_mode.Columns[i]);
	}

var columns; // Массив столбцов
var table; // Указатель на таблицу

//Если таблица в оперативном режиме, то берем ее параметры, если нет - берем параметры исторической таблицы
if (ActiveMode == 0)
{
	columns = ColumnOper;
	table = Main_tables_Operative.Table_Operative_mode;
}
else
{
	columns = ColumnHist;
	table = Main_tables_Historical.Table_History_mode;
}

// сортировкка по умолчанию
var c0 = Static.Column_Time.pos;
var c1 = Static.Column_ActiveTime.pos;
var defSet = columns[c0].SortingEnabled && columns[c0].SortOrder == 1 && columns[c0].SortPriority == 2 &&
	columns[c1].SortingEnabled && columns[c1].SortOrder == 1 && columns[c1].SortPriority == 1;

// проверяем, что нет другой сортировки
for (let i = 0; i < columns.length; i++)
	if (columns[i].SortingEnabled && i!=c0 && i!=c1)
		defSet = false;

defaultSorting.Value = defSet;]]>
					</body>
				</do>
				<do access-modifier="private" name="SetDefaultSorting" display-name="SetDefaultSorting" ver="5" type="" type-id="">
					<body kind="javascript">
						<![CDATA[var sortArray = [];
sortArray.push({'Id':'time', 'SortOrder':1, 'SortPriority':2});
sortArray.push({'Id':'active_time', 'SortOrder':1, 'SortPriority':1});
SetSorting(JSON.stringify(sortArray));]]>
					</body>
				</do>
				<do access-modifier="private" name="SetSorting" display-name="SetSorting" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[//Функция включения сортировки

//log(jsonData);
var inputObject = JSON.parse(jsonData);

var ColumnOper = [];
var ColumnHist = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
	{
		ColumnOper.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
		ColumnHist.push(Main_tables_Historical.Table_History_mode.Columns[i]);
	}

var columns; // Массив столбцов
var table; // Указатель на таблицу

//Если таблица в оперативном режиме, то берем ее параметры, если нет - берем параметры исторической таблицы
if (ActiveMode == 0)
{
	columns = ColumnOper;
	table = Main_tables_Operative.Table_Operative_mode;
}
else
{
	columns = ColumnHist;
	table = Main_tables_Historical.Table_History_mode;
}

// Сбрасываем текущую сортировку
for (let i = 0; i < columns.length; i++)
	columns[i].SortingEnabled = false;

//Применяем сортировку к активной таблице
for (let i = 0; i < inputObject.length; i++)
{
	var id = inputObject[i].Id;

	for (let j = 0; j < columns.length; j++)
	{
		if (columns[j].Id == id)
		{
			columns[j].SortPriority = inputObject[i].SortPriority;
			columns[j].SortOrder = inputObject[i].SortOrder;
			columns[j].SortingEnabled = true;
			break;
		}
	}
}
table.ApplySort();
CheckDefaultSorting();

viewChanged = true;]]>
					</body>
					<param access-modifier="private" name="jsonData" display-name="" uuid="d5c6f4aa-e68f-463c-a71f-644ca22ad8cd" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
				</do>
				<do access-modifier="private" name="SetTableParameters" display-name="SetTableParameters" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[var ColumnOper = [];
var ColumnHist = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
	{
		ColumnOper.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
		ColumnHist.push(Main_tables_Historical.Table_History_mode.Columns[i]);
	}

//Импорт параметров между таблицами
if (ActiveMode == 0)
{
	for (let i = 0; i < ColumnOper.length; i++)
		ColumnOper[i].SortingEnabled = false;

	for (let i = 0; i < ColumnOper.length; i++)
	{
		ColumnOper[i].WidthResizeMode = ColumnHist[i].WidthResizeMode;
		ColumnOper[i].Width = widthColumn[i];
		ColumnOper[i].SortingEnabled = ColumnHist[i].SortingEnabled;
		ColumnOper[i].SortOrder = ColumnHist[i].SortOrder;
		ColumnOper[i].SortPriority = ColumnHist[i].SortPriority;
	}
	Main_tables_Operative.Table_Operative_mode.ApplySort();
}
else
{
	for (let i = 0; i < ColumnHist.length; i++)
		ColumnHist[i].SortingEnabled = false;

	for (let i = 0; i < ColumnHist.length; i++)
	{
		ColumnHist[i].WidthResizeMode = ColumnOper[i].WidthResizeMode;
		ColumnHist[i].Width = widthColumn[i];
		ColumnHist[i].SortingEnabled = ColumnOper[i].SortingEnabled;
		ColumnHist[i].SortOrder = ColumnOper[i].SortOrder;
		ColumnHist[i].SortPriority = ColumnOper[i].SortPriority;
	}
	Main_tables_Historical.Table_History_mode.ApplySort();
}
]]>
					</body>
				</do>
				<do access-modifier="private" name="SwitchSorting" display-name="SwitchSorting" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[if (EnableSortingOnGridHeader.Value == false) return;

//Если таблица в оперативном режиме, то берем ее параметры, если нет - берем параметры исторической таблицы
var columns = []; // Массив столбцов
if (ActiveMode == 0)
{
	for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
		if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
			columns.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
}
else
{
	for (let i = 0; i < Main_tables_Historical.Table_History_mode.Columns.Length; i++)
		if (Main_tables_Historical.Table_History_mode.Columns[i].Title != "-")//cheat1
			columns.push(Main_tables_Historical.Table_History_mode.Columns[i]);
}

// считываем сортировку с упорядочиванием приоритетов
var sortArray = [];
for (let i = 0; i < columns.length; i++)
	if (columns[i].Id != ColumnId && columns[i].SortingEnabled)// в любом случае требуется изымать столбец из списка приоритетов, что проще делать при считывании
	{
		var p = columns[i].SortPriority;
		sortArray[p] = {};
		sortArray[p].Id = columns[i].Id;
		sortArray[p].SortOrder = columns[i].SortOrder;
		sortArray[p].SortPriority = columns[i].SortPriority;
	}

// убираем пустые
if (sortArray.length>0)
	for (let i = sortArray.length-1; i>=0; i--)
		if (sortArray[i] == null)
			sortArray.splice(i, 1);

// добавляем новую сортировку
if (SortingEnabled==false)
{
	var sortItem = {};
	sortItem.Id = ColumnId;
	sortItem.SortOrder = 0;
	sortArray.splice(0,0,sortItem);
}
else if (SortOrder == 0)
{
	var sortItem = {};
	sortItem.Id = ColumnId;
	sortItem.SortOrder = 1;
	sortArray.splice(0,0,sortItem);
}

// переставляем приоритеты
for (let i = 0; i < sortArray.length; i++)
	sortArray[i].SortPriority = i+1;

// задаём новую сортировку
SetSorting(JSON.stringify(sortArray));]]>
					</body>
					<param access-modifier="private" name="ColumnId" display-name="" uuid="5b10fb8c-5226-4f8c-9d5d-3867088f89e7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
					<param access-modifier="private" name="SortingEnabled" display-name="" uuid="044bc904-8b91-4aca-b44b-fab7ef6d7fc0" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
					<param access-modifier="private" name="SortOrder" display-name="" uuid="b2ec1272-e771-413b-b6ab-f94853acbf03" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="4"/>
				</do>
				<object access-modifier="private" name="Static" display-name="Static" uuid="c4aa46e2-a70f-4620-b191-f0ba25749d76" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
					<designed target="X" value="0" ver="5"/>
					<designed target="Y" value="0" ver="5"/>
					<designed target="ZValue" value="0" ver="5"/>
					<designed target="Rotation" value="0" ver="5"/>
					<designed target="Scale" value="1" ver="5"/>
					<designed target="Visible" value="true" ver="5"/>
					<designed target="Opacity" value="1" ver="5"/>
					<designed target="Enabled" value="true" ver="5"/>
					<designed target="Tooltip" value="" ver="5"/>
					<object access-modifier="private" name="Column_Condition" display-name="Column_Condition" uuid="67e62b95-7f82-4294-b226-05b79b3f5adf" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="507a1a11-6b7b-4cda-baf8-7295efb2ec10" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="730ca212-f3e9-4830-a997-60a6a81e80c0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="condition_name"/>
					</object>
					<object access-modifier="private" name="Column_Subcondition" display-name="Column_Subcondition" uuid="3f79521b-1274-4d71-af7f-069a91f7d3be" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="8e99b62a-3987-421c-aaaf-e3dd2bec35b0" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="d6853bb2-f461-4c3d-ad96-3db1db669aac" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="subcondition_name"/>
					</object>
					<object access-modifier="private" name="Column_Cookie" display-name="Column_Cookie" uuid="3088ee5c-deea-4513-bae2-73206f19f029" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="7ea289ea-115f-4d27-930f-40bd9a0909f7" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="97454f5a-c7bd-4704-8c3c-1bd729515af6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="cookie"/>
					</object>
					<object access-modifier="private" name="Column_ObjectId" display-name="Column_ObjectId" uuid="78cdaa0c-5597-40b7-8040-32b3f7ab9b1b" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="0d9d4131-2c37-4ec3-9330-6496c64c155c" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="8543df25-4eb8-4ab0-87cb-b5e97d637ea7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="object_id"/>
					</object>
					<object access-modifier="private" name="Column_SystemSource" display-name="Column_SystemSource" uuid="3ac4cdc3-a3c4-4b02-bd65-fa003645c524" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="e8516af5-5b23-4c1c-a0be-0000687874e4" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="f8373768-7ba8-41e1-957a-679c36c52484" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="source"/>
					</object>
					<object access-modifier="private" name="Column_Time" display-name="Column_Time" uuid="ccc09005-249a-4d53-875b-bf301d08a1a2" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="0c85c08b-9bc0-4055-ad06-b8046391c31a" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="76391a0f-c86c-4692-b9db-43a6cb8750a9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="time"/>
					</object>
					<object access-modifier="private" name="Column_ActiveTime" display-name="Column_ActiveTime" uuid="e54ad7cb-4057-4aba-8f5c-fc2530ec5447" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="626d6646-2c8c-487f-af52-da22809abf18" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="179b0f10-1eb0-4e62-b590-71a5a4bb5ba4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="active_time"/>
					</object>
					<object access-modifier="private" name="Column_DeactiveTime" display-name="Column_DeactiveTime" uuid="7362c1be-ee3a-488d-999a-fb97a961ffec" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="f110074f-a560-47c9-9c6a-c991c51fb10c" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="09d96e12-915a-4b89-8c69-a2b8c5cf9921" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="deactive_time"/>
					</object>
					<object access-modifier="private" name="Column_Message" display-name="Column_Message" uuid="934f1bb6-ebc0-4b1c-b6e5-ad7d528ff894" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="9794ea75-f460-4fbc-8ada-ec2cb970dfe7" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="53c5357d-f86f-4191-8a70-bd1de37c2fc8" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="message"/>
					</object>
					<object access-modifier="private" name="Column_Source" display-name="Column_Source" uuid="c3717842-fc18-4a44-b6da-d2fa74f58b05" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="3f4ab972-dacc-4fc5-848f-dd22da2beddf" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="0a62634f-2fad-4068-a7cb-fc92af12cde2" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="source"/>
						<do-trace access-modifier="private" target="Id" ver="5">
							<body>
								<![CDATA[ShowRelativeTag?"area_path":"source"]]>
							</body>
						</do-trace>
					</object>
					<object access-modifier="private" name="Column_Severity" display-name="Column_Severity" uuid="f68741fb-494f-4ab8-a221-d69c2e20d5f0" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="90e24b2d-dc8c-4831-a363-7a67564bf8f6" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="210ad11e-5088-4806-8393-f104fd0c42fd" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="severity"/>
					</object>
					<object access-modifier="private" name="Column_Ack" display-name="Column_Ack" uuid="8a7d21cb-9af4-47a6-841e-0d25216fd499" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="5ed6a7ca-6752-4c62-9968-2333335530cd" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="b819d1de-cb41-400b-877f-cc510c802e8d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="ack"/>
					</object>
					<object access-modifier="private" name="Column_AckTime" display-name="Column_AckTime" uuid="9d5ae29a-0796-417b-9aff-39705aac4958" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="9647579c-deac-44bf-a304-5c7d2e820f63" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="04bc3997-4b94-4e10-844f-c7711bad9ddb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="ack_time"/>
					</object>
					<object access-modifier="private" name="Column_Actor" display-name="Column_Actor" uuid="039d70eb-690a-4a58-a68f-312671930308" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="77a0bd97-4b20-465a-8af5-f38ff9987ee0" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="ae4129cb-ec10-494c-8049-532699b23e9e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="actor_id"/>
					</object>
					<object access-modifier="private" name="Column_Comment" display-name="Column_Comment" uuid="64192209-2825-4d59-9f65-e2f907c02f8b" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="b07117ec-1acf-4318-94f0-1599fbdaa021" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="5a9627c7-50c2-4521-a729-b3b666a0922c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="ack_comment"/>
					</object>
					<object access-modifier="private" name="Column_Active" display-name="Column_Active" uuid="fb9ae19e-999c-4f4d-8707-e1a1f31430e7" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="8e43a8ed-0053-4c94-8b94-a548b6fb6f57" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="002f9418-e7ed-44cd-9e24-8697727344b4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="active"/>
					</object>
					<object access-modifier="private" name="Column_AckRequired" display-name="Column_AckRequired" uuid="12732b4c-8415-499b-a19d-b45a688b620c" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="bbe88a68-95f4-400e-afee-892e45ecc8b3" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="936ab0f3-8a53-4643-86fc-0b24ec17db02" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="ack_required"/>
					</object>
					<object access-modifier="private" name="Column_Quality" display-name="Column_Quality" uuid="87fbbb2a-3d28-4ceb-a721-ea698d917f79" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="d64c3303-7eb5-4c7f-b8a8-a9fb148a9658" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="6f3227a9-b2b4-419b-9bad-be5aa4ad7ecb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="quality"/>
					</object>
					<object access-modifier="private" name="Column_Value" display-name="Column_Value" uuid="78c8a2cc-d18e-47c7-8ab9-15c82c1baba2" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="9f01c942-5d58-45f6-be61-ae7cbba35129" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="5ecf6f1b-b455-4c85-a72d-7e8aeb894438" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="value"/>
					</object>
					<object access-modifier="private" name="Column_Group" display-name="Column_Group" uuid="103f0919-ecad-44d9-9fd3-cde69b31a7d2" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
						<designed target="X" value="0" ver="5"/>
						<designed target="Y" value="0" ver="5"/>
						<designed target="ZValue" value="0" ver="5"/>
						<designed target="Rotation" value="0" ver="5"/>
						<designed target="Scale" value="1" ver="5"/>
						<designed target="Visible" value="false" ver="5"/>
						<designed target="Opacity" value="1" ver="5"/>
						<designed target="Enabled" value="true" ver="5"/>
						<designed target="Tooltip" value="" ver="5"/>
						<object access-modifier="private" name="pos" display-name="pos" uuid="40e82e65-d08a-4936-bcff-be959cf8e761" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
						<object access-modifier="private" name="Id" display-name="Id" uuid="abddcee1-3279-405d-8a22-ffd7b7adc4bf" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
						<do access-modifier="private" name="GetIndex" display-name="GetIndex" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].GetIndex();]]>
							</body>
						</do>
						<do access-modifier="private" name="GetTitle" display-name="GetTitle" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
							<body kind="om">
								<![CDATA[return Main_tables_Operative.Table_Operative_mode.Columns[pos].Title;]]>
							</body>
						</do>
						<init target="Id" ver="5" value="group"/>
					</object>
				</object>
				<do access-modifier="private" name="SetColumnsCfg" display-name="SetColumnsCfg" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[userDataJson = userJson;

var columns = [];
function AddCol(id,title,sortmode,vtable,mtype,custom)
{
	var col = {};
	col.Id = id;
	col.Title = title;//def
	col.SortMode = sortmode;
	col.VisibleInTable = vtable;
	col.ModelType = mtype;
	col.ItsCustom = custom;
	columns.push(col);
}

//visible columns 15
AddCol(Static.Column_Time.Id,"Время генерации",0,true,"timestamp", false);//Colum_1
AddCol(Static.Column_ActiveTime.Id,"Время срабатывания",0,true,"timestamp", false);//Colum_2
AddCol(Static.Column_DeactiveTime.Id,"Время деактивации",0,true,"timestamp", false);//Colum_3
AddCol(Static.Column_Message.Id,"Сообщение",0,true,"string", false);//Colum_4
AddCol(Static.Column_Source.Id,"Источник события",0,true,"string", false);//Colum_5
AddCol(Static.Column_Severity.Id,"Важность",0,true,"int4", false);//Colum_6
AddCol(Static.Column_Ack.Id,"Квитировано",1,true,"bool", false);//Colum_7
AddCol(Static.Column_AckTime.Id,"Время квитирования",0,true,"timestamp", false);//Colum_8
AddCol(Static.Column_Actor.Id,"Пользователь",0,true,"string", false);//Colum_9
AddCol(Static.Column_Comment.Id,"Комментарий",0,true,"string", false);//Colum_10
AddCol(Static.Column_Active.Id,"Активность",1,true,"bool", false);//Colum_14
AddCol(Static.Column_AckRequired.Id,"Квитировать",1,true,"bool", false);//Colum_17
AddCol(Static.Column_Quality.Id,"Качество сигнала",0,true,"int4", false);//Colum_19
AddCol(Static.Column_Value.Id,"Значение сигнала",0,true,"variant", false);//Colum_20
AddCol(Static.Column_Group.Id,"Группа важности",1,true,"string", false);//Colum_23

//user columns
if (userDataJson=="") userDataJson="[]";
var extObj = JSON.parse(userDataJson);
for (let i = 0; i < extObj.length; i++)
	columns.push(extObj[i]);

//system columns 6
AddCol(Static.Column_Condition.Id,"Условие",0,false,"string", false);//Colum_11_not_show
AddCol(Static.Column_Subcondition.Id,"Подусловие",0,false,"string", false);//Colum_12_not_show
//AddCol(Static.Column_Quality.Id,"Качество",0,false,"int4", false);//Colum_13_not_show //пока столбец обязателен среди видимых, в системных он не нужен
AddCol(Static.Column_Cookie.Id,"Куки",0,false,"variant", false);//Colum_15_not_show
AddCol("sound","Звуки",0,false,"string", false);//Colum_16_not_show
AddCol(Static.Column_ObjectId.Id,"Идентификатор объекта на сервере Alpha.Server",0,false,"variant", false);//Colum_18_not_show
AddCol(Static.Column_SystemSource.Id,"Источник события",0,false,"string", false);//Colum_source_not_show

var CustomAttributes = [];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (i < columns.length)
	{
		Main_tables_Operative.Table_Operative_mode.Columns[i].Id = columns[i].Id;
		Main_tables_Historical.Table_History_mode.Columns[i].Id = columns[i].Id;
		Main_tables_Operative.Table_Operative_mode.Columns[i].SortMode = columns[i].SortMode;
		Main_tables_Historical.Table_History_mode.Columns[i].SortMode = columns[i].SortMode;
		modelType[i] = columns[i].ModelType;//модельный тип берём из конфигурации
		idCache[i] = columns[i].Id;
		systemFlag[i] = (columns[i].VisibleInTable == false);
		userFlag[i] = columns[i].ItsCustom;
		if (userFlag[i])
			CustomAttributes.push({'id':idCache[i],'column':idCache[i],'description':columns[i].Title,'type':modelType[i]});
		
		if (columns[i].VisibleInTable == true)
		{//заполняем только для отображаемых столбцов
			Main_tables_Operative.Table_Operative_mode.Columns[i].Title = columns[i].Title;
			Main_tables_Historical.Table_History_mode.Columns[i].Title = columns[i].Title;
			Main_tables_Operative.Table_Operative_mode.Columns[i].Description = columns[i].Title;
			Main_tables_Historical.Table_History_mode.Columns[i].Description = columns[i].Title;
		}
		else
		{//системные столбцы имеют пустое описание - это чит
			Main_tables_Operative.Table_Operative_mode.Columns[i].Title = "-";//cheat1//нельзя оставлять пустой заголовок - таблицы его заполнят из провайдера!
			Main_tables_Historical.Table_History_mode.Columns[i].Title = "-";//cheat1
			Main_tables_Operative.Table_Operative_mode.Columns[i].Description = "";
			Main_tables_Historical.Table_History_mode.Columns[i].Description = "";
			Main_tables_Operative.Table_Operative_mode.Columns[i].Hidden = true;
			Main_tables_Historical.Table_History_mode.Columns[i].Hidden = true;
		}
		//cache system
		if (columns[i].Id == Static.Column_Condition.Id) Static.Column_Condition.pos = i;
		if (columns[i].Id == Static.Column_Subcondition.Id) Static.Column_Subcondition.pos = i;
		if (columns[i].Id == Static.Column_Cookie.Id) Static.Column_Cookie.pos = i;
		if (columns[i].Id == Static.Column_ObjectId.Id) Static.Column_ObjectId.pos = i;
		if (columns[i].Id == Static.Column_SystemSource.Id && columns[i].VisibleInTable == false) Static.Column_SystemSource.pos = i;

		//cache visible
		if (columns[i].Id == Static.Column_Time.Id) Static.Column_Time.pos = i;
		if (columns[i].Id == Static.Column_ActiveTime.Id) Static.Column_ActiveTime.pos = i;
		if (columns[i].Id == Static.Column_DeactiveTime.Id) Static.Column_DeactiveTime.pos = i;
		if (columns[i].Id == Static.Column_Message.Id) Static.Column_Message.pos = i;
		if (columns[i].Id == Static.Column_Source.Id && columns[i].VisibleInTable == true) Static.Column_Source.pos = i;
		if (columns[i].Id == Static.Column_Severity.Id) Static.Column_Severity.pos = i;
		if (columns[i].Id == Static.Column_Ack.Id) Static.Column_Ack.pos = i;
		if (columns[i].Id == Static.Column_AckTime.Id) Static.Column_AckTime.pos = i;
		if (columns[i].Id == Static.Column_Actor.Id) Static.Column_Actor.pos = i;
		if (columns[i].Id == Static.Column_Comment.Id) Static.Column_Comment.pos = i;
		if (columns[i].Id == Static.Column_Active.Id) Static.Column_Active.pos = i;
		if (columns[i].Id == Static.Column_AckRequired.Id) Static.Column_AckRequired.pos = i;
		if (columns[i].Id == Static.Column_Quality.Id) Static.Column_Quality.pos = i;
		if (columns[i].Id == Static.Column_Value.Id) Static.Column_Value.pos = i;
		if (columns[i].Id == Static.Column_Group.Id) Static.Column_Group.pos = i;
	}
	else
	{
		Main_tables_Operative.Table_Operative_mode.Columns[i].Id = "";
		Main_tables_Historical.Table_History_mode.Columns[i].Id = "";
		Main_tables_Operative.Table_Operative_mode.Columns[i].Title = "-";//cheat1
		Main_tables_Historical.Table_History_mode.Columns[i].Title = "-";//cheat1
		Main_tables_Operative.Table_Operative_mode.Columns[i].Description = "";
		Main_tables_Historical.Table_History_mode.Columns[i].Description = "";
		Main_tables_Operative.Table_Operative_mode.Columns[i].Hidden = true;
		Main_tables_Historical.Table_History_mode.Columns[i].Hidden = true;
	}
//настраиваем атрибуты в провайдерах
//var customAttrsStr = JSON.stringify(CustomAttributes); //24212 ещё не влито
//Main_tables_Operative.TableModel_1.ApAlarmQuery_1.CustomAttributes = customAttrsStr;
//Main_tables_Historical.TableModel_1.ApAlarmQuery_1.CustomAttributes = customAttrsStr;
//перезапускаем
Main_tables_Operative.TableModel_1.ApAlarmQuery_1.ReloadSmart(true,false);]]>
					</body>
					<param access-modifier="private" name="userJson" display-name="" uuid="0644b971-731d-4687-8758-d1b2de29e24e" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				</do>
				<do access-modifier="private" name="GetColPos" display-name="GetColPos" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
					<body kind="om">
						<![CDATA[//это чисто VUшная функция. отвечать на системные id здесь не требуется
i: int4 = 0;
while (i < idCache.Length)
{
	if (idCache[i]==id && systemFlag[i]==false/*исключаем попадение в системный столбец*/) return i;
	i +=1;
}
//todo вообще, если до сюдова дошли - это ошибка
return 0;]]>
					</body>
					<param access-modifier="private" name="id" display-name="" uuid="c8bafa6c-a532-461a-a4dc-92283a9143bd" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				</do>
				<object access-modifier="private" name="modelType" display-name="modelType" uuid="2bc71a95-c5ca-451a-b6e1-3953d837413d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="28"/>
				<object access-modifier="private" name="userFlag" display-name="userFlag" uuid="40174bb0-0565-4895-bd27-bed23f4fe5ba" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="28"/>
				<object access-modifier="private" name="idCache" display-name="idCache" uuid="3130cd73-1be8-4c98-881d-56e455af72ad" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="28"/>
				<object access-modifier="private" name="systemFlag" display-name="systemFlag" uuid="776c75f6-d372-4f9c-b508-51790a2e8dac" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="28"/>
				<object access-modifier="private" name="userDataJson" display-name="userDataJson" uuid="fd411c4f-558c-4eb1-809c-e5e3ade66380" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			</object>
			<object access-modifier="private" name="SeverityGroups" display-name="SeverityGroups" uuid="661e8184-4819-4658-a4b3-5a2cc8e5da13" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="-10" ver="3"/>
				<designed target="Y" value="-10" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="1" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="4"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "severitygroups.json");
if (File.Exists(filePath))
{
	//log("Загрузка настроек групп важности из файла "  + filePath);
	try
	{
		var json = File.ReadTextFile(filePath);
		var severitygroups = JSON.parse(json);
		
		Main_tables_Operative.ApAlarmQueue_1.JsonFilter = severitygroups.ApAlarmQueue_1.Severity;
		Main_tables_Operative.ApAlarmQueue_2.JsonFilter = severitygroups.ApAlarmQueue_2.Severity;
		Main_tables_Operative.ApAlarmQueue_3.JsonFilter = severitygroups.ApAlarmQueue_3.Severity;
		Main_tables_Operative.ApAlarmQueue_4.JsonFilter = severitygroups.ApAlarmQueue_4.Severity;
		
		Main_tables_Operative.ApAlarmQueue_1.severityArray = GapToArray(SeverityJSONtoString(severitygroups.ApAlarmQueue_1.Severity));
		Main_tables_Operative.ApAlarmQueue_2.severityArray = GapToArray(SeverityJSONtoString(severitygroups.ApAlarmQueue_2.Severity));
		Main_tables_Operative.ApAlarmQueue_3.severityArray = GapToArray(SeverityJSONtoString(severitygroups.ApAlarmQueue_3.Severity));
		Main_tables_Operative.ApAlarmQueue_4.severityArray = GapToArray(SeverityJSONtoString(severitygroups.ApAlarmQueue_4.Severity));
	
		Range1.SoundEnable = severitygroups.ApAlarmQueue_1.SoundEnabled;
		Range1.nSoundRepeats = severitygroups.ApAlarmQueue_1.SoundRepeats;
		Range1.SoundPriority = severitygroups.ApAlarmQueue_1.SoundPriority;
		
		Range2.SoundEnable = severitygroups.ApAlarmQueue_2.SoundEnabled;
		Range2.nSoundRepeats = severitygroups.ApAlarmQueue_2.SoundRepeats;
		Range2.SoundPriority = severitygroups.ApAlarmQueue_2.SoundPriority;
		
		Range3.SoundEnable = severitygroups.ApAlarmQueue_3.SoundEnabled;
		Range3.nSoundRepeats = severitygroups.ApAlarmQueue_3.SoundRepeats;
		Range3.SoundPriority = severitygroups.ApAlarmQueue_3.SoundPriority;
		
		Range4.tempSoundEnable = severitygroups.ApAlarmQueue_4.SoundEnabled;
		Range4.nSoundRepeats = severitygroups.ApAlarmQueue_4.SoundRepeats;
		Range4.SoundPriority = severitygroups.ApAlarmQueue_4.SoundPriority;
		
		NotAckOtherEvents.Value = NotAckOtherEvents.Value;
		
		Main_tables_Operative.TableModel_1.ApAlarmQuery_1.ReloadSmart(true, true);
	}
	catch(error)
	{		
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "severitygroups.json");
//log("Сохранение настроек групп важностей в файл "  + filePath);
try
{
	var severitygroups = {};
	
	severitygroups.ApAlarmQueue_1 = {};
	severitygroups.ApAlarmQueue_1.Severity = Main_tables_Operative.ApAlarmQueue_1.JsonFilter;
	severitygroups.ApAlarmQueue_1.SoundEnabled = Range1.SoundEnable;
	severitygroups.ApAlarmQueue_1.SoundRepeats = Range1.nSoundRepeats;
	severitygroups.ApAlarmQueue_1.SoundPriority = Range1.SoundPriority;
	
	severitygroups.ApAlarmQueue_2 = {};
	severitygroups.ApAlarmQueue_2.Severity = Main_tables_Operative.ApAlarmQueue_2.JsonFilter;
	severitygroups.ApAlarmQueue_2.SoundEnabled = Range2.SoundEnable;
	severitygroups.ApAlarmQueue_2.SoundRepeats = Range2.nSoundRepeats;
	severitygroups.ApAlarmQueue_2.SoundPriority = Range2.SoundPriority;
	
	severitygroups.ApAlarmQueue_3 = {};
	severitygroups.ApAlarmQueue_3.Severity = Main_tables_Operative.ApAlarmQueue_3.JsonFilter;
	severitygroups.ApAlarmQueue_3.SoundEnabled = Range3.SoundEnable;
	severitygroups.ApAlarmQueue_3.SoundRepeats = Range3.nSoundRepeats;
	severitygroups.ApAlarmQueue_3.SoundPriority = Range3.SoundPriority;
	
	severitygroups.ApAlarmQueue_4 = {};
	severitygroups.ApAlarmQueue_4.Severity = Main_tables_Operative.ApAlarmQueue_4.JsonFilter;
	severitygroups.ApAlarmQueue_4.SoundEnabled = Range4.tempSoundEnable;
	severitygroups.ApAlarmQueue_4.SoundRepeats = Range4.nSoundRepeats;
	severitygroups.ApAlarmQueue_4.SoundPriority = Range4.SoundPriority;
	
	File.WriteTextFile(filePath, JSON.stringify(severitygroups, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}
]]>
					</body>
				</do>
				<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="" type-id="">
					<body kind="om">
						<![CDATA[// значения по умолчанию
Range1.SoundEnable = true;
Range1.nSoundRepeats = 0;
Range1.SoundPriority = 0;

Range2.SoundEnable = true;
Range2.nSoundRepeats = 3;
Range2.SoundPriority = 0;

Range3.SoundEnable = true;
Range3.nSoundRepeats = 1;
Range3.SoundPriority = 0;

Range4.SoundEnable = true;
Range4.tempSoundEnable = true;
Range4.nSoundRepeats = 1;
Range4.SoundPriority = 0;]]>
					</body>
				</do>
				<object access-modifier="private" name="Range1" display-name="Range1" uuid="293afc1e-cb10-4361-88d0-8dda37bc3e24" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
					<designed target="X" value="-21" ver="2"/>
					<designed target="Y" value="33" ver="2"/>
					<designed target="Rotation" value="0" ver="2"/>
					<designed target="Scale" value="1" ver="2"/>
					<designed target="Visible" value="false" ver="2"/>
					<designed target="Enabled" value="true" ver="2"/>
					<designed target="Tooltip" value="" ver="2"/>
					<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="2d6c2d25-ab7a-4f7c-9016-4399208c5818" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="5f5e0966-834a-4efa-97dd-45dc07217786" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
					<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="b0cf834f-0c84-4d01-aa0c-0845768bad83" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="4bb5244a-f232-483e-aa20-2c35213daaad" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<designed target="ZValue" value="0" ver="3"/>
					<designed target="Opacity" value="1" ver="3"/>
				</object>
				<object access-modifier="private" name="Range2" display-name="Range2" uuid="1b185564-eb64-4661-8ca1-f780162c99f0" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
					<designed target="X" value="-1" ver="2"/>
					<designed target="Y" value="53" ver="2"/>
					<designed target="Rotation" value="0" ver="2"/>
					<designed target="Scale" value="1" ver="2"/>
					<designed target="Visible" value="false" ver="2"/>
					<designed target="Enabled" value="true" ver="2"/>
					<designed target="Tooltip" value="" ver="2"/>
					<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="fd9570aa-a22f-42a3-aeea-a3ff0263d785" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="66bd472d-7108-4613-b08f-37e147b71a19" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
					<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="245f8ab2-8052-470b-91b2-08fcb9e40c3d" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="cba0d938-368a-48cf-a9b7-2ed36f95dedc" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<designed target="ZValue" value="0" ver="3"/>
					<designed target="Opacity" value="1" ver="3"/>
				</object>
				<object access-modifier="private" name="Range3" display-name="Range3" uuid="a7363b5b-c8ec-4d6c-9c95-a0117449162e" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
					<designed target="X" value="19" ver="2"/>
					<designed target="Y" value="73" ver="2"/>
					<designed target="Rotation" value="0" ver="2"/>
					<designed target="Scale" value="1" ver="2"/>
					<designed target="Visible" value="false" ver="2"/>
					<designed target="Enabled" value="true" ver="2"/>
					<designed target="Tooltip" value="" ver="2"/>
					<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="946a045a-221f-4571-997d-83f5c69b7b5f" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="2a9177ca-f991-49a1-82d9-7436b28004cf" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
					<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="292a3931-8e26-4057-8975-45ccbcba47b0" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="722f51ba-7c7b-4d25-a79b-142e39c62597" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<designed target="ZValue" value="0" ver="3"/>
					<designed target="Opacity" value="1" ver="3"/>
				</object>
				<object access-modifier="private" name="Range4" display-name="Range4" uuid="e2fb315a-65b4-4119-ac9f-c29e44a4d1f5" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="2">
					<designed target="X" value="39" ver="2"/>
					<designed target="Y" value="93" ver="2"/>
					<designed target="Rotation" value="0" ver="2"/>
					<designed target="Scale" value="1" ver="2"/>
					<designed target="Visible" value="false" ver="2"/>
					<designed target="Enabled" value="true" ver="2"/>
					<designed target="Tooltip" value="" ver="2"/>
					<object access-modifier="private" name="SoundPriority" display-name="SoundPriority" uuid="0ad1e1bf-a115-40e6-b669-68e393ef27d4" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="SoundEnable" display-name="SoundEnable" uuid="4eb13e3c-8722-45f7-be6a-c23310df274d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
					<object access-modifier="private" name="tempSoundEnable" display-name="tempSoundEnable" uuid="afe37938-9f7e-4574-ac6b-e6245a6f488d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
					<object access-modifier="private" name="nSoundRepeats" display-name="nSoundRepeats" uuid="9582d660-0467-4d8b-9444-cd041a66568d" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<object access-modifier="private" name="PriorityCount" display-name="PriorityCount" uuid="db5e63b1-1679-460b-bd7b-fc56c257f69f" base-type="int2" base-type-id="3534bee3-61d3-4ad6-ac4f-9ad442cb71cf" ver="2"/>
					<designed target="ZValue" value="0" ver="3"/>
					<designed target="Opacity" value="1" ver="3"/>
				</object>
			</object>
			<object access-modifier="private" name="ObjectDescription" display-name="ObjectDescription" uuid="b3cfe0ec-a1fc-4d5d-b14b-27d855ee32c0" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="4">
				<designed target="X" value="0" ver="4"/>
				<designed target="Y" value="0" ver="4"/>
				<designed target="ZValue" value="0" ver="4"/>
				<designed target="Rotation" value="0" ver="4"/>
				<designed target="Scale" value="1" ver="4"/>
				<designed target="Visible" value="false" ver="4"/>
				<designed target="Opacity" value="1" ver="4"/>
				<designed target="Enabled" value="true" ver="4"/>
				<designed target="Tooltip" value="" ver="4"/>
				<do access-modifier="private" name="ObjectDescriptionDecorating" display-name="ObjectDescriptionDecorating" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[//это заглушка под функцию ГПА
return "";]]>
					</body>
				</do>
			</object>
			<do access-modifier="private" name="ValidatePath" display-name="ValidatePath" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" form-by-id="true">
				<body kind="javascript">
					<![CDATA[filePath = filePath.trim();
if (filePath == "")
	return "Путь не может быть пустым";

var regex;
if (File.Exists("/opt/")) // проект запущен на ОС Linux?
	regex = /^\/.+[^\/]\/?$/;
else regex = /^[a-z]:\\([^<>:"\/\\|?*]+\\?)*$/i;

var error = (regex.test(filePath)) ? "" : "Неверный формат пути";
//log("ValidatePath '" + filePath + "' - " + error);
return error;]]>
				</body>
				<param access-modifier="private" name="filePath" display-name="" uuid="54e95c6d-3c81-4560-b1b9-7c6424b55827" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			</do>
			<object access-modifier="private" name="EventParams" display-name="EventParams" uuid="07b6b86e-0b1c-4db1-aac2-1061ca1ecd6d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4" cardinal="7"/>
			<do access-modifier="private" name="OpenContextMenu" display-name="OpenContextMenu" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[Action_OpenContextMenu.left = left;
Action_OpenContextMenu.top = top;
Action_OpenContextMenu.Invoke();
//DebugTool_1.Log("left: " + String.ToString(Action_OpenContextMenu.left) + ", top: " + String.ToString(Action_OpenContextMenu.top));]]>
				</body>
				<param access-modifier="private" name="left" display-name="" uuid="a725d45e-0ee0-404b-8b64-8c1c6388ece9" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
				<param access-modifier="private" name="top" display-name="" uuid="f9b3df5e-da95-4cd4-aec7-8b9e60666ee7" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
			</do>
			<do access-modifier="private" name="OpenColumnsMenu" display-name="OpenColumnsMenu" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[if (GUIModificationAvailable)
{
	Action_OpenColumnsMenu.left = left;
	Action_OpenColumnsMenu.top = top;
	Action_OpenColumnsMenu.Invoke();
	//DebugTool_1.Log("left: " + String.ToString(Action_OpenColumnsMenu.left) + ", top: " + String.ToString(Action_OpenColumnsMenu.top));
}]]>
				</body>
				<param access-modifier="private" name="left" display-name="" uuid="649254f9-1901-43f0-a7bd-b0c0c7f78ba9" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
				<param access-modifier="private" name="top" display-name="" uuid="162648c0-72d1-4c96-95b1-18e7f9c3ee05" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
			</do>
			<object access-modifier="private" name="ConfigurationPath" display-name="ConfigurationPath" uuid="17d700d4-177b-45bb-83ad-bef9f4b79079" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<object access-modifier="private" name="PresetFilters" display-name="PresetFilters" uuid="38bf4757-5d03-4715-8b01-e727c15a33dd" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="3">
				<designed target="X" value="10.5" ver="3"/>
				<designed target="Y" value="10.5" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="1" ver="3"/>
				<designed target="Visible" value="false" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Opacity" value="1" ver="4"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "presetfilters.json");
if (File.Exists(filePath))
{
	try
	{
		var columns = JSON.parse(ViewFilter.GetColumns());
		//reset old settings
		for (let i = 0; i < used.Length; i++) used[i] = false;
		//load new settings
		var obj = JSON.parse(File.ReadTextFile(filePath));
		var filters = [];
		if (obj.Version == undefined)
		{
			filters = obj;
			mode = 0;
		}
		else if (obj.Version == 1)
		{
			filters = obj.Filters;
			mode = obj.Mode;
		}
		
		for (let i = 0; i < filters.length; i++)
			if (i < name.Length)
			{
				name[i] = filters[i].name;
				used[i] = filters[i].used;
				
				var f = {};
				for (let c = 0; c < columns.length; c++)
					f[columns[c]/*id*/] = filters[i][columns[c]/*id*/];
				json[i] = JSON.stringify(f);
			}
	}
	catch(error)
	{		
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "presetfilters.json");
try
{
	var obj = {Version:1, Filters:[], Mode:mode};
	var columns = JSON.parse(ViewFilter.GetColumns());
	for (let i = 0; i < name.Length; i++)
		if (used[i] && json[i] != "")
		{
			var f = {};
			f.name = name[i];
			f.used = used[i];
			var object = JSON.parse(json[i]);
			for (let c = 0; c < columns.length; c++)
				f[columns[c]/*id*/] = object[columns[c]/*id*/];
			obj.Filters.push(f);
		}
	File.WriteTextFile(filePath, JSON.stringify(obj, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}
]]>
					</body>
				</do>
				<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// значения по умолчанию
for (let i = 0; i < json.Length; i++)
{
	name[i] = "";
	used[i] = false;
	json[i] = "";
}
mode = 0;
]]>
					</body>
				</do>
				<object access-modifier="private" name="name" display-name="name" uuid="50292a67-0520-4af1-a78b-00070c345d7c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4" cardinal="20"/>
				<object access-modifier="private" name="used" display-name="used" uuid="f0d1e255-b914-452f-94cb-34d8c1f7d3d0" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4" cardinal="20"/>
				<object access-modifier="private" name="json" display-name="json" uuid="303e5daa-e611-4163-9eb3-dd71e03df459" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4" cardinal="20"/>
				<do access-modifier="private" name="GetAckCondition" display-name="GetAckCondition" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[if (text == "Неквитированные")
	return "{\"data\":false}";
else if (text == "Квитированные")
	return "{\"data\":true}";
else return "";]]>
					</body>
					<param access-modifier="private" name="text" display-name="" uuid="96e5f74f-33a7-4827-8882-94a446aa7391" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
				</do>
				<object access-modifier="private" name="mode" display-name="mode" uuid="03d437d9-615e-42b8-bb31-8d8c1fe9b6c3" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
			</object>
			<object access-modifier="private" name="FileDialogResult" display-name="FileDialogResult" uuid="c1045117-de1e-4e5c-a37b-2789e4445553" base-type="FileDialogResult" base-type-id="602926f1-7d01-4d50-a5c0-d8fd35eadc74" ver="4"/>
			<object access-modifier="private" name="ContextMenu" display-name="ContextMenu" uuid="2dc63cbe-9f05-4c6b-a545-2f0baf868d42" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5">
				<designed target="X" value="-30" ver="5"/>
				<designed target="Y" value="-30" ver="5"/>
				<designed target="ZValue" value="0" ver="5"/>
				<designed target="Rotation" value="0" ver="5"/>
				<designed target="Scale" value="1" ver="5"/>
				<designed target="Visible" value="false" ver="5"/>
				<designed target="Opacity" value="1" ver="5"/>
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="Tooltip" value="" ver="5"/>
				<object access-modifier="private" name="Data" display-name="Data" uuid="1275ca35-3719-4020-be0a-6f687e0260fb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "contextmenu.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var obj = JSON.parse(json);
		Data = JSON.stringify(obj.Content);
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		Data = GetDefaults();
		return false;
	}
}
else
	Data = GetDefaults();

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "contextmenu.json");
try
{
	var settings = {};
	settings.Version = 1;
	settings.Content = JSON.parse(Data);
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
					</body>
				</do>
				<do access-modifier="private" name="GetDefaults" display-name="GetDefaults" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[var items = [];
// режимы
items.push({ 'id': "operative", 'enabled': true});
items.push({ 'id': "historical", 'enabled': true });
// квитирование
items.push({ 'id': "ack", 'enabled': true });
items.push({ 'id': "ackAll", 'enabled': true });
items.push({ 'id': "addComment", 'enabled': true });
// снимок
items.push({ 'id': "snapshot", 'enabled': true });
// звуки
items.push({ 'id': "mute", 'enabled': true });
items.push({ 'id': "skipSound", 'enabled': true });
items.push({ 'id': "clearSoundQueue", 'enabled': true });
// отображение событий
items.push({ 'id': "clear", 'enabled': true });
items.push({ 'id': "viewFilter", 'enabled': true });
items.push({ 'id': "defaultSorting", 'enabled': true });
items.push({ 'id': "sort", 'enabled': true });
// экспорт
items.push({ 'id': "print", 'enabled': true });
items.push({ 'id': "export", 'enabled': true });
items.push({ 'id': "opentrend", 'enabled': false });
items.push({ 'id': "openform", 'enabled': false });
// вид
items.push({ 'id': "toolbar", 'enabled': true });
items.push({ 'id': "statusbar", 'enabled': true });
// параметры
items.push({ 'id': "options", 'enabled': true });

return JSON.stringify(items);]]>
					</body>
				</do>
				<do access-modifier="private" name="AddDesign" display-name="AddDesign" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="javascript">
						<![CDATA[var data = JSON.parse(Data);
var enabled = {};
for (let i = 0; i < data.length; i++) enabled[data[i].id] = data[i].enabled;
var needSeparator = false;
function separator() { needSeparator = true }
var items = [];
function itemspush(id,title,icon,active,checked,condition)
{
	if (condition && enabled[id] == true || forMenu == false)
	{
		if (needSeparator)
		{
			needSeparator = false;
			if (forMenu && items.length > 0) items.push({ 'title': "-" });
		}
		var obj = { 'id':id, 'title':title };
		if (icon != "") obj.icon = icon.split(",").map(function(e,n){return "Alarms_Icons/"+e;}).join(",");
		if (active == null) {/*noop*/} else obj.active = active;
		if (checked == null) {/*noop*/} else obj.checked = checked;
		items.push(obj);
	}
}

// режимы
var allowOperative = Permission.ViewCurrentEvents.Value;
var allowHistorical = Permission.ViewEventHistory.Value;
itemspush("operative", "Оперативный режим", "Operative16.png", ActiveMode!=0, null, allowOperative);
itemspush("historical", "Исторический режим", "Historical16.png", ActiveMode!=1, null, allowHistorical);
// квитирование
separator();
var allowAcknowledgment = Permission.Acknowledgment.Value;
itemspush("ack", "Квитировать", "Acknowledge16.png", !FollowLatestEvent.Value, null, allowAcknowledgment && ActiveMode == 0);
itemspush("ackAll", "Квитировать все", "AcknowledgeAll16.png", null, null, allowAcknowledgment && ActiveMode == 0 && AckAllAvailable.Value);
itemspush("addComment", "Добавить комментарий...", "", ActiveMode != 0 || !FollowLatestEvent.Value, null, allowAcknowledgment && AllowAddComment.Value);
// снимок
separator();
var allowSnapshot = Permission.Snapshot.Value;
itemspush("snapshot",
	!forMenu ? "Включить/Отключить режим снимка":
	forMenu && ToolBar.SnapshotON.Value ? "Отключить режим снимка" : "Включить режим снимка",
	!forMenu ? "Pause16.png,Play16.png":
	forMenu && ToolBar.SnapshotON.Value ? "Play16.png" : "Pause16.png", null, null, ActiveMode == 0 && allowSnapshot);
// звуки
separator();
var allowSoundManagment = Permission.SoundManagment.Value;
itemspush("mute",
	!forMenu ? "Включить/Отключить проигрывание звуков" :
	forMenu && Mute.Value ? "Включить проигрывание звуков" : "Отключить проигрывание звуков",
	!forMenu ? "SoundPlay16.png,SoundMute16.png" :
	forMenu && Mute.Value ? "SoundPlay16.png" : "SoundMute16.png", null, null, allowSoundManagment);
itemspush("skipSound", "Пропустить звук", "SoundForward16.png", null, null, allowSoundManagment);
itemspush("clearSoundQueue", "Очистить очередь звуков", "SoundStop16.png", null, null, allowSoundManagment);
// отображение событий
separator();
var allowClearing = Permission.ClearingCurrentEvents.Value;
var allowFiltering = Permission.Filtering.Value;
var allowSorting = Permission.EventTableSort.Value;
itemspush("clear", "Очистить список", "Clear16.png", !ToolBar.SnapshotON.Value, null, allowClearing);
itemspush("viewFilter", "Фильтр отображения...", "Filter16.png", null, null, allowFiltering);
itemspush("defaultSorting", "Сортировать по умолчанию", "", !TableView.defaultSorting.Value, TableView.defaultSorting.Value, allowSorting);
itemspush("sort", "Сортировка...", "Sort16.png", null, null, allowSorting);
// экспорт
separator();
var allowPrint = Permission.Printing.Value;
var allowExport = private.Permission.ExportData.Value;
var canExport = ActiveMode == 0 ? !OperTableEmpty.Value : !HistTableEmpty.Value && !LoadSaveBusy.Value;
var allowOpenTrend = (private.MultiSelect.Value > 0/*not FollowLatestEvent*/) ||  ActiveMode == 1/*History*/;
var selectedRowCount = JSON.parse(ActiveMode == 0 ? Main_tables_Operative.Table_Operative_mode.GetSelectedRows() : Main_tables_Historical.Table_History_mode.GetSelectedRows()).length;
itemspush("print", "Печать...", "Print16.png", canExport, null, allowPrint);
itemspush("export", "Экспорт...", "ExportToFile16.png", canExport, null, allowExport);
itemspush("opentrend", "Открыть график", "", canExport, null, allowOpenTrend);
itemspush("openform", "Открыть экранную форму", "", canExport && selectedRowCount==1, null, allowOpenTrend);
// вид
separator();
itemspush("toolbar", "Показывать панель инструментов", "", null, DisplayToolbar.Value, GUIModificationAvailable.Value);
itemspush("statusbar", "Показывать строку состояния", "", null, DisplayStatePanel.Value, GUIModificationAvailable.Value);
// параметры
separator();
var allowSettings = Permission.EditingSettings.Value;
itemspush("options", "Параметры...", "Options16.png" ,null, null, allowSettings);

return JSON.stringify(items);]]>
					</body>
					<param access-modifier="private" name="forMenu" display-name="" uuid="7167a9c8-ecf2-47a4-b826-7481e33f822f" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
				</do>
			</object>
			<do access-modifier="private" name="CreateFolderIfNotExist" display-name="CreateFolderIfNotExist" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[if (File.Exists(path))
	return;

try
{
	File.CreateRecursiveFolder(path);
}
catch (err) 
{
	ShowError.message = "Не удалось создать папку\n" + path + "\n" + err.message;
	ShowError.Invoke();
}]]>
				</body>
				<param access-modifier="private" name="path" display-name="" uuid="2eee4365-1245-4a19-b830-6dd9671da3a1" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			</do>
			<object access-modifier="private" name="MenuResult" display-name="MenuResult" uuid="1542c3a3-4010-4a4d-8291-a1de529e5154" base-type="MenuResult" base-type-id="0fe7658c-92f4-4af7-b038-3594414ac651" ver="5"/>
			<object access-modifier="private" name="Theme" display-name="Theme" uuid="2878f5ab-1289-433e-b62a-8bcd61fc46ca" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" ver="4">
				<do-trace access-modifier="private" target="BackgroundColor" ver="5">
					<body>
						<![CDATA[here.pTheme.BackgroundColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="ForegroundColor" ver="5">
					<body>
						<![CDATA[here.pTheme.ForegroundColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="DisabledFontColor" ver="5">
					<body>
						<![CDATA[here.pTheme.DisabledFontColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="EditorBrushColor" ver="5">
					<body>
						<![CDATA[here.pTheme.EditorBrushColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="EditorFontColor" ver="5">
					<body>
						<![CDATA[here.pTheme.EditorFontColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="SelectionColor" ver="5">
					<body>
						<![CDATA[here.pTheme.SelectionColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="BorderColor" ver="5">
					<body>
						<![CDATA[here.pTheme.BorderColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="DisabledBorderColor" ver="5">
					<body>
						<![CDATA[here.pTheme.DisabledBorderColor]]>
					</body>
				</do-trace>
			</object>
			<object access-modifier="private" name="AckMode" display-name="AckMode" uuid="89445ba4-5560-44fa-ab1a-3fc27dbf7530" base-type="int1" base-type-id="756a0a23-7e63-4a13-8a35-e8a38909e5ed" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="MultiSelect" display-name="MultiSelect" uuid="b225d654-9584-479d-a047-d9ae1dde5472" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="5" description="" cardinal="1"/>
			<init target="MultiSelect" ver="5" value="3"/>
			<do-trace access-modifier="private" target="MultiSelect" ver="5">
				<body>
					<![CDATA[TypeConvert.ToUint1(FollowLatestEvent ? 0 : (MultiSelectAvailable ? 3 : 1))]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="LoadSaveBusy" ver="5">
				<body>
					<![CDATA[LoadSaveBusy.LoadingHistory || LoadSaveBusy.LoadingFile || LoadSaveBusy.SavingFile]]>
				</body>
			</do-trace>
			<do access-modifier="private" name="GetProgramDataFolder" display-name="GetProgramDataFolder" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
				<body kind="om">
					<![CDATA[//#28805 пока требуется запускать функцию внешнего модуля в ОМ
return unit.ProductInfo.GetProgramDataFolder();]]>
				</body>
			</do>
			<do access-modifier="private" name="AckDataCollect" display-name="AckDataCollect" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[// функция построения снимка сообщений (для выполнения квитирования или комментирования)
//pAlarms.ActiveMode режим работы алармов (0-оперативный, 1-исторический)
//pAlarms.Main_panel.private.nAckMode - режим выбора сообщений квитирования (1-выбранные, 2-все, 3-последовательность, 4-комментирование выбранных)

var col6Index = Main_panel.private.TableView.Static.Column_Severity.GetIndex();
var col7Index = Main_panel.private.TableView.Static.Column_Ack.GetIndex();
var colSSIndex = Main_panel.private.TableView.Static.Column_SystemSource.GetIndex();
var colCIndex = Main_panel.private.TableView.Static.Column_Condition.GetIndex();
var colATIndex = Main_panel.private.TableView.Static.Column_ActiveTime.GetIndex();
var colCookieIndex = Main_panel.private.TableView.Static.Column_Cookie.GetIndex();
var colMsgIndex = Main_panel.private.TableView.Static.Column_Message.GetIndex();

var Iterator = ActiveMode==0 ? Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1 : Main_tables_Historical.Table_History_mode.TablePersistentIterator_1;

var sSelect = [];//массив с полными тегами источников выбранных сообщений
if (nAckMode == 3)
{
	Iterator.FirstSelectedRow();
	while (true)
	{
		if (Iterator.GetStatus() == 0)
		{
			//Состояние "Квитировано" в случае, если квитирование не требуется равно EMPTY, если квитировано = true, если неквитировано = false;
			var Acked = !(Iterator.GetData(col7Index) == false);
			if (!Acked)
			{
				var source = Iterator.GetText(colSSIndex);
				if (!sSelect.includes(source))
					sSelect.push(source);
			}
		}
		if (!Iterator.HasNext()) break;
		Iterator.Next();
	}
	Iterator.Close();
}

if (nAckMode == 1 || nAckMode == 4) Iterator.FirstSelectedRow();
else if (nAckMode == 3) Iterator.FirstRow();
else if (AcknowledgmentAllVisible && ActiveMode==0) Iterator.FirstVisibleRow();
else Iterator.FirstRow();
var msgs = [];
while (true)
{
	if (Iterator.GetStatus() == 0)
	{
		//Состояние "Квитировано" в случае, если квитирование не требуется равно EMPTY, если квитировано = true, если неквитировано = false;
		var Acked = !(Iterator.GetData(col7Index) == false);
		var severity = Iterator.GetData(col6Index);
		if (!Acked && !isInformativeEvent(severity) || nAckMode == 4)// Проверка на вхождение в группу важности "Прочие"
		{
			var Src = Iterator.GetData(colSSIndex);
			if (nAckMode == 1 || nAckMode == 2 || nAckMode == 3 && sSelect.includes(Src) || nAckMode == 4)
			{
				var ConditionName = Iterator.GetData(colCIndex);
				var ActiveTime = Iterator.GetDataUint8AsStr(colATIndex);
				var Cookie = Iterator.GetData(colCookieIndex);
				var Message = Iterator.GetData(colMsgIndex);
				msgs.push({'source':Src, 'condition':ConditionName, 'time':ActiveTime, 'cookie':Cookie, 'message':Message});
			}
		}
	}
	if (!Iterator.HasNext()) break;
	Iterator.Next();
}
Iterator.Close();

AckedMsgs = JSON.stringify(msgs);
]]>
				</body>
			</do>
			<object access-modifier="private" name="AckedMsgs" display-name="AckedMsgs" uuid="b9b0a920-adf8-4860-805b-01977932c747" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<do access-modifier="private" name="SourceDataCollect" display-name="SourceDataCollect" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[var colSSIndex = Main_panel.private.TableView.Static.Column_SystemSource.GetIndex();
var Iterator = ActiveMode==0 ? Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1 : Main_tables_Historical.Table_History_mode.TablePersistentIterator_1;
var sSelect = [];//массив с полными тегами источников выбранных сообщений
{
	Iterator.FirstSelectedRow();
	while (true)
	{
		if (Iterator.GetStatus() == 0)
		{
			var source = Iterator.GetText(colSSIndex);
			if (!sSelect.includes(source))
				sSelect.push(source);
		}
		if (!Iterator.HasNext()) break;
		Iterator.Next();
	}
	Iterator.Close();
}
private.EventParams[5] = JSON.stringify(sSelect);
]]>
				</body>
			</do>
			<do access-modifier="private" name="FormDataCollect" display-name="FormDataCollect" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="javascript">
					<![CDATA[var colSSIndex = Main_panel.private.TableView.Static.Column_SystemSource.GetIndex();
var colIDIndex = Main_panel.private.TableView.Static.Column_ObjectId.GetIndex();
var Iterator = ActiveMode==0 ? Main_tables_Operative.Table_Operative_mode.TablePersistentIterator_1 : Main_tables_Historical.Table_History_mode.TablePersistentIterator_1;
var sData = {};
Iterator.FirstSelectedRow();
if (Iterator.GetStatus() == 0)
{
	sData.Source = Iterator.GetData(colSSIndex);
	sData.ObjectId = Iterator.GetData(colIDIndex);
}
Iterator.Close();

private.EventParams[6] = JSON.stringify(sData);
]]>
				</body>
			</do>
			<object access-modifier="private" name="Print" display-name="Print" uuid="db7f2d90-f988-4395-83cb-7c3fe38ce22a" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
				<designed target="X" value="0" ver="5"/>
				<designed target="Y" value="0" ver="5"/>
				<designed target="ZValue" value="0" ver="5"/>
				<designed target="Rotation" value="0" ver="5"/>
				<designed target="Scale" value="1" ver="5"/>
				<designed target="Flip" value="0" ver="5"/>
				<designed target="Visible" value="true" ver="5"/>
				<designed target="Opacity" value="1" ver="5"/>
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="Tooltip" value="" ver="5"/>
				<object access-modifier="private" name="HeaderText" display-name="HeaderText" uuid="cfd8930f-a6c6-47ec-96e8-823dd68b4d62" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="HeaderTextUse" display-name="HeaderTextUse" uuid="a6c13b0f-9933-4d0a-9e89-11cb8a752e54" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "print.json");
try
{
	var settings = {};
	settings.Version = 1;
	settings.HeaderText = HeaderText;
	settings.HeaderTextUse = HeaderTextUse;
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
					</body>
				</do>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "print.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var obj = JSON.parse(json);
		HeaderText = obj.HeaderText;
		HeaderTextUse = obj.HeaderTextUse;
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		HeaderText = "";
		HeaderTextUse = false;
		return false;
	}
}
else
{
	HeaderText = "";
	HeaderTextUse = false;
}

return true;]]>
					</body>
				</do>
			</object>
			<object access-modifier="private" name="Permission" display-name="Permission" uuid="828bc50b-cd6c-4597-9eb0-12c0b8e6c8fb" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
				<designed target="X" value="0" ver="5"/>
				<designed target="Y" value="0" ver="5"/>
				<designed target="ZValue" value="0" ver="5"/>
				<designed target="Rotation" value="0" ver="5"/>
				<designed target="Scale" value="1" ver="5"/>
				<designed target="Flip" value="0" ver="5"/>
				<designed target="Visible" value="true" ver="5"/>
				<designed target="Opacity" value="1" ver="5"/>
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="Tooltip" value="" ver="5"/>
				<object access-modifier="private" name="EditingSettings" display-name="EditingSettings" uuid="878a8a3e-6eae-4069-bf23-ccbc06c1b792" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="EditingSettings" ver="5">
					<body>
						<![CDATA[IsFullAccessAllowed && EditingSettingsAvailable && (!UseSecurity || BoolToken_EditSettings.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="ExportData" display-name="ExportData" uuid="1c179e80-990e-4827-b630-38edeb658a43" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="ExportData" ver="5">
					<body>
						<![CDATA[ExportDataAvailability &&(!UseSecurity || BoolToken_ExportDataAvailability.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Filtering" display-name="Filtering" uuid="d20d1683-5653-47fe-84d5-3041fb14c01f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Filtering" ver="5">
					<body>
						<![CDATA[FilterAvailable && (!UseSecurity || BoolToken_Filtering.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="ViewCurrentEvents" display-name="ViewCurrentEvents" uuid="20412f1d-431a-4e8d-ba06-326cdafc56c1" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="ViewCurrentEvents" ver="5">
					<body>
						<![CDATA[CurrentEventsAvailable &&(!UseSecurity || BoolToken_ViewCurrentEvents.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="ViewEventHistory" display-name="ViewEventHistory" uuid="7e1a6215-bf5b-4212-af61-3f60e213acae" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="ViewEventHistory" ver="5">
					<body>
						<![CDATA[EventHistoryAvailable && (!UseSecurity || BoolToken_ViewEventHistory.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Printing" display-name="Printing" uuid="fd730002-2c6a-4809-8a31-6ead2336d72c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="Printing" ver="5">
					<body>
						<![CDATA[PrintingAvailable && (!UseSecurity || BoolToken_Printing.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="EventTableSort" display-name="EventTableSort" uuid="dafa9dcf-ea0c-45ad-a7b3-18bebad92997" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="EventTableSort" ver="5">
					<body>
						<![CDATA[EventTableSortAvailability && IsFullAccessAllowed && (!UseSecurity || BoolToken_EventTableSortAvailability.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="FileSystem" display-name="FileSystem" uuid="5b15b262-2291-4e2a-8fe8-111f4e263437" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="FileSystem" ver="5">
					<body>
						<![CDATA[IsFullAccessAllowed && FileSystemAccess && (!UseSecurity || BoolToken_FileSystemAccess.Value)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="Acknowledgment" display-name="Acknowledgment" uuid="a57c3ec9-170f-43a5-a1c5-a880a7b925f8" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1">
					<object access-modifier="private" name="Result" display-name="Result" uuid="8c8b45b5-a258-4e04-b18f-16d5cf305ac5" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
					<do-trace access-modifier="private" target="Result" ver="5">
						<body>
							<![CDATA[UseSecurity ? (AcknowledgmentAvailable && BoolToken_Acknowledgment.Value ? 1 : -2) : (Str.Length(UserName)>0 ? (AcknowledgmentAvailable?1:-2) : -1)]]>
						</body>
					</do-trace>
				</object>
				<do-trace access-modifier="private" target="Acknowledgment" ver="5">
					<body>
						<![CDATA[CurrentEventsAvailable && AcknowledgmentAvailable && (UseSecurity ? BoolToken_Acknowledgment.Value : UserName!="")]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="ClearingCurrentEvents" display-name="ClearingCurrentEvents" uuid="1e6f72c8-b44d-42cd-83c0-e792e7c0efc7" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1">
					<object access-modifier="private" name="Result" display-name="Result" uuid="952e2ad6-df83-4bd1-91cb-b3c47e0a2db8" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="5" description="" cardinal="1"/>
					<do-trace access-modifier="private" target="Result" ver="5">
						<body>
							<![CDATA[UseSecurity ? (ClearingCurrentEventsAvailable && BoolToken_ClearCurrentEvents.Value ? 1 : -2) : (Str.Length(UserName)>0 ? (ClearingCurrentEventsAvailable?1:-2) : -1)]]>
						</body>
					</do-trace>
				</object>
				<do-trace access-modifier="private" target="ClearingCurrentEvents" ver="5">
					<body>
						<![CDATA[ActiveMode==0 && ClearingCurrentEventsAvailable && (UseSecurity ? BoolToken_ClearCurrentEvents.Value : UserName!="")]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="SoundManagment" display-name="SoundManagment" uuid="812e0fb6-8178-4465-ab0c-f61fd41ae40e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="Snapshot" display-name="Snapshot" uuid="7ca83d66-8bef-4a4e-9686-f8bf13c3e85f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
				<do-trace access-modifier="private" target="SoundManagment" ver="5">
					<body>
						<![CDATA[ActiveMode==0 && SoundPlaybackManagmentAvailable && CurrentEventsAvailable && (!UseSecurity || Main_panel.private.BoolToken_SoundPlaybackManagment.Value)]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="Snapshot" ver="5">
					<body>
						<![CDATA[SnapshotAvailable && ActiveMode == 0 && CurrentEventsAvailable && (!UseSecurity || BoolToken_TakeCurrentEventsSnapshot.Value)]]>
					</body>
				</do-trace>
			</object>
			<object access-modifier="private" name="QueryProcessing" display-name="QueryProcessing" uuid="efd3227a-f149-4365-b14a-a6232c2a977b" base-type="Dummy" base-type-id="e4b644cf-f3a8-4d11-82a0-6acc23748e14" ver="5" description="" cardinal="1">
				<designed target="X" value="0" ver="5"/>
				<designed target="Y" value="0" ver="5"/>
				<designed target="ZValue" value="0" ver="5"/>
				<designed target="Rotation" value="0" ver="5"/>
				<designed target="Scale" value="1" ver="5"/>
				<designed target="Flip" value="0" ver="5"/>
				<designed target="Visible" value="true" ver="5"/>
				<designed target="Opacity" value="1" ver="5"/>
				<designed target="Enabled" value="true" ver="5"/>
				<designed target="Tooltip" value="" ver="5"/>
				<object access-modifier="private" name="StorageDuration" display-name="StorageDuration" uuid="34930b00-f78a-4b28-b7fc-6fe339a622b8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="LoadSettings" display-name="LoadSettings" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
					<body kind="javascript">
						<![CDATA[var filePath = File.CombinePath(ConfigurationPath, "queryprocessing.json");
if (File.Exists(filePath))
{
	try
	{
		var json = File.ReadTextFile(filePath);
		var settings = JSON.parse(json);
		
		StorageDuration = settings.StorageDuration;
		
		Main_tables_Operative.TableModel_1.ApAlarmQuery_1.ReloadSmart(true,true);
	}
	catch(error)
	{
		log("Не удалось загрузить из "  + filePath + ": " + error);
		SetDefaults();
		return false;
	}
}
else
	SetDefaults();

return true;]]>
					</body>
				</do>
				<do access-modifier="private" name="SaveSettings" display-name="SaveSettings" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[// в случае некорректно заданой папки конфигурации просто выходим
if (!File.Exists(ConfigurationPath))
	return;

var filePath = File.CombinePath(ConfigurationPath, "queryprocessing.json");
try
{
	var settings = {};
	settings.Mode = 1;//сохраняем номер варианта настроек, для будущих расширений
	settings.StorageDuration = StorageDuration;
	
	File.WriteTextFile(filePath, JSON.stringify(settings, null, 2));
}
catch(error)
{
	log("Не удалось сохранить в "  + filePath + ": " + error);
}]]>
					</body>
				</do>
				<do access-modifier="private" name="SetDefaults" display-name="SetDefaults" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[StorageDuration = 0;]]>
					</body>
				</do>
			</object>
		</object>
		<designed target="ZValue" value="0" ver="4"/>
		<designed target="Opacity" value="1" ver="4"/>
		<object access-modifier="private" name="LayoutWeight_1" display-name="LayoutWeight_1" uuid="5ba780db-7aee-443c-b0f9-95fca965fbd0" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="2">
			<designed target="Weight" value="0" ver="2"/>
		</object>
	</object>
	<object access-modifier="private" name="Main_tables_Operative" display-name="Main_tables_Operative" uuid="1e3ced06-12b4-4295-80cd-d79ec25bdb35" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="2">
		<designed target="X" value="20" ver="2"/>
		<designed target="Y" value="370" ver="2"/>
		<designed target="Rotation" value="0" ver="2"/>
		<designed target="Scale" value="1" ver="2"/>
		<designed target="Visible" value="true" ver="2"/>
		<designed target="Enabled" value="true" ver="2"/>
		<designed target="Tooltip" value="" ver="2"/>
		<designed target="Width" value="1200" ver="2"/>
		<designed target="Height" value="200" ver="2"/>
		<designed target="RoundingRadius" value="0" ver="2"/>
		<designed target="PenColor" value="4278190080" ver="2"/>
		<designed target="PenStyle" value="1" ver="2"/>
		<designed target="PenWidth" value="1" ver="2"/>
		<designed target="BrushColor" value="4278190080" ver="2"/>
		<designed target="BrushStyle" value="0" ver="2"/>
		<object access-modifier="private" name="Table_Operative_mode" display-name="Table_Operative_mode" uuid="55d3ee48-b4c9-4763-9614-483629485715" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="2">
			<designed target="X" value="0" ver="2"/>
			<designed target="Y" value="4" ver="2"/>
			<designed target="Rotation" value="0" ver="2"/>
			<designed target="Scale" value="1" ver="2"/>
			<designed target="Visible" value="false" ver="2"/>
			<designed target="Enabled" value="true" ver="2"/>
			<designed target="Width" value="1000" ver="2"/>
			<designed target="Height" value="10" ver="2"/>
			<designed target="RowHeight" value="25" ver="2"/>
			<designed target="SelectionBehavior" value="1" ver="2"/>
			<designed target="SelectionMode" value="3" ver="2"/>
			<designed target="RowOrder" value="1" ver="2"/>
			<object access-modifier="private" name="Columns" display-name="Columns" uuid="6245f81a-3ef3-47f7-8222-01f2393e572b" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="2" cardinal="28">
				<designed target="Title" value="" ver="2"/>
				<designed target="Description" value="" ver="2"/>
				<designed target="Id" value="" ver="2"/>
				<designed target="BackgroundColor" value="0xffffffff" ver="2"/>
				<designed target="ForegroundColor" value="0xff000000" ver="2"/>
				<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="2"/>
				<designed target="TitleBackgroundColor" value="0xffffffff" ver="2"/>
				<designed target="TitleForegroundColor" value="0xff000000" ver="2"/>
				<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="2"/>
				<designed target="Width" value="145" ver="2"/>
				<designed target="WidthResizeMode" value="0" ver="2"/>
				<designed target="Hidden" value="false" ver="2"/>
				<designed target="NumberFormat" value="%d" ver="2"/>
				<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="2"/>
				<designed target="Emptiable" value="true" ver="2"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="MouseDoubleClick">
					<body kind="om">
						<![CDATA[if (Id == Main_panel.private.TableView.Static.Column_AckRequired.Id)
	return;
Main_panel.private.selectedRow = row;
Main_panel.private.DoubleClick.Invoke();
]]>
					</body>
				</do-on>
				<designed target="TextAlignment" value="129" ver="2"/>
				<designed target="JsonFilter" value="" ver="2"/>
				<designed target="SortingEnabled" value="false" ver="2"/>
				<designed target="SortOrder" value="0" ver="2"/>
				<designed target="SortPriority" value="0" ver="2"/>
				<designed target="WordWrap" value="true" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="WidthChanged">
					<body kind="om">
						<![CDATA[Main_panel.private.TableView.viewChanged = true;]]>
					</body>
				</do-on>
				<do-trace access-modifier="private" target="WordWrap" ver="5">
					<body>
						<![CDATA[LineTransfer]]>
					</body>
				</do-trace>
				<designed target="TitleTextAlignment" value="132" ver="3"/>
				<do-trace access-modifier="private" target="TimeFormat" ver="5">
					<body>
						<![CDATA[(ShowMilliseconds)?("dd.MM.yyyy hh:mm:ss.zzz"):("dd.MM.yyyy hh:mm:ss")]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="MouseTitleClick">
					<body kind="om">
						<![CDATA[Main_panel.private.TableView.SwitchSorting(Id, SortingEnabled, SortOrder);]]>
					</body>
				</do-on>
				<designed target="SortMode" value="0" ver="4"/>
				<designed target="ColumnOwnId" value="" ver="4"/>
				<do-trace access-modifier="private" target="TitleBackgroundColor" ver="5">
					<body>
						<![CDATA[pTheme.BackgroundColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="TitleForegroundColor" ver="5">
					<body>
						<![CDATA[pTheme.ForegroundColor]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="MouseRightTitleClick">
					<body kind="om">
						<![CDATA[Main_panel.private.OpenColumnsMenu(ScreenX(MouseX, MouseY), ScreenY(MouseX, MouseY));]]>
					</body>
				</do-on>
				<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="MouseClick">
					<body kind="om">
						<![CDATA[if (Id == Main_panel.private.TableView.Static.Column_Source.Id)
{
	//Запрос objectId
	end: bool = false;
	if (AllowActionInSourceColumn)
	{
		TablePersistentIterator_1.FirstSelectedRow();
		while (!end)
		{
			if (TablePersistentIterator_1.GetStatus() == 0)
			{
				objectId = Variant.ToUint4(TablePersistentIterator_1.GetData(Main_panel.private.TableView.Static.Column_ObjectId.GetIndex()),0);
			}
			end = !TablePersistentIterator_1.HasNext();
			TablePersistentIterator_1.Next();
		}
		TablePersistentIterator_1.Close();
	}
}

if (Id == Main_panel.private.TableView.Static.Column_AckRequired.Id)
{
	Main_panel.private.selectedRow = row;
	if (!FollowLatestEvent) AckSelected();
}]]>
					</body>
				</do-on>
			</object>
			<do-trace access-modifier="private" target="Visible" ver="5">
				<body>
					<![CDATA[(ActiveMode==0)?true:false]]>
				</body>
			</do-trace>
			<designed target="LatestRowTracking" value="true" ver="2"/>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="SelectionChanged">
				<body kind="javascript">
					<![CDATA[//Механизм остановки прокрутки списка (учитывается только при выключенном состоянии FollowLastEvent)
var rowIndex = JSON.parse(GetSelectedRows());
var lastRowIndex = MapRowFromModel(TableModel.GetRowCount()-1);

//Выбираем первую строку, если ничего не выбрано
if (rowIndex == "" && !Main_panel.ToolBar.SnapshotON.Value) SetSelectedRows("[0]");

//Выключаем слежение, если выбрано более одной строки или выбрана не последняя поступившая строка
if (rowIndex.length > 1 || rowIndex[0] != lastRowIndex) Main_panel.private.tempAutoScroll.Value = false;
else if (rowIndex[0] == lastRowIndex) Main_panel.private.tempAutoScroll.Value = true;

//Если таблица пустая - скрываем кнопки
Main_panel.private.OperTableEmpty.Value = GetRowCount() == 0;]]>
				</body>
			</do-on>
			<designed target="HeaderHeight" value="23" ver="3"/>
			<designed target="HeaderVisible" value="false" ver="3"/>
			<init target="TableModel" ver="5" ref="TableModel_1"/>
			<do-trace access-modifier="private" target="HeaderVisible" ver="5">
				<body>
					<![CDATA[!HideColumnTitle]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="SelectionMode" ver="5">
				<body>
					<![CDATA[Main_panel.private.MultiSelect]]>
				</body>
			</do-trace>
			<object access-modifier="private" name="DragNDrop_1" display-name="DragNDrop_1" uuid="8e3b6c0b-4bf8-4b3b-963b-4238c96f8c88" base-type="DragNDrop" base-type-id="c4ddb32f-3653-44c8-be57-3a595e10c2fb" ver="3">
				<designed target="DragEnabled" value="true" ver="3"/>
				<designed target="DropEnabled" value="true" ver="3"/>
				<designed target="Image" value="." ver="3"/>
			</object>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MousePress">
				<body kind="om">
					<![CDATA[mousePress = true;
selectedRow = row;
selectedColumn = column;
SelectionMode = Main_panel.private.MultiSelect; // Режим выделения нескольких строк]]>
				</body>
			</do-on>
			<object access-modifier="private" name="TablePersistentIterator_1" display-name="TablePersistentIterator_1" uuid="86e14cd9-c6e4-4318-869e-861c90b8d35c" base-type="TablePersistentIterator" base-type-id="3daa2363-e163-4d9c-ad69-cbcf416d89bf" ver="3">
				<do access-modifier="private" name="GetDataUint8AsStr" display-name="GetDataUint8AsStr" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return String.ToString(Variant.ToUint8(GetData(col), 0));]]>
					</body>
					<param access-modifier="private" name="col" display-name="" uuid="e6d54294-4db4-41f3-a0d7-591d9103bb97" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
				</do>
			</object>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="MouseMove">
				<body kind="javascript">
					<![CDATA[//Drag&Drop. Формирование JSON-строки формата {"data":[{"tag":"some.tag1"},{"tag":"some.tag2"}]}
//На данном этапе только для 1 тега
var sendObj = {};
var end;
sendObj.data = [];

if (mousePress && selectedColumn == Main_panel.private.TableView.Static.Column_Source.GetIndex()) {
	SelectionMode = 1; // Режим выделения только одной строки
	if (Math.abs(diffX - mouseX) > 1 || Math.abs(diffY - mouseY) > 1) {
		TablePersistentIterator_1.FirstSelectedRow();
		while	(!end) {
			if (TablePersistentIterator_1.GetStatus() == 0 && TablePersistentIterator_1.GetRow() == selectedRow) {
				sendObj.data.push({"tag":TablePersistentIterator_1.GetData(Main_panel.private.TableView.Static.Column_SystemSource.GetIndex())});
				DragNDrop_1.SetText(JSON.stringify(sendObj));
				DragNDrop_1.DoDragDrop();
			}
			end = !TablePersistentIterator_1.HasNext();
			TablePersistentIterator_1.Next();
		}
		TablePersistentIterator_1.Close();		
		mousePress = false;
	}
} else {
	diffX = mouseX;
	diffY = mouseY;
}
]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="MouseRelease">
				<body kind="om">
					<![CDATA[mousePress = false;
if (button == 2/*right*/) Main_panel.private.OpenContextMenu(ScreenX(MouseX, MouseY), ScreenY(MouseX, MouseY));]]>
				</body>
			</do-on>
			<designed target="SelectionOverlayEnabled" value="false" ver="3"/>
			<do-trace access-modifier="private" target="LatestRowTracking" ver="5">
				<body>
					<![CDATA[(FollowLatestEvent || (LookLatestEvent && Main_panel.private.tempAutoScroll))?(true):(false)]]>
				</body>
			</do-trace>
			<object access-modifier="private" name="TableDecorator_1" display-name="TableDecorator_1" uuid="6133df89-84ad-4927-935d-b81d76df7b7c" base-type="TableDecorator" base-type-id="2ff6a2d7-9573-4060-bfea-29c63d61b079" ver="3">
				<designed target="JsonDecorator" value="" ver="3"/>
			</object>
			<do-trace access-modifier="private" target="HorizontalScrollBarPolicy" ver="5">
				<body>
					<![CDATA[here.HorizontalScrollBarPolicy]]>
				</body>
			</do-trace>
			<designed target="DelayedSortingEnabled" value="false" ver="4"/>
			<designed target="HorizontalScrollMode" value="0" ver="4"/>
			<designed target="VerticalScrollMode" value="0" ver="4"/>
			<designed target="HorizontalScrollBarPolicy" value="0" ver="4"/>
			<designed target="VerticalScrollBarPolicy" value="0" ver="4"/>
			<do-trace access-modifier="private" target="VerticalScrollBarPolicy" ver="5">
				<body>
					<![CDATA[here.VerticalScrollBarPolicy]]>
				</body>
			</do-trace>
			<designed target="BackgroundColor" value="0xffffffff" ver="4"/>
			<designed target="FrameColor" value="0xff5f5f5f" ver="4"/>
			<designed target="GridColor" value="0xffd8d8d8" ver="4"/>
			<do-trace access-modifier="private" target="FrameColor" ver="5">
				<body>
					<![CDATA[pTheme.BorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[pTheme.EditorBrushColor]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="LayoutWeight_1" display-name="LayoutWeight_1" uuid="70615837-233f-49b3-9f4d-b8130523ae3f" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="2">
			<designed target="Weight" value="0" ver="2"/>
		</object>
		<object access-modifier="private" name="LinearLayout_1" display-name="LinearLayout_1" uuid="767c5431-764d-428a-a5b4-177b7dfafa95" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="2">
			<designed target="Orientation" value="1" ver="2"/>
			<designed target="Gap" value="0" ver="2"/>
		</object>
		<object access-modifier="private" name="TableModel_1" display-name="TableModel_1" uuid="18125f03-1441-49e1-b443-4819789d70c0" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
			<designed target="Frozen" value="false" ver="3"/>
			<designed target="MaxRowCount" value="2147483647" ver="3"/>
			<object access-modifier="private" name="ApAlarmQuery_1" display-name="ApAlarmQuery_1" uuid="41b8f98f-914f-41aa-9779-0644120b6170" base-type="ApAlarmQuery" base-type-id="f66d4d41-8e9d-4eee-8b83-702143b5768d" ver="2">
				<designed target="Mode" value="2" ver="2"/>
				<designed target="HistoricalRangeStart" value="0" ver="2"/>
				<designed target="HistoricalRangeEnd" value="0" ver="2"/>
				<designed target="Active" value="true" ver="2"/>
				<init target="Source" ver="5" ref="ApSource"/>
				<designed target="RemoveAckedInactive" value="false" ver="2"/>
				<designed target="RefreshAtStart" value="false" ver="2"/>
				<designed target="HistoryPreloadInterval" value="0" ver="3"/>
				<designed target="Filter" value="" ver="3"/>
				<designed target="HistoricalFilter" value="" ver="3"/>
				<do access-modifier="private" name="Init" display-name="Init" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[var data = {'clear':{'filters':[]}};

if (Main_panel.private.QueryProcessing.StorageDuration > 0)
{
	var _durationStr = "now-"+Main_panel.private.QueryProcessing.StorageDuration+"h";
	data.clear.filters.push({'age_filter':{'kind':'auto','condition':{'<=':{'active_time':_durationStr}}}});
}

if (ActiveConditionsList.Value)
	OperativeBufferSize = 4294967295;
else
{
	// если обычное сообщение или квитированное, то удаляем его
	OperativeBufferSize = MaxVisibleOrdinaryEvents;//outdated требует установку OperativeBufferSize
	data.clear.filters.push(
		{'second_priority_filter': {
			'kind': 'auto',
			'condition': {
				'AND': [
					{ '==': { 'outdated': true } },
					{ 'OR': [
						{'acked':true},
						{'OR': [JSON.parse(ApAlarmQueue_2.JsonFilter),JSON.parse(ApAlarmQueue_3.JsonFilter),JSON.parse(ApAlarmQueue_4.JsonFilter)]}
						]} 
					]
				}
			}
		}
	);
}

DataProcessing = JSON.stringify(data);
]]>
					</body>
				</do>
				<do access-modifier="private" name="ReloadSmart" display-name="ReloadSmart" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="om">
						<![CDATA[// так увеличатся шансы нормально выполнить запрос, а не в пустоту (c) author
if (Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Source.ConnectionState == 2 && Main_panel.private.InitComplete)
{
	Main_tables_Operative.TableModel_1.CancelReadAsync();//не обязательно (c) author //всегда делай (c) another author

	Main_tables_Operative.TableModel_1.Clear();//всегда делай (c) another author

	Main_tables_Operative.TableModel_1.ApAlarmQuery_1.RemoveAckedInactive = HideAckedEvents;
	Main_tables_Operative.TableModel_1.ApAlarmQuery_1.RefreshAtStart = RequestEventsStart;
	Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Reload(); // Запрос для вывода сообщений в таблицу
	if (doClear || doReloadSound)
		Main_tables_Operative.ReloadSoundQueue();

	ReadingActive = true;
	Main_tables_Operative.TableModel_1.BeginReadAsync();
}]]>
					</body>
					<param access-modifier="private" name="doClear" display-name="" uuid="56bb555a-57e8-40c9-b5d4-ac61e7e44d3b" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
					<param access-modifier="private" name="doReloadSound" display-name="" uuid="6cb18e35-80df-4f28-b745-d3665649fdd5" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
				</do>
				<designed target="OperativeBufferSize" value="4294967295" ver="5"/>
				<object access-modifier="private" name="ReadingActive" display-name="ReadingActive" uuid="d3364f04-71a6-4249-8e27-1b94943e4a3a" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1">
					<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
						<body kind="om">
							<![CDATA[StatePanel.UpdateMessageCount();]]>
						</body>
					</do-on>
				</object>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="StatusChanged">
					<body kind="om">
						<![CDATA[if (statusCode == 2 /*#28668.HistoricalAlarmsRequestFinished*/ && message != "" && message!="Unexpected error"/*#29132*/)
{
	Main_panel.private.ShowError.message = "Ошибка подгрузки исторических сообщений: " + message;
	Main_panel.private.ShowError.Invoke();
}]]>
					</body>
				</do-on>
			</object>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="RowsInserted">
				<body kind="om">
					<![CDATA[//DebugTool_1.Log("Rows inserted from " + String.ToString(first) + " to " + String.ToString(last));

// Выделение первого сообщения после очистки
if (Table_Operative_mode.GetSelectedRows() == "[]" && !Main_panel.ToolBar.SnapshotON.Value)
	Table_Operative_mode.SetSelectedRows("[0]");

// Удаление дублирующихся сообщений после подгрузки исторических данных
if (Main_panel.private.DuplicateCheck)
	RemoveDuplicates(first, last);

// Взводим таймер обновления
if (!TableChangedTimer.Active)
	TableChangedTimer.Active = true;]]>
				</body>
			</do-on>
			<object access-modifier="private" name="TableIterator_1" display-name="TableIterator_1" uuid="207dcb18-4b57-42a7-a706-4b0bb982143d" base-type="TableIterator" base-type-id="b368f2dc-9de9-47fc-b7ae-1d9c28047eba" ver="3">
				<designed target="CurrentRow" value="0" ver="3"/>
			</object>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="DataChanged">
				<body kind="om">
					<![CDATA[if (!TableChangedTimer.Active)
	TableChangedTimer.Active = true;]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="RowsRemoved">
				<body kind="om">
					<![CDATA[//DebugTool_1.Log("Rows removed from " + String.ToString(first) + " to " + String.ToString(last));
if (!TableChangedTimer.Active)
	TableChangedTimer.Active = true;]]>
				</body>
			</do-on>
			<object access-modifier="private" name="savedFilePath" display-name="savedFilePath" uuid="818bed0c-22e2-4619-8c42-0d3e98756819" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="GetContentAsJsonFinished">
				<body kind="javascript">
					<![CDATA[try
{
	File.WriteTextFile(savedFilePath, data);
	Main_panel.private.EventParams[4] = "";
	Main_panel.private.ShowSaveDialog.Saved();
}
catch(err)
{
	Main_panel.private.EventParams[4] = "Не удалось сохранить файл:\n"  + savedFilePath + "\n" + err.message;
	Main_panel.private.ShowSaveDialog.Saved();
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_7" display-name="Handler_7" ver="5" event="GetContentAsJsonFailed">
				<body kind="om">
					<![CDATA[Main_panel.private.EventParams[4] = "Не удалось получить содержимое таблицы";
Main_panel.private.ShowSaveDialog.Fin();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_8" display-name="Handler_8" ver="5" event="ReadFinished">
				<body kind="om">
					<![CDATA[ApAlarmQuery_1.ReadingActive = false;]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="ApAlarmQueue_1" display-name="ApAlarmQueue_1" uuid="8cc61b79-107b-44a4-8a62-27b27ce4e1f1" base-type="ApAlarmQueue" base-type-id="040615c1-78b9-4f5b-8201-607d29656aca" ver="2">
			<designed target="JsonFilter" value='{"AND":[{"&gt;=":{"severity":667}},{"&lt;=":{"severity":1000}}]}' ver="2"/>
			<object access-modifier="private" name="QueueModel" display-name="QueueModel" uuid="7d15f3b2-82a8-480b-a3bb-676bb31c7e5f" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
				<designed target="Frozen" value="false" ver="3"/>
				<designed target="MaxRowCount" value="2147483647" ver="3"/>
				<object access-modifier="private" name="TableIterator_1" display-name="TableIterator_1" uuid="8afd5d4c-dbd3-43eb-86b8-d852a8111520" base-type="TableIterator" base-type-id="b368f2dc-9de9-47fc-b7ae-1d9c28047eba" ver="3">
					<designed target="CurrentRow" value="0" ver="3"/>
				</object>
			</object>
			<init target="Query" ver="5" ref="TableModel_1.ApAlarmQuery_1"/>
			<object access-modifier="private" name="severityArray" display-name="severityArray" uuid="d83125f6-0a53-44c4-94a8-3729bc1b3bd1" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<init target="severityArray" ver="5" value="667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAlarmRemoved">
				<body kind="om">
					<![CDATA[if (SoundPhraseInfo == alarmAsJson)
{
	SoundPhrase = "";
	SoundPhraseInfo = "";
	Sound.Active = false;
	UpdateSoundQueueModel();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="ApAlarmQueue_2" display-name="ApAlarmQueue_2" uuid="84664089-5a77-4ac4-8f5f-2c5a728f3675" base-type="ApAlarmQueue" base-type-id="040615c1-78b9-4f5b-8201-607d29656aca" ver="2">
			<designed target="JsonFilter" value='{"AND":[{"&gt;=":{"severity":445}},{"&lt;=":{"severity":666}}]}' ver="2"/>
			<object access-modifier="private" name="QueueModel" display-name="QueueModel" uuid="4c39c7ec-ab4c-497c-b957-c0b468e7af39" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
				<designed target="Frozen" value="false" ver="3"/>
				<designed target="MaxRowCount" value="2147483647" ver="3"/>
				<object access-modifier="private" name="TableIterator_1" display-name="TableIterator_1" uuid="9711c3f3-e96d-42be-bb57-90b2f2541050" base-type="TableIterator" base-type-id="b368f2dc-9de9-47fc-b7ae-1d9c28047eba" ver="3">
					<designed target="CurrentRow" value="0" ver="3"/>
				</object>
			</object>
			<init target="Query" ver="5" ref="TableModel_1.ApAlarmQuery_1"/>
			<object access-modifier="private" name="severityArray" display-name="severityArray" uuid="7070916e-4c07-4b69-b746-b40693aabd10" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<init target="severityArray" ver="5" value="445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAlarmRemoved">
				<body kind="om">
					<![CDATA[if (SoundPhraseInfo == alarmAsJson)
{
	SoundPhrase = "";
	SoundPhraseInfo = "";
	Sound.Active = false;
	UpdateSoundQueueModel();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="ApAlarmQueue_3" display-name="ApAlarmQueue_3" uuid="8e8f8eb6-de87-4e92-836c-5afda4502364" base-type="ApAlarmQueue" base-type-id="040615c1-78b9-4f5b-8201-607d29656aca" ver="2">
			<designed target="JsonFilter" value='{"AND":[{"&gt;=":{"severity":223}},{"&lt;=":{"severity":444}}]}' ver="2"/>
			<object access-modifier="private" name="QueueModel" display-name="QueueModel" uuid="759e4b6b-a628-45e7-bfd6-866719757df3" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
				<designed target="Frozen" value="false" ver="3"/>
				<designed target="MaxRowCount" value="2147483647" ver="3"/>
				<object access-modifier="private" name="TableIterator_1" display-name="TableIterator_1" uuid="fe5ad63a-feb3-4f6a-9df8-5e1ce9f668e4" base-type="TableIterator" base-type-id="b368f2dc-9de9-47fc-b7ae-1d9c28047eba" ver="3">
					<designed target="CurrentRow" value="0" ver="3"/>
				</object>
			</object>
			<init target="Query" ver="5" ref="TableModel_1.ApAlarmQuery_1"/>
			<object access-modifier="private" name="severityArray" display-name="severityArray" uuid="f96b5e3c-6509-4c8f-8592-12143342079a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<init target="severityArray" ver="5" value="223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAlarmRemoved">
				<body kind="om">
					<![CDATA[if (SoundPhraseInfo == alarmAsJson)
{
	SoundPhrase = "";
	SoundPhraseInfo = "";
	Sound.Active = false;
	UpdateSoundQueueModel();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="ApAlarmQueue_4" display-name="ApAlarmQueue_4" uuid="89d79438-6dd9-466b-a950-84078c17d4fd" base-type="ApAlarmQueue" base-type-id="040615c1-78b9-4f5b-8201-607d29656aca" ver="2">
			<designed target="JsonFilter" value='{"AND":[{"&gt;=":{"severity":1}},{"&lt;=":{"severity":222}}]}' ver="2"/>
			<object access-modifier="private" name="QueueModel" display-name="QueueModel" uuid="61bb8e2a-818d-49b9-b95b-a7086a63b0f5" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
				<designed target="Frozen" value="false" ver="3"/>
				<designed target="MaxRowCount" value="2147483647" ver="3"/>
				<object access-modifier="private" name="TableIterator_1" display-name="TableIterator_1" uuid="84673a79-b0f1-4e40-9ae0-883cc71e6530" base-type="TableIterator" base-type-id="b368f2dc-9de9-47fc-b7ae-1d9c28047eba" ver="3">
					<designed target="CurrentRow" value="0" ver="3"/>
				</object>
			</object>
			<init target="Query" ver="5" ref="TableModel_1.ApAlarmQuery_1"/>
			<object access-modifier="private" name="severityArray" display-name="severityArray" uuid="ed373769-56b7-41fb-aa0d-40048dd649e4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<init target="severityArray" ver="5" value="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnAlarmRemoved">
				<body kind="om">
					<![CDATA[if (SoundPhraseInfo == alarmAsJson)
{
	SoundPhrase = "";
	SoundPhraseInfo = "";
	Sound.Active = false;
	UpdateSoundQueueModel();
}]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="SoundPhrase" display-name="SoundPhrase" uuid="8302d7a5-9967-4018-b4eb-aea7b6173f92" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<object access-modifier="private" name="SoundPhraseInfo" display-name="SoundPhraseInfo" uuid="4952c4ac-556c-4694-888a-5231b734edc9" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="diffX" display-name="diffX" uuid="b904acd2-89e7-4492-a57b-f87815d14d52" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<object access-modifier="private" name="diffY" display-name="diffY" uuid="207199b5-0a9a-4b10-b813-b72476b28354" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<object access-modifier="private" name="mousePress" display-name="mousePress" uuid="532aeb57-f79e-41b0-8206-418b9ef0f997" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
		<object access-modifier="private" name="selectedRow" display-name="selectedRow" uuid="99d36603-a584-43bf-a92a-36d7174977e4" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<object access-modifier="private" name="selectedColumn" display-name="selectedColumn" uuid="0e4d4094-bda6-439e-8116-0b9e28623aff" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<do access-modifier="private" name="InitSoundQueue" display-name="InitSoundQueue" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// Инициализация моделей очереди активных алармов
if (ApAlarmQueue_1.QueueModel.GetColumnCount() > 0) return;

ApAlarmQueue_1.QueueModel.AddColumn("alarmInfo", "", "", "", "string", false, true);
ApAlarmQueue_1.QueueModel.AddColumn("sound", "", "", "", "string", false, true);
ApAlarmQueue_1.QueueModel.AddColumn("repeats", "", "", "", "int2", false, true);
ApAlarmQueue_1.QueueModel.AddColumn("isPlayed", "", "", "", "bool", false, true);

ApAlarmQueue_2.QueueModel.AddColumn("alarmInfo", "", "", "", "string", false, true);
ApAlarmQueue_2.QueueModel.AddColumn("sound", "", "", "", "string", false, true);
ApAlarmQueue_2.QueueModel.AddColumn("repeats", "", "", "", "int2", false, true);
ApAlarmQueue_2.QueueModel.AddColumn("isPlayed", "", "", "", "bool", false, true);

ApAlarmQueue_3.QueueModel.AddColumn("alarmInfo", "", "", "", "string", false, true);
ApAlarmQueue_3.QueueModel.AddColumn("sound", "", "", "", "string", false, true);
ApAlarmQueue_3.QueueModel.AddColumn("repeats", "", "", "", "int2", false, true);
ApAlarmQueue_3.QueueModel.AddColumn("isPlayed", "", "", "", "bool", false, true);

ApAlarmQueue_4.QueueModel.AddColumn("alarmInfo", "", "", "", "string", false, true);
ApAlarmQueue_4.QueueModel.AddColumn("sound", "", "", "", "string", false, true);
ApAlarmQueue_4.QueueModel.AddColumn("repeats", "", "", "", "int2", false, true);
ApAlarmQueue_4.QueueModel.AddColumn("isPlayed", "", "", "", "bool", false, true);]]>
			</body>
		</do>
		<do access-modifier="private" name="UpdateSoundQueueModel" display-name="UpdateSoundQueueModel" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[InitSoundQueue();
//var start = Date.now();
//var queueLength = 0;

// обрабатываем очереди активных алармов
var alarmQueue = [];
alarmQueue[0] = ApAlarmQueue_1;
alarmQueue[1] = ApAlarmQueue_2;
alarmQueue[2] = ApAlarmQueue_3;
alarmQueue[3] = ApAlarmQueue_4;

var queueModel = [];
queueModel[0] = ApAlarmQueue_1.QueueModel;
queueModel[1] = ApAlarmQueue_2.QueueModel;
queueModel[2] = ApAlarmQueue_3.QueueModel;
queueModel[3] = ApAlarmQueue_4.QueueModel;

var queueSettings = [];
queueSettings[0] = Main_panel.private.SeverityGroups.Range1;
queueSettings[1] = Main_panel.private.SeverityGroups.Range2;
queueSettings[2] = Main_panel.private.SeverityGroups.Range3;
queueSettings[3] = Main_panel.private.SeverityGroups.Range4;

// наличие звукового файла по умолчанию
var defaultSoundExists = File.Exists(File.CombinePath(soundFolderPath, "default.wav"));
//log("Файл default.wav в папке " + soundFolderPath + " " + (defaultSoundExists ? "имеется" : "отсутствует"));

for (let i = 0; i < alarmQueue.length; i++)
{	
	if (alarmQueue[i].Length == 0)
	{
		queueModel[i].Clear();	
	}
	else
	{
		var rowCount = queueModel[i].GetRowCount();
		var soundRepeats = queueSettings[i].nSoundRepeats;
		
		// переносим события из очереди в модель
		alarmQueue[i].MoveFirst();
		var row = 0;
		while(true)
		{
			// описание аларма из очереди
			var alarmInfoStr = alarmQueue[i].CurrentAlarm();
			var alarmInfo = JSON.parse(alarmInfoStr);
			var soundString = alarmInfo.sound;
			
			// удаляем все записи в модели, пока не дойдем до записи, соответствующей очереди
			var isExists = false;
			var canIncRow = true;
			while (row < rowCount)
			{
				var _alarmInfo = queueModel[i].GetCellData(row, 0);
				if (soundString == "" || soundString == ";"/*#27644*/)
				{//#27855 переходим к следующей строке если этот звук не должен был быть добавлен
					isExists = true;
					canIncRow = false;
					break;
				}
				else if (alarmInfoStr == _alarmInfo)
				{
					isExists = true;
					break;
				}
				else
				{
					queueModel[i].RemoveRow(row);
					//log("removed: " + _alarmInfo);
					rowCount -=1;
				}
			}
			
			// если такой записи еще нет, то добавляем ее в модель
			if (!isExists)
			{
				// добавляем запись в модель
				if (soundString != "" && soundString != ";"/*#27644*/)
				{
					// подготавливаем строку со звуками
					var sSounds = [];
					var soundsArray = soundString.replace(/;+/g, ",").split(",");
					for (let si = 0; si < soundsArray.length; si++)
					{
						var snd = soundsArray[si];

						//	 удаляем лишние пробелы и расширение звукового файла
						snd = snd.trim();
						if (/(.wav)/g.test(snd))
							snd = snd.replace(/(.wav)/g,"");
						
						if (snd != "")
						{
							// проверяем наличие звукового файла
							var soundFile = snd + ".wav";
							var soundPathAbs = File.CombinePath(soundFolderPath, soundFile);
							if (File.Exists(soundPathAbs))
							{
								sSounds.push(snd);
							}
							else
							{
								// если звукового файла нет, то заменяем его на звук по умолчанию
								if (defaultSoundExists)
								{
									sSounds.push("default");
									log("Не найден звуковой файл " +  soundFile + " для события от источника " + alarmInfo.source);
								}
								else
									log("Не найден звуковой файл " +  soundFile + " для события от источника " + alarmInfo.source + " (файл default.wav тоже отсутствует)");
							}
						}
					}
					soundString = sSounds.toString();
				}
				
				// Если звук не назначен и группа НЕ "Прочие", то назначаем файл по умолчанию		
				if (soundString == "" && i < 3)
				{
					if (defaultSoundExists)
						soundString = "default";
					else log("Не найден звуковой файл default.wav для события от источника " + alarmInfo.source);
				}

				// добавляем в очередь звук, только если файл существует
				if (soundString != "" && soundString != ";"/*#27644*/)
				{
					queueModel[i].AddRow();
					var _row = queueModel[i].GetRowCount()-1;
					queueModel[i].SetCellData(_row, 0, alarmInfoStr);
					queueModel[i].SetCellData(_row, 1, soundString);
					queueModel[i].SetCellData(_row, 2, soundRepeats);
					//log("added: " +  alarmInfoStr);
				}
			}
			
			// переходим к следующей строке
			if (canIncRow)
				row += 1;
			
			if (!alarmQueue[i].MoveNext())
				break;
		}
		
		// удаляем все остальные записи
		while (row < rowCount)
		{
			//log("remove: " + queueModel[i].GetCellData(row, 0));
			queueModel[i].RemoveRow(row);
			rowCount -=1;
		}
		
		//queueLength += queueModel[i].GetRowCount();
	}
}
//log("UpdateSoundQueueModel: " + (Date.now() - start) + ", sounds in queue: " + queueLength);]]>
			</body>
		</do>
		<do access-modifier="private" name="ClearSoundQueue" display-name="ClearSoundQueue" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[InitSoundQueue();

//Очистка очередей звука
ApAlarmQueue_1.Clear();
ApAlarmQueue_2.Clear();
ApAlarmQueue_3.Clear();
ApAlarmQueue_4.Clear();

//Очистка моделей
ApAlarmQueue_1.QueueModel.Clear();
ApAlarmQueue_2.QueueModel.Clear();
ApAlarmQueue_3.QueueModel.Clear();
ApAlarmQueue_4.QueueModel.Clear();

//Выключаем воспроизведение
SoundPhrase = "";
SoundPhraseInfo = "";
Sound.Active = false;
isPlayingSounds = false;
]]>
			</body>
		</do>
		<do access-modifier="private" name="OnTableChanged" display-name="OnTableChanged" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[// Обновление статистики
StatePanel.UpdateMessageCount();

// Обновление очереди звуков
UpdateSoundQueueModel();

// Запускаем проигрывание следущего звука
if (!Sound.Active)
	PlayNextSound.Invoke();]]>
			</body>
		</do>
		<do access-modifier="private" name="RemoveDuplicates" display-name="RemoveDuplicates" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[// Удаление дублирующихся сообщений в оперативной таблице
Main_panel.private.DuplicateCheck = false;

// Формируем массив новых событий
var insertedRows = [];
for (let i = first; i <= last; i++)
	insertedRows.push(TableModel_1.GetRowDataAsJson(i));

if (insertedRows.length > 0)
{
	//var start = Date.now();

	var row = 0; // индекс проверяемой строки
	var fromRow = 0; // индекс строки, начиная с которой требуется удаление
	
	// Проходим по таблице, удаляя совпадающие строки
	var firstInsertedRow = first;
	while (row < firstInsertedRow)
	{
		var rowJson = TableModel_1.GetRowDataAsJson(row);

		var indexMatch = insertedRows.indexOf(rowJson);
		if (indexMatch == -1)
		{
			// это событие нужно оставить, а предыдущие удалить
			if (row > fromRow)
			{
				// удаляем строки из таблицы
				var removed = row - fromRow;
				TableModel_1.RemoveRows(fromRow, removed);
				//log("Rows removed from " + fromRow + " to " + row);
				
				// смещаем начальный индекс строки для новых событий
				firstInsertedRow -= removed;

				// после удаления строк индекс необходимо сместить на начало удаленного диапазона
				row = fromRow;
			}

			// переходим к следующей строке и смещаем начало удаляемого диапазона
			row += 1;
			fromRow = row;
		}
		else
		{
			// событие нужно удалить, но мы просто переходим к следующей строке,
			// а удалять будем сразу несколько строк, когда дойдем до неудаляемой строки
			row += 1;
			
			// удаляем из массива новых строк, чтобы дальнейшие проверки выполнялись быстрее
			insertedRows.splice(indexMatch, 1);
		}
	}
	
	// последние неудаленные события
	if (row > fromRow)
	{
		TableModel_1.RemoveRows(fromRow, row - fromRow);
		//log("Finish rows removed from " + fromRow + " to " + row);
	}
	
	//log("RemoveDuplicates: " + (Date.now() - start) + " (rows after removing: " + TableModel_1.GetRowCount() + ")");
}]]>
			</body>
			<param access-modifier="private" name="first" display-name="" uuid="74d3af28-b366-4cc6-8a6e-09efef28fca8" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
			<param access-modifier="private" name="last" display-name="" uuid="3ffe8774-de28-4224-b1b8-ba45dc4ee279" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		</do>
		<object access-modifier="private" name="Sound" display-name="Sound" uuid="8b331fe5-06ea-41c0-b2f5-7432976b4c29" base-type="Sound" base-type-id="e4bc00dd-3f63-4719-874d-83420bce71b5" ver="2">
			<designed target="LoopCount" value="1" ver="2"/>
			<designed target="Volume" value="0.8" ver="2"/>
			<designed target="Path" value="" ver="2"/>
			<designed target="Active" value="false" ver="2"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="AllLoopsPlayed">
				<body kind="om">
					<![CDATA[//DebugTool_1.Log(this.Path + " is played");
Active = false;
PlayNextSound.Invoke();

// сообщаем о завершении проигрывания звука
Main_panel.private.EventParams[0] = this.Path;	
OnSoundPlayed.Invoke();]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="TableChangedTimer" display-name="TableChangedTimer" uuid="d586bbc8-5b3b-45fc-bd00-c2ffe4b4b69c" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="3">
			<designed target="Period" value="1000" ver="3"/>
			<designed target="Active" value="false" ver="3"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
				<body kind="om">
					<![CDATA[Active = false;
OnTableChanged();]]>
				</body>
			</do-on>
		</object>
		<do access-modifier="private" name="PlaySoundForNextAlarm" display-name="PlaySoundForNextAlarm" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[InitSoundQueue();

// Массив моделей очередей звуков
var queueModel = [];
queueModel[0] = ApAlarmQueue_1.QueueModel;
queueModel[1] = ApAlarmQueue_2.QueueModel;
queueModel[2] = ApAlarmQueue_3.QueueModel;
queueModel[3] = ApAlarmQueue_4.QueueModel;

// Массив модельных итераторов
var modelIterator = [];
modelIterator[0] = ApAlarmQueue_1.QueueModel.TableIterator_1;
modelIterator[1] = ApAlarmQueue_2.QueueModel.TableIterator_1;
modelIterator[2] = ApAlarmQueue_3.QueueModel.TableIterator_1;
modelIterator[3] = ApAlarmQueue_4.QueueModel.TableIterator_1;

// Массив параметров
var queueSettings = [];
queueSettings[0] = Main_panel.private.SeverityGroups.Range1;
queueSettings[1] = Main_panel.private.SeverityGroups.Range2;
queueSettings[2] = Main_panel.private.SeverityGroups.Range3;
queueSettings[3] = Main_panel.private.SeverityGroups.Range4;

/*
	Порядок проигрывания звуков определяется группой: Особо важные, Важные, Значительные, Прочие.
	Количество повторов одного звука настраивается. Особо важные всегда проигрываются циклически.
	Если у группы задан приоритет, то к циклическому проигрыванию звуков добавляется проигрывание
	приоритетного звука после каждых P циклических звуков, где P - приоритет проигрывания.
*/

for (let i = 0; i < queueSettings.length; i++)
{
	// пропускаем группы с отключенным звуком
	if (!queueSettings[i].SoundEnable)
		continue;
		
	// пропускаем пустые группы
	if (queueModel[i].GetRowCount() == 0)
		continue;
		
	// Флаг циклического проигрывания (при этом не учитывается количество повторов)
	var cycleGroup = queueSettings[i].nSoundRepeats == 0;
		
	// предположим, что есть звук для проигрывания
	var soundExists = true;
	
	// звуки циклической группы должны быть пропущены, если еще есть звуки в группах с приоритетом
	if (cycleGroup)
	{
		for (let j = i+1; j < queueSettings.length; j++)
		{
			if (queueSettings[j].SoundPriority > 0 && queueModel[j].GetRowCount() > 0)
			{
				//	признак того, что в следующей группе есть звуки для проигрывания
				var needPlaySound = false;
				modelIterator[j].FirstSelected();
				while (!modelIterator[j].End())
				{
					// если есть непроигранный звук или его требуется повторить
					if (!queueModel[j].GetCellData(modelIterator[j].CurrentRow, 3) || queueModel[j].GetCellData(modelIterator[j].CurrentRow, 2) > 0)
					{
						needPlaySound = true;
						break;
					}
					modelIterator[j].Next();
				}
				if (needPlaySound)
				{
					//log("есть звуки в группе " + j + " с приоритетом " + queueSettings[j].SoundPriority);
					// не будем пропускать циклические звуки, пока не увеличим счетчик до приоритета
					if (queueSettings[j].PriorityCount >= queueSettings[j].SoundPriority)
					{
						// после повторений, равных приоритету следующей группы, пропустим циклическую
						// сбросив флаг наличия звуков, что приведет к началу проигрывания следующей группы
						//log("пропуск группы " + i + " из-за группы " + j);
						queueSettings[j].PriorityCount = 0;
						soundExists = false;
						break;
					}
					else
						queueSettings[j].PriorityCount += 1;
				}
			}
		}
	}

	while(soundExists)
	{	
		soundExists = false;
	
		modelIterator[i].FirstSelected();
		while (!modelIterator[i].End())
		{
			// Текущая строка итератора
			var row = modelIterator[i].CurrentRow;
			
			// Пропускаем проигравшие звуки
			if (!queueModel[i].GetCellData(row, 3))
			{
				// Если текущая группа циклическая или счётчик повторов больше 0
				if (cycleGroup || queueModel[i].GetCellData(row, 2) > 0)
				{
					// строка звуков
					var soundString = queueModel[i].GetCellData(row, 1);
					
					if (!cycleGroup)
					{
						// уменьшаем счётчик повторов
						var repeatCount = queueModel[i].GetCellData(row, 2) - 1;
						queueModel[i].SetCellData(row, 2, repeatCount);
					}

					// устанавливаем флаг того, что звук уже проигрывался
					// по окончании проигрывания всех звуков одной группы этот признак будет сброшен
					queueModel[i].SetCellData(row, 3, true);

					// запускаем проигрывание звука и выходим
					//log("проигрывание звука из группы " + i + ": " + soundString);
					SoundPhrase = soundString;
					SoundPhraseInfo = queueModel[i].GetCellData(row, 0);
					isPlayingSounds = true;
					PlayNextSound.Invoke();
					return;
				}
			}
		
			modelIterator[i].Next();
		}

		// все звуки группы были проиграны, требуется сбросить признак проигрывания для повтора				
		modelIterator[i].FirstSelected();
		while (!modelIterator[i].End())
		{
			var row = modelIterator[i].CurrentRow;

			// еще раз будем играть циклические и у которых не закончились повторы			
			if (cycleGroup || queueModel[i].GetCellData(row, 2) > 0)
			{
				queueModel[i].SetCellData(row, 3, false);
				
				// для повтора взводим флаг наличия звуков
				//log("нужно повторить звук группы " + i + ": " + queueModel[i].GetCellData(row, 1));
				soundExists = true;
			}
			modelIterator[i].Next();
		}
	}
}

// Если проверили очереди звуков всех групп и не вышли из метода раньше, значит больше не осталось звуков для проигрывания.
isPlayingSounds = false;]]>
			</body>
		</do>
		<object access-modifier="private" name="soundFolder" display-name="soundFolder" uuid="7c978b7f-9e8b-4caa-8bee-54a0bc7fe00c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<object access-modifier="private" name="soundFolderPath" display-name="soundFolderPath" uuid="ab86f780-d642-413d-a219-e0d263ee2829" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		<do access-modifier="private" name="ReloadSoundQueue" display-name="ReloadSoundQueue" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[ApAlarmQueue_1.Reload();
ApAlarmQueue_2.Reload();
ApAlarmQueue_3.Reload();
ApAlarmQueue_4.Reload();]]>
			</body>
		</do>
		<object access-modifier="private" name="isPlayingSounds" display-name="isPlayingSounds" uuid="1983b51d-5092-40de-8750-3faf5f5b0e91" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="4">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
				<body kind="om">
					<![CDATA[if (value != oldValue)
{
	oldValue = value;
	
	if (value)
		OnPlayingSounds.Invoke();
	else OnFinishedPlayingSounds.Invoke();
}]]>
				</body>
			</do-on>
			<object access-modifier="private" name="oldValue" display-name="oldValue" uuid="620e73bc-6a50-4fce-a645-3d49672ff025" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="4"/>
		</object>
		<object access-modifier="private" name="PlayNextSound" display-name="PlayNextSound" uuid="d6c8ed3a-363c-4390-b162-6fae038dd951" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" ver="4">
			<designed target="Enabled" value="true" ver="4"/>
			<designed target="InvokeTrigger" value="false" ver="4"/>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Invoked">
				<body kind="javascript">
					<![CDATA[// Воспроизведение следующего звука в очереди
if (SoundPhrase != "")
{
	//log("Play next sound from SoundQueue: " + SoundQueue)
	
	//Преобразуем очередь звуков в элементы массива	
	let sounds = SoundPhrase.split(","); 
	
	var fileName = sounds[0]+".wav";	
	var soundPath = File.CombinePath(soundFolder, fileName);
	
	// если звукового файла нет, то заменяем его на звук по умолчанию
	var soundPathAbs = File.CombinePath(soundFolderPath, fileName);
	if (!File.Exists(soundPathAbs))
	{
		soundPath = File.CombinePath(soundFolder, "default.wav");
		soundPathAbs = File.CombinePath(soundFolderPath, "default.wav");
	}
	
	sounds.shift();// Удаляем первый элемент
	SoundPhrase = sounds.toString();// Обновляем очередь воспроизведения
	
	Sound.Path = soundPath;
	Sound.Active = true;
	// После запуска проигрывания звука выходим из функции. По окончании проигрывания звука эта функция будет вызвана снова.
}
else
{
	// Если больше звуков в очереди нет, то пробуем играть звук следующего события
	PlaySoundForNextAlarm();
}]]>
				</body>
			</do-on>
		</object>
	</object>
	<object access-modifier="private" name="Main_tables_Historical" display-name="Main_tables_Historical" uuid="3fa52b88-b5d1-4d9f-86e9-9fbcd561ba4b" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="2">
		<designed target="X" value="-84" ver="2"/>
		<designed target="Y" value="109.5" ver="2"/>
		<designed target="Rotation" value="0" ver="2"/>
		<designed target="Scale" value="1" ver="2"/>
		<designed target="Visible" value="true" ver="2"/>
		<designed target="Enabled" value="true" ver="2"/>
		<designed target="Tooltip" value="" ver="2"/>
		<designed target="Width" value="1000" ver="2"/>
		<designed target="Height" value="375" ver="2"/>
		<designed target="RoundingRadius" value="0" ver="2"/>
		<designed target="PenColor" value="4278190080" ver="2"/>
		<designed target="PenStyle" value="1" ver="2"/>
		<designed target="PenWidth" value="1" ver="2"/>
		<designed target="BrushColor" value="4278190080" ver="2"/>
		<designed target="BrushStyle" value="0" ver="2"/>
		<object access-modifier="private" name="StatusBar" display-name="StatusBar" uuid="52ece463-c447-4331-b214-539188b2ab50" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="3">
			<designed target="X" value="-1" ver="3"/>
			<designed target="Y" value="0" ver="3"/>
			<designed target="ZValue" value="0" ver="3"/>
			<designed target="Rotation" value="0" ver="3"/>
			<designed target="Scale" value="1" ver="3"/>
			<designed target="Visible" value="false" ver="3"/>
			<designed target="Opacity" value="1" ver="3"/>
			<designed target="Enabled" value="true" ver="3"/>
			<designed target="Tooltip" value="" ver="3"/>
			<designed target="Width" value="1000" ver="3"/>
			<designed target="Height" value="21.2264" ver="3"/>
			<designed target="RoundingRadius" value="0" ver="3"/>
			<designed target="PenColor" value="4278190080" ver="3"/>
			<designed target="PenStyle" value="1" ver="3"/>
			<designed target="PenWidth" value="1" ver="3"/>
			<designed target="BrushColor" value="0xff00ff7f" ver="3"/>
			<designed target="BrushStyle" value="1" ver="3"/>
			<object access-modifier="private" name="LayoutWeight_1" display-name="LayoutWeight_1" uuid="615e86a3-a9d4-4d42-ba7f-c61f6d42ab15" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="2">
				<designed target="Weight" value="0" ver="2"/>
			</object>
			<object access-modifier="private" name="Message" display-name="Message" uuid="e1d9b8ae-737d-4ea5-a30a-921a056fb60c" base-type="Text" base-type-id="21d59f8d-2ca4-4592-92ca-b4dc48992a0f" ver="3">
				<designed target="X" value="10" ver="3"/>
				<designed target="Y" value="0" ver="3"/>
				<designed target="ZValue" value="0" ver="3"/>
				<designed target="Rotation" value="0" ver="3"/>
				<designed target="Scale" value="1" ver="3"/>
				<designed target="Visible" value="true" ver="3"/>
				<designed target="Opacity" value="1" ver="3"/>
				<designed target="Enabled" value="true" ver="3"/>
				<designed target="Tooltip" value="" ver="3"/>
				<designed target="Width" value="1000" ver="3"/>
				<designed target="Height" value="21.2264" ver="3"/>
				<designed target="Text" value="Подготовка данных..." ver="3"/>
				<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="3"/>
				<designed target="FontColor" value="4278190080" ver="3"/>
				<designed target="TextAlignment" value="129" ver="3"/>
			</object>
			<object access-modifier="private" name="LinearLayout_1" display-name="LinearLayout_1" uuid="85f6f60a-2663-4231-8e51-42614d430631" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="3">
				<designed target="Orientation" value="1" ver="3"/>
				<designed target="Gap" value="5" ver="3"/>
			</object>
			<object access-modifier="private" name="Loading" display-name="Loading" uuid="a75e2349-d6cf-4129-9b44-9317152099b8" base-type="Timer" base-type-id="72ba7cd4-549e-41f2-923c-2431b91f349a" ver="3">
				<designed target="Period" value="500" ver="3"/>
				<designed target="Active" value="false" ver="3"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="OnTimer">
					<body kind="javascript">
						<![CDATA[// Формирование текста "Подготовка данных..."
var text = Message.Text;

var endStr = text.slice(text.length - 3, text.length);

if (endStr == "...") text = text.slice(0, text.length - 3);
else text += ".";

Message.Text = text;]]>
					</body>
				</do-on>
				<do-trace access-modifier="private" target="Active" ver="5">
					<body>
						<![CDATA[Main_panel.private.LoadSaveBusy.LoadingHistory]]>
					</body>
				</do-trace>
			</object>
			<do access-modifier="private" name="SetVisible" display-name="SetVisible" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
				<body kind="om">
					<![CDATA[// Задание размера и видимости статус-бара
if (!Main_panel.private.LoadSaveBusy.LoadingHistory || ActiveMode == 0) StatusBar.LayoutWeight_1.Weight = 0;
else StatusBar.LayoutWeight_1.Weight = Math.Ceil(20/Main_tables_Historical.Height*100);

Main_tables_Historical.Table_History_mode.LayoutWeight_1.Weight = 100 - StatusBar.LayoutWeight_1.Weight;

]]>
				</body>
			</do>
			<do-trace access-modifier="private" target="Visible" ver="5">
				<body>
					<![CDATA[Main_panel.private.LoadSaveBusy.LoadingHistory]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="Table_History_mode" display-name="Table_History_mode" uuid="fc389d0b-999f-4e7c-a1d9-12a9a76b919c" base-type="Table" base-type-id="c65ff4dc-f22b-47d3-9333-72c4e4e5f662" ver="2">
			<designed target="X" value="0" ver="2"/>
			<designed target="Y" value="54" ver="2"/>
			<designed target="Rotation" value="0" ver="2"/>
			<designed target="Scale" value="1" ver="2"/>
			<designed target="Visible" value="false" ver="2"/>
			<designed target="Enabled" value="true" ver="2"/>
			<designed target="Width" value="1000" ver="2"/>
			<designed target="Height" value="354" ver="2"/>
			<designed target="RowHeight" value="25" ver="2"/>
			<designed target="SelectionBehavior" value="1" ver="2"/>
			<designed target="SelectionMode" value="3" ver="2"/>
			<designed target="RowOrder" value="1" ver="2"/>
			<object access-modifier="private" name="Columns" display-name="Columns" uuid="69776a82-1702-4f4d-ba0a-3f93fa697896" base-type="TableColumn" base-type-id="109c05c5-8dcf-4a8f-aedd-5bb547cca2d4" ver="2" cardinal="28">
				<designed target="Title" value="" ver="2"/>
				<designed target="Description" value="" ver="2"/>
				<designed target="Id" value="" ver="2"/>
				<designed target="BackgroundColor" value="0xfff0f0f0" ver="2"/>
				<designed target="ForegroundColor" value="0xff000000" ver="2"/>
				<designed target="Font" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="2"/>
				<designed target="TitleBackgroundColor" value="0xffffffff" ver="2"/>
				<designed target="TitleForegroundColor" value="0xff000000" ver="2"/>
				<designed target="TitleFont" value="Tahoma,8,-1,5,50,0,0,0,0,0,Обычный" ver="2"/>
				<designed target="Width" value="145" ver="2"/>
				<designed target="WidthResizeMode" value="0" ver="2"/>
				<designed target="Hidden" value="false" ver="2"/>
				<designed target="NumberFormat" value="%d" ver="2"/>
				<designed target="TimeFormat" value="dd.MM.yyyy hh:mm:ss.zzz" ver="2"/>
				<designed target="Emptiable" value="true" ver="2"/>
				<designed target="TextAlignment" value="129" ver="2"/>
				<designed target="JsonFilter" value="" ver="2"/>
				<designed target="SortingEnabled" value="false" ver="2"/>
				<designed target="SortOrder" value="0" ver="2"/>
				<designed target="SortPriority" value="0" ver="2"/>
				<designed target="WordWrap" value="true" ver="3"/>
				<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="WidthChanged">
					<body kind="om">
						<![CDATA[Main_panel.private.TableView.viewChanged = true;]]>
					</body>
				</do-on>
				<do-trace access-modifier="private" target="WordWrap" ver="5">
					<body>
						<![CDATA[LineTransfer]]>
					</body>
				</do-trace>
				<designed target="TitleTextAlignment" value="132" ver="3"/>
				<do-trace access-modifier="private" target="TimeFormat" ver="5">
					<body>
						<![CDATA[(ShowMilliseconds)?("dd.MM.yyyy hh:mm:ss.zzz"):("dd.MM.yyyy hh:mm:ss")]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="MouseTitleClick">
					<body kind="om">
						<![CDATA[Main_panel.private.TableView.SwitchSorting(Id, SortingEnabled, SortOrder);]]>
					</body>
				</do-on>
				<designed target="SortMode" value="0" ver="4"/>
				<designed target="ColumnOwnId" value="" ver="4"/>
				<do-trace access-modifier="private" target="TitleBackgroundColor" ver="5">
					<body>
						<![CDATA[pTheme.BackgroundColor]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="TitleForegroundColor" ver="5">
					<body>
						<![CDATA[pTheme.ForegroundColor]]>
					</body>
				</do-trace>
				<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="MouseRightTitleClick">
					<body kind="om">
						<![CDATA[Main_panel.private.OpenColumnsMenu(ScreenX(MouseX, MouseY), ScreenY(MouseX, MouseY));]]>
					</body>
				</do-on>
				<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="MouseClick">
					<body kind="om">
						<![CDATA[if (Id == Main_panel.private.TableView.Static.Column_Source.Id)
{
	//Запрос objectId
	end: bool = false;
	if (AllowActionInSourceColumn)
	{
		TablePersistentIterator_1.FirstSelectedRow();
		while (!end)
		{
			if (TablePersistentIterator_1.GetStatus() == 0)
			{
				objectId = Variant.ToUint4(TablePersistentIterator_1.GetData(Main_panel.private.TableView.Static.Column_ObjectId.GetIndex()),0);
			}
			end = !TablePersistentIterator_1.HasNext();
			TablePersistentIterator_1.Next();
		}
		TablePersistentIterator_1.Close();
	}
}]]>
					</body>
				</do-on>
			</object>
			<do-trace access-modifier="private" target="Visible" ver="5">
				<body>
					<![CDATA[(ActiveMode==1)?true:false]]>
				</body>
			</do-trace>
			<designed target="LatestRowTracking" value="false" ver="2"/>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="SelectionChanged">
				<body kind="javascript">
					<![CDATA[//Выделение строки
if (JSON.parse(GetSelectedRows()) == "") SetSelectedRows("[0]");

//Если таблица пустая - скрываем кнопки
Main_panel.private.HistTableEmpty.Update();
]]>
				</body>
			</do-on>
			<designed target="HeaderHeight" value="23" ver="3"/>
			<designed target="HeaderVisible" value="false" ver="3"/>
			<init target="TableModel" ver="5" ref="TableModel_1"/>
			<do-trace access-modifier="private" target="HeaderVisible" ver="5">
				<body>
					<![CDATA[!HideColumnTitle]]>
				</body>
			</do-trace>
			<object access-modifier="private" name="DragNDrop_1" display-name="DragNDrop_1" uuid="d9be1e49-b714-489d-8679-b5f8306095e1" base-type="DragNDrop" base-type-id="c4ddb32f-3653-44c8-be57-3a595e10c2fb" ver="3">
				<designed target="DragEnabled" value="true" ver="3"/>
				<designed target="DropEnabled" value="true" ver="3"/>
				<designed target="Image" value="." ver="3"/>
			</object>
			<object access-modifier="private" name="TablePersistentIterator_1" display-name="TablePersistentIterator_1" uuid="02eaf9b3-cbf5-4154-8968-19e0d7b21bc9" base-type="TablePersistentIterator" base-type-id="3daa2363-e163-4d9c-ad69-cbcf416d89bf" ver="3">
				<do access-modifier="private" name="GetDataUint8AsStr" display-name="GetDataUint8AsStr" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
					<body kind="om">
						<![CDATA[return String.ToString(Variant.ToUint8(GetData(col), 0));]]>
					</body>
					<param access-modifier="private" name="col" display-name="" uuid="a0ffb91e-5703-4236-b959-4e9c8ad325b0" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="5"/>
				</do>
			</object>
			<object access-modifier="private" name="TableDecorator_1" display-name="TableDecorator_1" uuid="a29d6394-e873-4d43-b4b7-1e318fcc3f46" base-type="TableDecorator" base-type-id="2ff6a2d7-9573-4060-bfea-29c63d61b079" ver="3">
				<designed target="JsonDecorator" value="" ver="3"/>
			</object>
			<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="MouseRelease">
				<body kind="om">
					<![CDATA[mousePress = false;
if (button == 2/*right*/) Main_panel.private.OpenContextMenu(ScreenX(MouseX, MouseY), ScreenY(MouseX, MouseY));]]>
				</body>
			</do-on>
			<designed target="SelectionOverlayEnabled" value="false" ver="3"/>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="MousePress">
				<body kind="om">
					<![CDATA[mousePress = true;
selectedRow = row;
selectedColumn = column;
SelectionMode = Main_panel.private.MultiSelect; // Режим выделения нескольких строк]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="MouseMove">
				<body kind="javascript">
					<![CDATA[//Drag&Drop. Формирование JSON-строки формата {"data":[{"tag":"some.tag1"},{"tag":"some.tag2"}]}
//На данном этапе только для 1 тега
var sendObj = {};
var end;
sendObj.data = [];

if (mousePress && selectedColumn == Main_panel.private.TableView.Static.Column_Source.GetIndex()) {
	SelectionMode = 1; // Режим выделения только одной строки
	if (Math.abs(diffX - mouseX) > 1 || Math.abs(diffY - mouseY) > 1) {
		TablePersistentIterator_1.FirstSelectedRow();
		while	(!end) {
			if (TablePersistentIterator_1.GetStatus() == 0 && TablePersistentIterator_1.GetRow() == selectedRow) {
				sendObj.data.push({"tag":TablePersistentIterator_1.GetData(Main_panel.private.TableView.Static.Column_SystemSource.GetIndex())});
				DragNDrop_1.SetText(JSON.stringify(sendObj));
				DragNDrop_1.DoDragDrop();
			}
			end = !TablePersistentIterator_1.HasNext();
			TablePersistentIterator_1.Next();
		}
		TablePersistentIterator_1.Close();		
		mousePress = false;
	}
} else {
	diffX = mouseX;
	diffY = mouseY;
}
]]>
				</body>
			</do-on>
			<object access-modifier="private" name="LayoutWeight_1" display-name="LayoutWeight_1" uuid="8ad50995-27dc-46fa-ab17-3dc77173d763" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="3" cardinal="1">
				<designed target="Weight" value="100" ver="3"/>
			</object>
			<designed target="HorizontalScrollMode" value="1" ver="4"/>
			<designed target="DelayedSortingEnabled" value="false" ver="4"/>
			<designed target="VerticalScrollMode" value="0" ver="4"/>
			<designed target="HorizontalScrollBarPolicy" value="0" ver="4"/>
			<designed target="VerticalScrollBarPolicy" value="0" ver="4"/>
			<do-trace access-modifier="private" target="HorizontalScrollBarPolicy" ver="5">
				<body>
					<![CDATA[here.HorizontalScrollBarPolicy]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="VerticalScrollBarPolicy" ver="5">
				<body>
					<![CDATA[here.VerticalScrollBarPolicy]]>
				</body>
			</do-trace>
			<designed target="BackgroundColor" value="0xffffffff" ver="4"/>
			<designed target="FrameColor" value="0xff5f5f5f" ver="4"/>
			<designed target="GridColor" value="0xffd8d8d8" ver="4"/>
			<do-trace access-modifier="private" target="FrameColor" ver="5">
				<body>
					<![CDATA[pTheme.BorderColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="BackgroundColor" ver="5">
				<body>
					<![CDATA[pTheme.EditorBrushColor]]>
				</body>
			</do-trace>
			<do-trace access-modifier="private" target="SelectionMode" ver="5">
				<body>
					<![CDATA[Main_panel.private.MultiSelect]]>
				</body>
			</do-trace>
		</object>
		<object access-modifier="private" name="LayoutWeight_1" display-name="LayoutWeight_1" uuid="2e173636-6e00-4279-be63-b9fb0ce2a921" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="2">
			<designed target="Weight" value="540" ver="2"/>
		</object>
		<object access-modifier="private" name="LinearLayout_1" display-name="LinearLayout_1" uuid="bd9321fb-f4b0-466f-9306-f767b45a91aa" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="2">
			<designed target="Orientation" value="2" ver="2"/>
			<designed target="Gap" value="0" ver="2"/>
		</object>
		<object access-modifier="private" name="TableModel_1" display-name="TableModel_1" uuid="25193ad1-a29e-421b-b65d-accb77c2dada" base-type="TableModel" base-type-id="32b2875b-ee3e-454d-bcbb-40806a49273c" ver="3">
			<designed target="Frozen" value="false" ver="3"/>
			<designed target="MaxRowCount" value="2147483647" ver="3"/>
			<object access-modifier="private" name="ApAlarmQuery_1" display-name="ApAlarmQuery_1" uuid="da9c8266-4e27-45d1-8799-3a43cf656985" base-type="ApAlarmQuery" base-type-id="f66d4d41-8e9d-4eee-8b83-702143b5768d" ver="2">
				<designed target="Mode" value="3" ver="2"/>
				<designed target="HistoricalRangeStart" value="0" ver="2"/>
				<designed target="HistoricalRangeEnd" value="0" ver="2"/>
				<designed target="Active" value="true" ver="2"/>
				<init target="Source" ver="5" ref="ApSource"/>
				<designed target="RemoveAckedInactive" value="false" ver="2"/>
				<designed target="RefreshAtStart" value="false" ver="2"/>
				<designed target="HistoryPreloadInterval" value="0" ver="3"/>
				<designed target="Filter" value="" ver="3"/>
				<designed target="HistoricalFilter" value="" ver="3"/>
				<designed target="HistoryExpandInterval" value="0" ver="5"/>
				<designed target="HistoricalEventsChronology" value="0" ver="5"/>
				<do-trace access-modifier="private" target="HistoricalEventsChronology" ver="5">
					<body>
						<![CDATA[EventsChronology]]>
					</body>
				</do-trace>
				<do-trace access-modifier="private" target="HistoryExpandInterval" ver="5">
					<body>
						<![CDATA[ExtensionInterval + 1]]>
					</body>
				</do-trace>
				<designed target="MergeMode" value="0" ver="5"/>
				<do-trace access-modifier="private" target="MergeMode" ver="5">
					<body>
						<![CDATA[TypeConvert.ToUint1(MergeEvents == 0 ? 0 : 1)]]>
					</body>
				</do-trace>
				<object access-modifier="private" name="status" display-name="status" uuid="c7d842b9-b922-4156-aa9f-806a8334e7c2" base-type="uint1" base-type-id="f73099bc-ee13-42cf-82bb-87368b826707" ver="5" description="" cardinal="1"/>
				<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="StatusChanged">
					<body kind="om">
						<![CDATA[status = statusCode;]]>
					</body>
				</do-on>
			</object>
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ReadFinished">
				<body kind="om">
					<![CDATA[Table_History_mode.SetSelectedRows("[0]");
Main_panel.private.LoadSaveBusy.LoadingHistory = false;
DataAggregator_1.CheckForRun(true);]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_2" display-name="Handler_2" ver="5" event="RowsRemoved">
				<body kind="om">
					<![CDATA[//DebugTool_1.Log("Rows removed from " + String.ToString(first) + " to " + String.ToString(last));
StatePanel.UpdateMessageCount();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_3" display-name="Handler_3" ver="5" event="RowsInserted">
				<body kind="om">
					<![CDATA[//DebugTool_1.Log("Rows inserted from " + String.ToString(first) + " to " + String.ToString(last));
StatePanel.UpdateMessageCount();]]>
				</body>
			</do-on>
			<object access-modifier="private" name="TableIterator_1" display-name="TableIterator_1" uuid="3897b958-2f98-49ea-a73a-9a4000e9ba68" base-type="TableIterator" base-type-id="b368f2dc-9de9-47fc-b7ae-1d9c28047eba" ver="4">
				<designed target="CurrentRow" value="0" ver="4"/>
			</object>
			<object access-modifier="private" name="savedFilePath" display-name="savedFilePath" uuid="add6f5e8-4922-4977-bea0-4b59bb967051" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<do-on access-modifier="private" name="Handler_4" display-name="Handler_4" ver="5" event="GetContentAsJsonFinished">
				<body kind="javascript">
					<![CDATA[try
{
	File.WriteTextFile(savedFilePath, data);
	Main_panel.private.EventParams[4] = "";
	Main_panel.private.ShowSaveDialog.Saved();
}
catch(err)
{
	Main_panel.private.EventParams[4] = "Не удалось сохранить файл:\n"  + savedFilePath + "\n" + err.message;
	Main_panel.private.ShowSaveDialog.Saved();
}]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_5" display-name="Handler_5" ver="5" event="GetContentAsJsonFailed">
				<body kind="om">
					<![CDATA[Main_panel.private.EventParams[4] = "Не удалось получить содержимое таблицы";
Main_panel.private.ShowSaveDialog.Fin();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_6" display-name="Handler_6" ver="5" event="SetContentAsJsonFailed">
				<body kind="om">
					<![CDATA[Main_panel.private.EventParams[4] = "Не удалось загрузить содержимое таблицы";
Main_panel.private.ShowOpenDialog.Fin();]]>
				</body>
			</do-on>
			<do-on access-modifier="private" name="Handler_7" display-name="Handler_7" ver="5" event="SetContentAsJsonFinished">
				<body kind="om">
					<![CDATA[Main_panel.private.ShowOpenDialog.Fin();]]>
				</body>
			</do-on>
			<object access-modifier="private" name="openedFilePath" display-name="openedFilePath" uuid="e46e424d-da1e-468e-b3b6-1b3c3ccdde9d" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
			<object access-modifier="private" name="DataAggregator_1" display-name="DataAggregator_1" uuid="ded8f7ba-bb98-4032-943e-6a51d84eec7f" base-type="DataAggregator" base-type-id="7d485f82-e1cb-4cab-8a7c-6cc9febb2948" ver="5" description="" cardinal="1">
				<designed target="Query" value="" ver="5"/>
				<designed target="NotificationInterval" value="1000" ver="5"/>
				<designed target="FilterUpdateInterval" value="1000" ver="5"/>
				<init target="InputRowsetProvider" ver="5" ref="ApAlarmQuery_1"/>
				<object access-modifier="private" name="State" display-name="State" uuid="c933e3f2-b88f-4452-badf-cf909f8199b8" base-type="int1" base-type-id="756a0a23-7e63-4a13-8a35-e8a38909e5ed" ver="5" description="" cardinal="1"/>
				<object access-modifier="private" name="LastFilterStr" display-name="LastFilterStr" uuid="3fdef4bc-6201-4909-ba2f-859819bbb4ba" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="5" description="" cardinal="1"/>
				<do access-modifier="private" name="CheckForRun" display-name="CheckForRun" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
					<body kind="javascript">
						<![CDATA[var filter = StatePanel.GetViewFilterOn() ? StatePanel.ViewFilterStr : "";
if (isRequest==false && LastFilterStr==filter || DisplaySeverityStatistics==false)
	return;
LastFilterStr = filter;
DataAggregator_1.Reset();
if (openedFilePath!="")
	return;
{//init query
	var query = {aggregate:[]}
	for (let i = 1; i <= 1000; i++)
		query.aggregate.push(JSON.parse("{\""+i+"\":{\"count\":{\"condition\":{\"severity\":"+i+"}}}}"));
	if (filter != "")
		query.condition = JSON.parse(filter);
	DataAggregator_1.Query = JSON.stringify(query);
}
if (ApAlarmQuery_1.status>0)//#29355 агрегатор ругается если предварительно не сделан запрос
	DataAggregator_1.Execute();]]>
					</body>
					<param access-modifier="private" name="isRequest" display-name="" uuid="ff0de7cf-d886-47f5-b809-5438b0052618" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="5"/>
				</do>
			</object>
		</object>
		<object access-modifier="private" name="diffX" display-name="diffX" uuid="d15fceba-7578-4185-91fd-0a6231fd185a" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<object access-modifier="private" name="diffY" display-name="diffY" uuid="143c7f45-48d7-476c-bebb-43c3b462a895" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<object access-modifier="private" name="mousePress" display-name="mousePress" uuid="20e5fe77-7c80-40be-801b-eab66d020c59" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
		<object access-modifier="private" name="selectedRow" display-name="selectedRow" uuid="3a3da025-d075-4356-8103-9fba4b3e83bf" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<object access-modifier="private" name="selectedColumn" display-name="selectedColumn" uuid="bea6be97-d676-4da5-bb24-ec4e8b4f8cb0" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="3"/>
		<designed target="ZValue" value="0" ver="3"/>
		<designed target="Opacity" value="1" ver="3"/>
		<object access-modifier="private" name="sizeChange" display-name="sizeChange" uuid="d4326900-d695-4139-91b6-b23ca8573140" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
		<do access-modifier="private" name="SetRequestFilter" display-name="SetRequestFilter" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<param access-modifier="private" name="filter" display-name="" uuid="6250d0c9-c77a-46bf-a2ce-53e36bfab5d4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
			<body kind="om">
				<![CDATA[Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalFilter = filter;
RequestFilter = filter;]]>
			</body>
		</do>
		<object access-modifier="private" name="RequestFilter" display-name="RequestFilter" uuid="fe798ec6-5a08-4987-8d78-7c3a7e3328a4" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="4"/>
		<do access-modifier="private" name="LoadFromFile" display-name="LoadFromFile" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[try
{
	var data = File.ReadTextFile(filePath);
	TableModel_1.filePath = filePath;
	TableModel_1.SetContentAsJson(data);
}
catch(err)
{
	Main_panel.private.ShowError.message = "Не удалось загрузить из "  + filePath + ": " + err.message;
	Main_panel.private.ShowError.Invoke();
}]]>
			</body>
			<param access-modifier="private" name="filePath" display-name="" uuid="5797a95d-4fdb-46a9-a86e-1076a8f1a1d0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		</do>
	</object>
	<object access-modifier="private" name="StatePanel" display-name="StatePanel" uuid="f1e1afa8-7f57-4b77-a4c8-4653f1599d23" base-type="Rectangle" base-type-id="15726dc3-881e-4d8d-b0fa-a8f8237f08ca" ver="3">
		<designed target="X" value="0" ver="3"/>
		<designed target="Y" value="575" ver="3"/>
		<designed target="Rotation" value="0" ver="3"/>
		<designed target="Scale" value="1" ver="3"/>
		<designed target="Visible" value="false" ver="3"/>
		<designed target="Enabled" value="true" ver="3"/>
		<designed target="Tooltip" value="" ver="3"/>
		<designed target="Width" value="1000" ver="3"/>
		<designed target="Height" value="25" ver="3"/>
		<designed target="RoundingRadius" value="0" ver="3"/>
		<designed target="PenColor" value="4278190080" ver="3"/>
		<designed target="PenStyle" value="0" ver="3"/>
		<designed target="PenWidth" value="1" ver="3"/>
		<designed target="BrushColor" value="4278190080" ver="3"/>
		<designed target="BrushStyle" value="0" ver="3"/>
		<do access-modifier="private" name="ViewFilterStateChange" display-name="ViewFilterStateChange" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="javascript">
				<![CDATA[//Определяем состояние фильтра отображения, формируем строку общего фильтра отображения
var TableColumn=[];
var filter = false; // Флаг установленного фильтра
var commonFilter = {}; // Общий фильтр для всех столбцов
commonFilter['AND'] = []; // Все столбца объединяются по И
var jsonStr = ""; // Фильтр после парсинга
var columnId = ""; // Текущее название столбца

for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
		TableColumn.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);

for (let i = 0; i < TableColumn.length; i++)
{	
	jsonStr =  TableColumn[i].JsonFilter;
	columnId = TableColumn[i].Id;
	if (jsonStr != "")
	{
		jsonStr  = StatePanel.ParseJSONViewFilter(jsonStr, columnId);
		// Формирование общей строки фильтра
		commonFilter['AND'].push(JSON.parse(jsonStr));
		//commonFilter += (commonFilter == "")?(jsonStr):(") AND (" + jsonStr);
		filter = true;
	}
}
if (Main_panel.private.ViewFilter.JsonFilter.used_filters != "")
	filter = true;//#26760 даже пустой предустановленный фильтр должен зажигать лампочку в строке состояния
// если установлен фильтр одного столбца
if (commonFilter['AND'].length == 1)
	commonFilter = commonFilter['AND'][0];
else if (commonFilter['AND'].length == 0)
	commonFilter = {};

// Наличие фильтра подписки
SubscriptionFilterON = Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Filter != "";

ViewFilterStr = JSON.stringify(commonFilter);
ViewFilterON = filter;
Main_tables_Historical.TableModel_1.DataAggregator_1.CheckForRun(false);
]]>
			</body>
		</do>
		<object access-modifier="private" name="ViewFilterON" display-name="ViewFilterON" uuid="b400aabb-aad7-4641-aa90-6b4fd033626b" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
				<body kind="javascript">
					<![CDATA[var tooltip = "";

if (SubscriptionFilterON.Value)
{
	tooltip = "Фильтр подписки: " + Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Filter;
}

if (ViewFilterON.Value)
{
	if (tooltip != "")
		tooltip += ", ";
	if (Main_panel.private.ViewFilter.JsonFilter.used_filters != "")
		tooltip += JSON.parse(Main_panel.private.ViewFilter.JsonFilter.used_filters).join(",") + ": ";
	else
		tooltip += "Фильтр пользователя: ";
	tooltip += ViewFilterStr;
}

ViewFilterTooltip.Value = tooltip;]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="ViewFilterTooltip" display-name="ViewFilterTooltip" uuid="4e03af4d-85e1-486d-bd9e-fdda717ebcdb" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="RequestFilterON" display-name="RequestFilterON" uuid="560b8bf0-fde2-4fd6-b989-313a059b8a51" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
			<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
				<body kind="om">
					<![CDATA[if (value)
	RequestFilterTooltip = "Фильтр пользователя: " + Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalFilter;
else RequestFilterTooltip = "";
]]>
				</body>
			</do-on>
		</object>
		<object access-modifier="private" name="RequestFilterTooltip" display-name="RequestFilterTooltip" uuid="1e520c99-bfe5-4703-af7a-249b6ce01e6e" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="SubscriptionFilterON" display-name="SubscriptionFilterON" uuid="8a58ea63-f3c9-48e2-b7f7-02939e3f26da" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
		<do access-modifier="private" name="ParseJSONViewFilter" display-name="ParseJSONViewFilter" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[//Алгоритм парсинга фильтра столбцов

var signPattern = /([><=]+)/g; // Шаблон операнда (><=)
var columnName = identifier; // Имя столбца

// Преобразование строки в объект
try {
	var jsonObj = JSON.parse(jsonStr); 
} catch (err) {
	return "";
}

// Рекурсивная функция прохода по свойствам объекта. 
// Если свойство объекта есть конечное значение, то считается, что свойство - идентификатор столбца.
function setProp(obj) {
	for (let prop in obj) {
		if (typeof(obj[prop]) == "object") setProp(obj[prop]);
		else if (prop == "data" || prop == "text") {
			obj[`${columnName}`] = obj[prop];
			delete obj[prop];
		}
	}
	return obj;
}

jsonStr = JSON.stringify(setProp(jsonObj));
return jsonStr;]]>
			</body>
			<param access-modifier="private" name="jsonStr" display-name="" uuid="3d018398-617c-48dd-8287-2bb17c70e40f" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
			<param access-modifier="private" name="identifier" display-name="" uuid="799c4289-c3cc-4933-8bcb-06e16b6242f4" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		</do>
		<object access-modifier="private" name="ViewFilterStr" display-name="ViewFilterStr" uuid="ff1234b3-4d0c-4cc7-a593-cdb34448adeb" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		<designed target="ZValue" value="0" ver="4"/>
		<designed target="Opacity" value="1" ver="4"/>
		<do-trace access-modifier="private" target="RequestFilterON" ver="5">
			<body>
				<![CDATA[Main_tables_Historical.RequestFilter != ""]]>
			</body>
		</do-trace>
		<do access-modifier="private" name="UpdateMessageCount" display-name="UpdateMessageCount" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
			<body kind="om">
				<![CDATA[count_view: int4 = 0;
count_total: int4 = 0;
if (ActiveMode==0)
{
	count_view = Main_tables_Operative.Table_Operative_mode.GetRowCount();
	count_total = Main_tables_Operative.TableModel_1.GetRowCount();
}
else
{
	count_view = Main_tables_Historical.Table_History_mode.GetRowCount();
	count_total = Main_tables_Historical.TableModel_1.GetRowCount();
}

messageCount: string = String.ToString(count_view) + " " + GetDeclension(TypeConvert.ToUint4(count_view), "сообщение", "сообщения", "сообщений");
if (count_total != count_view)
	messageCount = messageCount + " из " + String.ToString(count_total);

if (ActiveMode == 1 && Main_tables_Historical.TableModel_1.openedFilePath != "")
	messageCount = messageCount + " (" + Main_tables_Historical.TableModel_1.openedFilePath + ")";

if (ActiveMode == 1 && DisplaySeverityStatistics)
	messageCount = messageCount + ". " + GetSeverityStat();	

if (ActiveMode == 0 && Main_tables_Operative.TableModel_1.ApAlarmQuery_1.ReadingActive)
	messageCount = "Подготовка данных...";

MessageCountText = messageCount;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetDeclension" display-name="GetDeclension" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<param access-modifier="private" name="number" display-name="" uuid="147f1dd3-143c-4afb-9cfd-32a16414c45a" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="4"/>
			<body kind="om">
				<![CDATA[number = number % 100;

if (number >= 11 && number <=19)
	return plural;

i: uint4 = number % 10;
if (i == 1)
	return nominative;
else if (i >= 2 && i <= 4)
	return genitive;
else	return plural;]]>
			</body>
			<param access-modifier="private" name="nominative" display-name="" uuid="1b20bad0-dbc6-464d-bbe3-5e60c2d8fc76" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<param access-modifier="private" name="genitive" display-name="" uuid="12522866-c6f8-431d-a9cb-081d19708c23" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
			<param access-modifier="private" name="plural" display-name="" uuid="122732ed-f70c-4aa3-bfee-e8942eb96e7a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
		</do>
		<object access-modifier="private" name="MessageCountText" display-name="MessageCountText" uuid="125e5dde-0c3a-4551-9cb7-be609e94d57f" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="5" description="" cardinal="1"/>
		<object access-modifier="private" name="LayoutWeight_1" display-name="LayoutWeight_1" uuid="d354d5d6-49ce-4739-95d5-81c4cd902700" base-type="LayoutWeight" base-type-id="8f3d975c-9645-4288-9406-a8dda0527008" ver="2">
			<designed target="Weight" value="0" ver="2"/>
		</object>
		<do access-modifier="private" name="GetSeverityStat" display-name="GetSeverityStat" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
			<body kind="javascript">
				<![CDATA[var text = "";
if (Main_tables_Historical.TableModel_1.DataAggregator_1.State>0 && Main_tables_Historical.TableModel_1.openedFilePath=="")
{
	for (let i = 1; i <= 1000; i++)
	{
		var stat = parseInt(Main_tables_Historical.TableModel_1.DataAggregator_1.GetData(i), 0);
		if (stat > 0)
		{
			if (text.length > 0) text += ", ";
			text += "["+i+": "+stat+"]";
		}
	}
}
if (text.length > 0) text = "Детально [" + Main_panel.private.TableView.Static.Column_Severity.GetTitle() + ": Количество]: " + text;
return text;]]>
			</body>
		</do>
		<do access-modifier="private" name="GetViewFilterOn" display-name="GetViewFilterOn" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
			<body kind="om">
				<![CDATA[return ViewFilterON;]]>
			</body>
		</do>
	</object>
	<object access-modifier="private" name="LinearLayout_1" display-name="LinearLayout_1" uuid="abb184c3-7508-4e72-82a7-7b87f9ff2d07" base-type="LinearLayout" base-type-id="800edd71-7303-408c-890b-8346e98f5718" ver="2">
		<designed target="Orientation" value="2" ver="2"/>
		<designed target="Gap" value="0" ver="2"/>
	</object>
	<object access-modifier="private" name="System_Start" display-name="System_Start" uuid="cd136ffd-157d-4fb0-82df-a83516c89e15" base-type="Initializer" base-type-id="6db89679-9299-4993-ad1a-0d086cd1c7d2" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="Initialized">
			<body kind="om">
				<![CDATA[Main_panel.private.Initializer();
Main_panel.private.func_Operative_mode();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="File" display-name="File" uuid="4075513f-a6d1-4d84-aa31-b1542ec816e5" base-type="FileSystem" base-type-id="34d744f9-7303-4077-a3f7-9c06c0945512" ver="2">
		<designed target="RootPath" value="/" ver="3"/>
	</object>
	<object access-modifier="private" name="Network_1" display-name="Network_1" uuid="8c4569f7-a646-4d03-9d75-f26c01bb950b" base-type="Network" base-type-id="aa841b9c-0610-4150-8495-3bfad7484a73" ver="3"/>
	<object access-modifier="private" name="DebugTool_1" display-name="DebugTool_1" uuid="8d1f6e6d-0691-4fd2-8cd4-bd86d32b7a08" base-type="DebugTool" base-type-id="43946044-139a-43f4-a7b8-19a6074ffc56" ver="2"/>
	<object access-modifier="private" name="AcknowledgmentDoubleClick" display-name="Квитировать события повторным кликом по выделенной строке" uuid="2eae8ae4-70e1-4ecd-ad66-0256c0670895" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
	<object access-modifier="private" name="AcknowledgmentAllVisible" display-name="Квитировать только видимые" uuid="4f1272fb-67af-4cdc-883c-b0495956a889" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
	<object access-modifier="private" name="AllowAckSequence" display-name="Квитировать последовательность событий" uuid="57db8f18-5f0f-496c-a305-aee08bf19011" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="RequestAcknowledgmentComment" display-name="Запрашивать комментарий при квитировании" uuid="07f21067-1b6e-42eb-a103-c1bc96bdf292" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="2"/>
	<object access-modifier="private" name="AllowAddComment" display-name="Разрешить добавлять комментарий" uuid="0c2d2d1f-924e-4e11-922b-a16844611e17" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="WriteComputerNameToComment" display-name="Дописывать название АРМ в комментарий квитирования" uuid="590e27e4-997f-47aa-adad-b613ba08e769" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (value) Main_panel.private.ComputerName = Network_1.ComputerName;
else Main_panel.private.ComputerName = "";]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="AcknowledgmentAvailable" display-name="Доступность функций квитирования" uuid="78b36445-92bd-4c73-a40a-17e46e005ece" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="AckAllAvailable" display-name="Доступность кнопок квитирования всех сообщений" uuid="ebdbc70e-19a8-45a1-bcad-7bbfe14b5815" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="ClearingCurrentEventsAvailable" display-name="Доступность функций очистки" uuid="6149c0af-b1af-4153-b047-ae2718aacc2c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="EditingSettingsAvailable" display-name="Доступность редактирования настроек" uuid="90773b69-8ac3-48fd-a469-f6f5c38a7b2f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="ExportDataAvailability" display-name="Доступность сохранения данных в табличный файл" uuid="3b9329bb-e24e-4396-b98f-5ccfd6488d0e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="FilterAvailable" display-name="Доступность фильтрации" uuid="693496c8-d38f-4efe-a661-579d8ae8d8f2" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="SoundPlaybackManagmentAvailable" display-name="Доступность кнопок управления проигрыванием звуков" uuid="6d6dc076-0245-4cfa-a432-a72454b6b16c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="SnapshotAvailable" display-name="Доступность кнопок функции Снимок" uuid="be020470-d6a9-428f-a8de-def00617d107" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="CurrentEventsAvailable" display-name="Доступность просмотра оперативных событий" uuid="1eb7b08f-a593-458f-b8a0-f4798e8ab8ab" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="EventHistoryAvailable" display-name="Доступность просмотра истории событий" uuid="befd4230-0478-4a86-ba13-cc922a18033f" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="PrintingAvailable" display-name="Доступность управления печатью" uuid="68d681e0-f9eb-4fbf-afac-f1cea3e3cf04" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="EventTableSortAvailability" display-name="Видимость команд сортировки" uuid="abb4516b-e334-4503-af2f-d0faee98b823" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<object access-modifier="private" name="AllowActionInSourceColumn" display-name="Разрешить действия в столбце источник события" uuid="f5f921cb-ae01-4cb1-81a6-c32e7ef6bced" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if(!AllowActionInSourceColumn)
{
	objectId=0;
}]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="objectId" display-name="objectID" uuid="d125c745-28f7-45f2-8332-e0509f9e11f5" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="2"/>
	<object access-modifier="private" name="UseSecurity" display-name="Использовать сервер безопасности для определения прав" uuid="47038155-957e-4eed-b9db-2b3ca634a21b" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2"/>
	<init target="UseSecurity" ver="5" value="false"/>
	<param access-modifier="private" name="SecurityApplication" display-name="Имя приложения с правами безопасности" uuid="2bdd1f41-75b3-42fd-9c01-f2332c28e4a5" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	<init target="SecurityApplication" ver="5" value="Alarms"/>
	<object access-modifier="private" name="RequestEventsStart" display-name="Запрашивать активные события при запуске" uuid="886faca8-162a-4a6f-82aa-22c0fa304ac2" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.func_Operative_mode();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="FollowLatestEvent" display-name="Принудительное слежение за последним событием" uuid="d0e52f51-6de3-40c4-ac4e-0fa2df43302c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.EventSettings.ResetDecorators();
]]>
			</body>
		</do-on>
	</object>
	<do access-modifier="private" name="LogOn" display-name="LogOn" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[// При использовании безопасности возвращаем false
if (UseSecurity)
	return false;

// Имя пользователя не может быть пустым
if (userName == "")
	return false;

Main_panel.private.UserName = userName;
return true;]]>
		</body>
		<param access-modifier="private" name="userName" display-name="" uuid="87e0e189-b711-4884-b599-875010ea5318" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
	</do>
	<do access-modifier="private" name="LogOff" display-name="LogOff" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[// При использовании безопасности возвращаем false
if (UseSecurity)
	return false;

Main_panel.private.UserName = "";
return true;]]>
		</body>
	</do>
	<do access-modifier="private" name="AckSelected" display-name="AckSelected" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255" form-by-id="true">
		<body kind="om">
			<![CDATA[if (!Main_panel.private.InitComplete) return -1;

// Функция работает только в оперативном режиме
if (ActiveMode != 0)
	return -1; 

// При принудительном слежении функция работает только в режиме снимка
if (FollowLatestEvent && !Main_panel.ToolBar.SnapshotON)
	return -1;
	
if (!Main_panel.private.Permission.Acknowledgment) 
{	
	if (Main_panel.private.Permission.Acknowledgment.Result==-1)
		Main_panel.private.MessageNoLogOn.Invoke();	
	else if (Main_panel.private.Permission.Acknowledgment.Result==-2)
		Main_panel.private.MessageNoPermission.Invoke();	
	return -2;
}

if (AllowAckSequence)
	Main_panel.private.nAckMode = 3; // Устанавливаем режим квитирования последовательности
else Main_panel.private.nAckMode = 1;  // Устанавливаем режим квитирования выбранных сообщений

Main_panel.private.AckDataCollect();
if (Main_panel.private.AckedMsgs == "[]")
	return 0;// Если квитировать нечего, то возвращаем 0

Main_panel.private.AckComment = Main_panel.private.ComputerName; // Комментарий квитирования по умолчанию
if (RequestAcknowledgmentComment)
	Main_panel.private.OpenCommentAck.Invoke(); // Если требуется ввод комментария квитирования, то открываем окно ввода
else
	Main_panel.private.AckContinue.Invoke();
return -3;]]>
		</body>
	</do>
	<do access-modifier="private" name="AckAll" display-name="AckAll" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255" form-by-id="true">
		<body kind="om">
			<![CDATA[if (!Main_panel.private.InitComplete) return -1;

// Функция работает только в оперативном режиме
if (ActiveMode != 0)
	return -1; 

if (!Main_panel.private.Permission.Acknowledgment) 
{	
	if (Main_panel.private.Permission.Acknowledgment.Result==-1)
		Main_panel.private.MessageNoLogOn.Invoke();	
	else if (Main_panel.private.Permission.Acknowledgment.Result==-2)
		Main_panel.private.MessageNoPermission.Invoke();	
	return -2;
}

Main_panel.private.nAckMode = 2;// Устанавливаем режим квитирования всех сообщений

Main_panel.private.AckDataCollect();
if (Main_panel.private.AckedMsgs == "[]")
	return 0;// Если квитировать нечего, то возвращаем 0

Main_panel.private.AckComment = Main_panel.private.ComputerName;// Комментарий квитирования по умолчанию
if (RequestAcknowledgmentComment)
	Main_panel.private.OpenCommentAck.Invoke(); // Если требуется ввод комментария квитирования, то открываем окно ввода
else
	Main_panel.private.AckContinue.Invoke();
return -4;]]>
		</body>
	</do>
	<do access-modifier="private" name="ClearOperativeEventList" display-name="ClearOperativeEventList" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255">
		<body kind="om">
			<![CDATA[if (!Main_panel.private.InitComplete) return -1;

// Функция работает только в оперативном режиме и не в режиме снимка
if (ActiveMode != 0 || Main_panel.ToolBar.SnapshotON)
	return -1;

if (!Main_panel.private.Permission.ClearingCurrentEvents)
{	
	if (Main_panel.private.Permission.ClearingCurrentEvents.Result==-1)
		Main_panel.private.MessageNoLogOn.Invoke();	
	else if (Main_panel.private.Permission.ClearingCurrentEvents.Result==-2)
		Main_panel.private.MessageNoPermission.Invoke();	
	return -2;
}

rowsCount:int4 = Main_tables_Operative.TableModel_1.GetRowCount();
Main_tables_Operative.TableModel_1.Clear();
Main_tables_Operative.ClearSoundQueue();
return rowsCount;]]>
		</body>
	</do>
	<do access-modifier="private" name="ClearAcknowledgedEvents" display-name="ClearAcknowledgedEvents" ver="5" type="int4" type-id="74222947-f188-4195-8e0e-e33bd9827255" form-by-id="true">
		<body kind="om">
			<![CDATA[if (!Main_panel.private.InitComplete) return -1;

// Функция работает только в оперативном режиме и не в режиме снимка
if (ActiveMode != 0 || Main_panel.ToolBar.SnapshotON)
	return -1;

if (!Main_panel.private.Permission.ClearingCurrentEvents)
{	
	if (Main_panel.private.Permission.ClearingCurrentEvents.Result==-1)
		Main_panel.private.MessageNoLogOn.Invoke();	
	else if (Main_panel.private.Permission.ClearingCurrentEvents.Result==-2)
		Main_panel.private.MessageNoPermission.Invoke();	
	return -2;
}

currentRow:int4;
removedRows:int4 = 0; // Количество удаленных строк
AckSost:variant; // Статус квитирования в variant
severity:uint2; // Значение важности

col6index:var = Main_tables_Operative.Table_Operative_mode.MapColumnToModel(Main_panel.private.TableView.Static.Column_Severity.GetIndex());
col7index:var = Main_tables_Operative.Table_Operative_mode.MapColumnToModel(Main_panel.private.TableView.Static.Column_Ack.GetIndex());
Main_tables_Operative.TableModel_1.TableIterator_1.FirstSelected();
while (!Main_tables_Operative.TableModel_1.TableIterator_1.End())
{
	currentRow = Main_tables_Operative.Table_Operative_mode.MapRowToModel(Main_tables_Operative.TableModel_1.TableIterator_1.CurrentRow);
	
	// Состояние "Квитировано" в случае, если квитирование не требуется равно EMPTY, если квитировано = true, если неквитировано = false;	
	AckSost = Main_tables_Operative.TableModel_1.GetCellData(currentRow, col7index);

	//Если поле "Квитировано" не пустое (требуется квитирование) то смотрим на статус квитирования, и важность если флаг установлен
	removeit:bool = false;
	if (Variant.IsEmpty(AckSost))
		removeit = true;
	else
	{
		if (Variant.ToBool(AckSost,false))
			removeit = true;
		else if(NotAckOtherEvents.Value)
		{
			severity = Variant.ToUint2( Main_tables_Operative.TableModel_1.GetCellData(currentRow, col6index) ,0);
			if (Main_panel.private.isInformativeEvent(severity))
				removeit = true;
		}
	}
	
	if (removeit)
	{
		Main_tables_Operative.Table_Operative_mode.TableModel.RemoveRow(currentRow);
		removedRows += 1;
		// при удалении строки, переход к следующей происходит автоматически
	}
	else
		Main_tables_Operative.TableModel_1.TableIterator_1.Next();
}
return removedRows;]]>
		</body>
	</do>
	<object access-modifier="private" name="LookLatestEvent" display-name="Слежение за последним поступившим событием" uuid="6e8118f5-77d8-4e2b-848f-d19ae7cc44f7" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.tempAutoScroll = value; //Временная переменная]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="Mute" display-name="Беззвучный режим включен" uuid="7ba040d0-ac5c-4bec-8016-2b34f1148e67" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[// Включаем-выключаем громкость воспроизведения
if (Value)
	Main_tables_Operative.Sound.Volume = 0;
else	Main_tables_Operative.Sound.Volume = 0.8;]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="FileSystemAccess" display-name="Доступность файловой системы" uuid="c33dba5d-effd-4624-92c9-c416f223c74a" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[// требуется обновить, так как значение корневого пути экспорта зависит от этого ограничения
Main_panel.private.Export.ExportPath.Update(Main_panel.private.Export.ExportPath.Value);]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ActiveConditionsList" display-name="Список активных условий" uuid="869ea3ea-cd27-43d7-8010-b5d9b8dc413d" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[alarmQueryMode: uint1 = TypeConvert.ToUint1(ActiveConditionsList ? 1 : 2);
if (Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Mode != alarmQueryMode)
	Main_panel.private.func_Operative_mode();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ConfigurationFolder" display-name="Путь к папке с конфигурацией" uuid="3ad24066-7557-4a62-bd75-c82bdcd544bb" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="3"/>
	<do access-modifier="private" name="SkipCurrentSound" display-name="SkipCurrentSound" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[// Сбрасываем воспроизведение текущего звука
Main_tables_Operative.SoundPhrase = "";
Main_tables_Operative.SoundPhraseInfo = "";
Main_tables_Operative.Sound.Active = false;

// Запускаем проигрывание следующего
Main_tables_Operative.PlaySoundForNextAlarm();]]>
		</body>
	</do>
	<do access-modifier="private" name="ClearSoundQueue" display-name="ClearSoundQueue" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[if (!Main_panel.private.InitComplete) return;

if (Main_panel.private.ApItem.AdviseState == 2)
{
	Main_panel.private.ApItem.TrySetValue(true);//Записываем и сбрасываем тег очистки очереди
	Main_panel.private.ApItem.TrySetValue(false);
}
else
	Main_tables_Operative.ClearSoundQueue();]]>
		</body>
	</do>
	<do access-modifier="private" name="SetAdvancedRequestFilterAsJson" display-name="SetAdvancedRequestFilterAsJson" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="StringJSON" display-name="" uuid="0ddefd86-7ef5-4858-a6b9-cb1cffb75e3a" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="2"/>
		<body kind="javascript">
			<![CDATA[//Функция устанавливает расширенный фильтр запроса по заданным условиям фильтрации. В случае неверного задания JSON-строки возвращает false
try
{
	Main_tables_Historical.SetRequestFilter(StringJSON);
	Main_tables_Historical.TableModel_1.ApAlarmQuery_1.Reload();
	return true;
} 
catch
{
	Main_tables_Historical.SetRequestFilter("");
	return false;
}]]>
		</body>
	</do>
	<do access-modifier="private" name="SetHistoricalInterval" display-name="SetHistoricalInterval" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<param access-modifier="private" name="t1" display-name="" uuid="4aee0b78-ec8a-4ecb-9d2d-ef98a54d0671" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="2"/>
		<param access-modifier="private" name="t2" display-name="" uuid="df9c6271-5e3f-4796-b875-be7331b9d414" base-type="uint8" base-type-id="c8ff7701-da6e-4d53-888a-81fa680ff561" ver="2"/>
		<body kind="om">
			<![CDATA[// Проверяем корректность ввода дат запроса
if (t1 == 0 || t2 == 0 || t2 <= t1)
	return false;

Main_tables_Historical.TableModel_1.Clear();
Main_tables_Historical.TableModel_1.openedFilePath = "";
Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalRangeStart = DateTime.ToUtc(t1);
Main_tables_Historical.TableModel_1.ApAlarmQuery_1.HistoricalRangeEnd = DateTime.ToUtc(t2);
Main_tables_Historical.TableModel_1.ApAlarmQuery_1.Reload();
Main_tables_Historical.TableModel_1.BeginReadAsync();
Main_panel.private.LoadSaveBusy.LoadingHistory = true;

Main_panel.private.ShowHistoricalInterval(t1, t2);
return true;]]>
		</body>
	</do>
	<do access-modifier="private" name="SetAdvancedFilterAsJson" display-name="SetAdvancedFilterAsJson" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="javascript">
			<![CDATA[//Функция устанавливает расширенный фильтр отображения по заданным условиям фильтрации.
Main_panel.private.Initializer();//для применения фильтров требуется применение конфигурации столбцов

var TableColumn=[];
for (let i = 0; i < Main_tables_Operative.Table_Operative_mode.Columns.Length; i++)
	if (Main_tables_Operative.Table_Operative_mode.Columns[i].Title != "-")//cheat1
	{
		TableColumn.push(Main_tables_Operative.Table_Operative_mode.Columns[i]);
		TableColumn.push(Main_tables_Historical.Table_History_mode.Columns[i]);
	}

var success = 0;
var errors = 0;

// Записываем в соответствующий JSON-фильтр, если возникает ошибка - возвращаем false, иначе - true
for (let i = 0; i < TableColumn.length; i++)
{
	if (TableColumn[i].Id == ColumnID)
	{
		try
		{
			TableColumn[i].JsonFilter = FilterExpr;
			success += 1;
		}
		catch(err)
		{
			TableColumn[i].JsonFilter = "";
			errors += 1;
		}
	}
}

// Выделение строки
if (JSON.parse(Main_tables_Operative.Table_Operative_mode.GetSelectedRows()) == "")
	Main_tables_Operative.Table_Operative_mode.SetSelectedRows("[0]");
if (JSON.parse(Main_tables_Historical.Table_History_mode.GetSelectedRows()) == "")
	Main_tables_Historical.Table_History_mode.SetSelectedRows("[0]");

// Меняем состояние фильтра в статусной строке
StatePanel.ViewFilterStateChange();
StatePanel.UpdateMessageCount();

return errors == 0 && success > 0;
]]>
		</body>
		<param access-modifier="private" name="ColumnID" display-name="" uuid="ce24a175-287c-4523-8f83-afce106b505c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		<param access-modifier="private" name="FilterExpr" display-name="" uuid="907aba9e-51ea-4719-b083-d85b79f3ba84" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	</do>
	<do access-modifier="private" name="RequestRecentEvents" display-name="RequestRecentEvents" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="javascript">
			<![CDATA[// Подгрузка исторических события в таблицу оперативного режима

var AND = [];
if (onlyNotAcked)
	AND.push({"NOT":{"AND":[{"acked":true},{"ack_required":true}]}});

// Если задан JSON-фильтр, то формируем массив вместе с условием квитирования
if (requestAdvancedFilterAsJson.length > 2)
	AND.push(JSON.parse(requestAdvancedFilterAsJson));

var jsonString = "";
if (AND.length == 1)
	jsonString = JSON.stringify(AND[0]);
else if (AND.length > 1)
	jsonString = JSON.stringify({AND});

// Флаг проверки на дублирование сообщений, будет сброшен в методе удаления дубликатов
Main_panel.private.DuplicateCheck = true; 


Main_tables_Operative.TableModel_1.ApAlarmQuery_1.HistoricalFilter = jsonString;
Main_tables_Operative.TableModel_1.ApAlarmQuery_1.HistoryPreloadInterval = intervalDuration * 3600; // Устанавливаем интервал в секундах
Main_tables_Operative.TableModel_1.ApAlarmQuery_1.ReloadSmart(false, false);
]]>
		</body>
		<param access-modifier="private" name="intervalDuration" display-name="" uuid="328e2977-8e6b-41a9-92af-749a50e274d4" base-type="float8" base-type-id="7ad62ecf-96dd-4751-9b96-e77954b44409" ver="3"/>
		<param access-modifier="private" name="onlyNotAcked" display-name="" uuid="97998d45-24d1-4a37-96e6-8a954d6cb24d" base-type="bool" base-type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" ver="3"/>
		<param access-modifier="private" name="requestAdvancedFilterAsJson" display-name="" uuid="ebcb9a78-385d-4fe9-9fb1-f11bcc831967" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	</do>
	<param access-modifier="private" name="init_ApSource" display-name="Ссылка на источник AP" uuid="55afd295-c048-4522-88c5-184b60aa1dc8" base-type="ApSource" base-type-id="966603da-f05e-4b4d-8ef0-919efbf8ab2c" base-const="true" base-ref="true" ver="3"/>
	<object access-modifier="private" name="pTheme" display-name="Тема оформления" uuid="56b08bdb-b656-42ca-a768-d98e9bab15e6" base-type="Theme" base-type-id="05d4d7df-0f8e-4ec1-ac85-b5460e30af81" base-const="true" base-ref="true" ver="4"/>
	<param access-modifier="private" name="ClearSoundQueryTag " display-name="Тег сигнала очистки очереди звуков" uuid="5d9a4c75-1da5-4436-847b-8f49991d0a59" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	<init target="ClearSoundQueryTag " ver="5" value=""/>
	<object access-modifier="private" name="DisplayToolbar" display-name="Показывать панель инструментов" uuid="f6a2fd3e-4edf-4383-ad1a-e87f429188d3" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="DisplayStatePanel" display-name="Показывать строку состояния" uuid="13cd9119-9249-4e9a-aa19-b85f8f100baa" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<do access-modifier="private" name="LoadConfiguration" display-name="LoadConfiguration" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8" form-by-id="true">
		<param access-modifier="private" name="configurationFolder" display-name="" uuid="524ccacc-7451-4fac-ba72-a8421d8c3bb7" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		<body kind="javascript">
			<![CDATA[//Функция загрузки конфигурации
//DebugTool_1.Log("LoadConfiguration from " + configurationFolder);

var result = true;

ConfigurationFolder.Value = configurationFolder;

if (Main_panel.private.IsAbsolutePath(configurationFolder))
{
	Main_panel.private.ConfigurationPath = configurationFolder;
}
else if (configurationFolder == "")
{
	// путь по умолчанию
	Main_panel.private.ConfigurationPath = Main_panel.private.GetProgramDataFolder();
}
else
{
	// относительный путь задается относительно папки по умолчанию
	Main_panel.private.ConfigurationPath = File.CombinePath(Main_panel.private.GetProgramDataFolder(), configurationFolder);
}

// абсолютный путь к папке со звуковыми файлами
Main_tables_Operative.soundFolderPath = File.CombinePath(File.CombinePath(File.ProjectFolder/*output*/, "resources"), "Sounds");
// относительный путь используемый для воспроизведения
Main_tables_Operative.soundFolder = "Sounds";

//DebugTool_1.Log("ConfigurationPath: " + Main_panel.private.ConfigurationPath);
try
{
	// Создаем папку конфигурации, если ее нет
	if (!File.Exists(Main_panel.private.ConfigurationPath))
		File.CreateRecursiveFolder(Main_panel.private.ConfigurationPath);
}
catch(error)
{
	log("Не удалось создать папку с конфигурацией: " + error);
	result = false;
}

// Чтение конфигурации таблицы
if (!Main_panel.private.TableView.LoadSettings())
	result = false;

// Чтение конфигурации панели инструментов
if (!Main_panel.ToolBar.LoadSettings())
	result = false;

// Чтение шаблонов комментариев
if (!Main_panel.private.CommentPattern.LoadSettings())
	result = false;

// Чтение конфигурации событий
if (!Main_panel.private.EventSettings.LoadSettings())
	result = false;

// Загрузка параметров экспорта
if (!Main_panel.private.Export.LoadSettings())
	result = false;

// Чтение настроек групп важности
if (!Main_panel.private.SeverityGroups.LoadSettings())
	result = false;

// Чтение предустановленных фильтров
if (!Main_panel.private.PresetFilters.LoadSettings())
	result = false;

if (!Main_panel.private.ContextMenu.LoadSettings())
	result = false;

if (!Main_panel.private.Print.LoadSettings())
	result = false;

// Чтение механизмов очистки
if (!Main_panel.private.QueryProcessing.LoadSettings())
	result = false;

return result;]]>
		</body>
	</do>
	<object access-modifier="private" name="DisplayToolbarAtStartup" display-name="Отображать панель инструментов при запуске" uuid="90718164-01cc-4071-99ab-c54406b0a0fb" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="DisplayStatePanelAtStartup" display-name="Отображать строку состояния при запуске" uuid="e12d71b4-b40e-4d97-b78e-bf82caa9c213" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<do access-modifier="private" name="SetSize" display-name="SetSize" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[//Определяем вес активной таблицы
if (ActiveMode == 0) 
{
	Main_tables_Operative.LayoutWeight_1.Weight = 100;
	Main_tables_Historical.LayoutWeight_1.Weight = 0;
}
else
{
	Main_tables_Historical.LayoutWeight_1.Weight = 100;
	Main_tables_Operative.LayoutWeight_1.Weight = 0;
	Main_tables_Historical.StatusBar.SetVisible();
}]]>
		</body>
	</do>
	<object access-modifier="private" name="HideColumnTitle" display-name="Скрыть заголовки столбцов" uuid="faf31b16-8145-4ccf-95c5-dde50f180a4c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="LineTransfer" display-name="Перенос строк" uuid="47a17ebe-fc27-497e-804a-6ba458040437" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="AlwaysOnTopForm" display-name="Поверх всех окон" uuid="c3b6675a-cb2a-4075-a8ff-e5ef19abf862" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="HideAckedEvents" display-name="Не отображать неактивные квитированные события" uuid="baa5d648-783b-4506-a953-ad1efa180445" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.func_Operative_mode();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="NotAckOtherEvents" display-name="Не требовать квитирования группы Прочие" uuid="26ae491e-f220-4db4-84aa-34af9844d81c" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.EventSettings.ResetDecorators();

if (!value)
	Main_panel.private.SeverityGroups.Range4.SoundEnable = Main_panel.private.SeverityGroups.Range4.tempSoundEnable;
else Main_panel.private.SeverityGroups.Range4.SoundEnable = false;]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="SubscriptionAdvancedFilter" display-name="Фильтр подписки" uuid="7576fb62-1a32-4f91-9c6f-eff1953b2709" base-type="notifying_string" base-type-id="14976fbf-36ab-415f-abc3-9f8fdc217351" ver="3">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[if (Main_tables_Operative.TableModel_1.ApAlarmQuery_1.Filter != SubscriptionAdvancedFilter)
	Main_panel.private.func_Operative_mode();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="ShowRelativeTag" display-name="Отображать относительный тег источника сообщения" uuid="60745d2b-7d79-41a3-b672-8de89ce9b8a4" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="EnableSortingOnGridHeader" display-name="Доступность сортировки по заголовкам столбцов таблицы" uuid="61395604-3551-4f0b-acd1-b7243a2d63c2" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="GUIModificationAvailable" display-name="Возможность изменения вида пользовательского интерфейса" uuid="a3f9e3ba-92d4-405b-9871-d6707c31709e" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="ShowMilliseconds" display-name="Отображать миллисекунды" uuid="dbcf4584-7a1c-418c-8078-7ef9b845e51a" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="IsFullAccessAllowed" display-name="Разрешить полный доступ" uuid="1965564e-e7bd-43e1-975e-5767cd476403" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="3"/>
	<object access-modifier="private" name="MultiSelectAvailable" display-name="Доступность выбора нескольких строк в таблице" uuid="4dcaf975-4e0d-42f5-953f-5aba94f1a913" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="ActiveMode" display-name="Активный режим работы (оперативный или исторический)" uuid="f22ad0e6-96f0-4a46-b71d-dfe71975bacd" base-type="notifying_int4" base-type-id="5ccca629-a45d-46c8-a56c-83ecde8126f7" ver="2">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.CheckActiveMode(); // Проверка разрешения выбранного режима

timeLocal: uint8;
timeStart: uint8;

if (value==0)
{
	// Оперативный режим
	Main_panel.private.OperTableEmpty = Main_tables_Operative.Table_Operative_mode.GetRowCount() == 0;
}
else 
{
	// Исторический режим	
	if (!Main_panel.private.LoadSaveBusy.LoadingHistory && Main_panel.ToolBar.RecHistory.Date_start.Value == 0) 
	{
		timeLocal = DateTime.ToLocal(DateTime.UtcNow()); // Местное время
		timeStart = DateTime.AddHours(timeLocal, - DefaultHistoricalInterval); // Время для начала диапазона
		Main_panel.private.ShowHistoricalInterval(timeStart, timeLocal);
	}
	Main_panel.private.HistTableEmpty.Update();
}

//Импорт параметров между таблицами
Main_panel.private.TableView.SetTableParameters();

SetSize();//Обновляем веса разметки для смены таблиц

// Обновляем статистику
StatePanel.UpdateMessageCount();]]>
			</body>
		</do-on>
	</object>
	<init target="AcknowledgmentDoubleClick" ver="5" value="true"/>
	<init target="AllowAckSequence" ver="5" value="false"/>
	<init target="RequestAcknowledgmentComment" ver="5" value="true"/>
	<init target="AllowAddComment" ver="5" value="true"/>
	<init target="WriteComputerNameToComment" ver="5" value="true"/>
	<init target="AcknowledgmentAvailable" ver="5" value="true"/>
	<init target="ClearingCurrentEventsAvailable" ver="5" value="true"/>
	<init target="EditingSettingsAvailable" ver="5" value="true"/>
	<init target="ExportDataAvailability" ver="5" value="true"/>
	<init target="FilterAvailable" ver="5" value="true"/>
	<init target="SoundPlaybackManagmentAvailable" ver="5" value="true"/>
	<init target="SnapshotAvailable" ver="5" value="true"/>
	<init target="EventHistoryAvailable" ver="5" value="true"/>
	<init target="CurrentEventsAvailable" ver="5" value="true"/>
	<init target="PrintingAvailable" ver="5" value="true"/>
	<init target="EventTableSortAvailability" ver="5" value="true"/>
	<init target="AllowActionInSourceColumn" ver="5" value="true"/>
	<init target="RequestEventsStart" ver="5" value="true"/>
	<init target="FollowLatestEvent" ver="5" value="false"/>
	<init target="Mute" ver="5" value="false"/>
	<init target="FileSystemAccess" ver="5" value="true"/>
	<init target="ActiveConditionsList" ver="5" value="false"/>
	<init target="ConfigurationFolder" ver="5" value=""/>
	<init target="DisplayToolbar" ver="5" value="true"/>
	<init target="DisplayStatePanel" ver="5" value="true"/>
	<init target="DisplayToolbarAtStartup" ver="5" value="true"/>
	<init target="DisplayStatePanelAtStartup" ver="5" value="true"/>
	<init target="HideColumnTitle" ver="5" value="false"/>
	<init target="ActiveMode" ver="5" value="0"/>
	<do access-modifier="private" name="SetAdvancedFilter" display-name="SetAdvancedFilter" ver="5" type="bool" type-id="7c9fe1ab-1ee2-42d8-939f-94ce3e89fca8">
		<body kind="om">
			<![CDATA[//Функция устанавливает фильтр отображения по заданным условиям фильтрации. 

// Формирование JSON-строки
jsonFilter: string;
if (ColumnID == "group" || ColumnID == "ack" || ColumnID == "active" || ColumnID == "ack_required" || ColumnID == "kind")//фильтрация по отображаемому тексту
{
	jsonFilter = Main_panel.private.JSONstringForFilter(FilterExpr,"message",0,true);
}
else if (ColumnID == "severity" || ColumnID == "quality" || ColumnID == "value" || ColumnID == "cookie" || ColumnID == "object_id")//фильтрация по числовому значению
{
	jsonFilter = Main_panel.private.JSONstringForFilter(FilterExpr,"severity",0,false);
}
else if (ColumnID == "time" || ColumnID == "active_time" || ColumnID == "prev_active_time" || ColumnID == "deactive_time" || ColumnID == "ack_time")//фильтрация по времени
{ 
	jsonFilter = Main_panel.private.JSONstringForFilter(FilterExpr,"time",0,false);
}
else//message,source,actor_id,ack_comment,area_path //фильтрация по строковому значению
	jsonFilter = Main_panel.private.JSONstringForFilter(FilterExpr,"message",0,false);

return SetAdvancedFilterAsJson(ColumnID, jsonFilter);]]>
		</body>
		<param access-modifier="private" name="ColumnID" display-name="" uuid="33320f21-fbaf-4145-b7ca-51849df97bc6" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
		<param access-modifier="private" name="FilterExpr" display-name="" uuid="856927d1-4410-4e4a-b0a4-45fd319855a0" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="3"/>
	</do>
	<init target="AlwaysOnTopForm" ver="5" value="true"/>
	<init target="LookLatestEvent" ver="5" value="true"/>
	<object access-modifier="private" name="MaxVisibleOrdinaryEvents" display-name="Максимальное количество обычных событий" uuid="644e1c29-d417-4e7e-80e4-a59af163c492" base-type="uint4" base-type-id="a42274b8-724b-4f03-bcf9-dd8498c29f8e" ver="3"/>
	<init target="MaxVisibleOrdinaryEvents" ver="5" value="500"/>
	<designed target="ZValue" value="0" ver="3"/>
	<init target="LineTransfer" ver="5" value="false"/>
	<init target="HideAckedEvents" ver="5" value="false"/>
	<init target="NotAckOtherEvents" ver="5" value="false"/>
	<init target="SubscriptionAdvancedFilter" ver="5" value=""/>
	<designed target="Opacity" value="1" ver="3"/>
	<init target="ShowRelativeTag" ver="5" value="false"/>
	<do access-modifier="private" name="CancelHistoryQuery" display-name="CancelHistoryQuery" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Main_tables_Historical.TableModel_1.CancelReadAsync();]]>
		</body>
	</do>
	<do access-modifier="private" name="DisplayCurrentEventsSnapshot" display-name="DisplayCurrentEventsSnapshot" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Main_tables_Operative.TableModel_1.Frozen = true;
Main_panel.ToolBar.SnapshotON = Main_tables_Operative.TableModel_1.Frozen;]]>
		</body>
	</do>
	<do access-modifier="private" name="DisplayCurrentEvents" display-name="DisplayCurrentEvents" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Main_tables_Operative.TableModel_1.Frozen = false;
Main_panel.ToolBar.SnapshotON = Main_tables_Operative.TableModel_1.Frozen;]]>
		</body>
	</do>
	<init target="EnableSortingOnGridHeader" ver="5" value="true"/>
	<init target="GUIModificationAvailable" ver="5" value="true"/>
	<init target="ShowMilliseconds" ver="5" value="true"/>
	<init target="IsFullAccessAllowed" ver="5" value="true"/>
	<object access-modifier="private" name="DefaultHistoricalInterval" display-name="Интервал запроса истории по умолчанию, час" uuid="b7ea75ef-5d2e-4e7b-a27a-0ad2bb4ddca7" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="3"/>
	<init target="DefaultHistoricalInterval" ver="5" value="24"/>
	<object access-modifier="private" name="ExtensionInterval" display-name="Расширяющий интервал (час)" uuid="6345ab4e-493c-4ff1-b075-5f154094ded6" base-type="notifying_uint4" base-type-id="2606f4f1-fd02-40e5-b3c8-9c59e02296fb" ver="5" description="" cardinal="1"/>
	<object access-modifier="private" name="EventsChronology" display-name="Хронология исторических событий" uuid="5ec66e05-b4eb-470d-acce-5fa454f6ea1a" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="3"/>
	<init target="EventsChronology" ver="5" value="0"/>
	<object access-modifier="private" name="MergeEvents" display-name="Режим сведения событий" uuid="af9e75f3-f12b-4d80-b16d-c6f9cec74827" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[Main_panel.private.EventSettings.MergeModeOff = (value > 1)?(true):(false);
Main_panel.private.EventSettings.ResetDecorators();
]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="HorizontalScrollBarPolicy" display-name="Режим отображения полосы горизонтальной прокрутки" uuid="b969e892-d231-4319-a5b3-a0867d0e4b9c" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="3"/>
	<object access-modifier="private" name="VerticalScrollBarPolicy" display-name="Режим отображения полосы вертикальной прокрутки" uuid="ef32a49b-1e2e-417e-bde2-5f7ae494d415" base-type="notifying_uint1" base-type-id="fed14c54-414c-56bd-549a-8d761c4d6200" ver="3"/>
	<object access-modifier="private" name="ExportFileNameFormat" display-name="Формат имени файла экспорта" uuid="8c655d24-0c3e-4352-bc7d-7d4f0b7e6d1c" base-type="string" base-type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d" ver="4"/>
	<object access-modifier="private" name="DisplaySeverityStatistics" display-name="Отображать детальную статистику по важности" uuid="79ef954f-99ea-46bd-ba8e-eb8ff0e15935" base-type="notifying_bool" base-type-id="f8797810-1baa-4a1f-af36-cf839bf252e8" ver="5" description="" cardinal="1">
		<do-on access-modifier="private" name="Handler_1" display-name="Handler_1" ver="5" event="ValueChanged">
			<body kind="om">
				<![CDATA[StatePanel.UpdateMessageCount();]]>
			</body>
		</do-on>
	</object>
	<object access-modifier="private" name="OnPrint" display-name="OnPrint" uuid="04c090c2-7ad9-4a89-8d1d-6c3c13d28eec" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<object access-modifier="private" name="OnSoundPlayed" display-name="OnSoundPlayed" uuid="1ba0d5e5-e9ee-4ee7-a70c-06aae67148de" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<object access-modifier="private" name="OnPlayingSounds" display-name="OnPlayingSounds" uuid="02a75e36-0ec4-4cec-a896-1eea0e966563" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<object access-modifier="private" name="OnFinishedPlayingSounds" display-name="OnFinishedPlayingSounds" uuid="3e336dd2-22e3-4e94-b90c-4c76f35a5b95" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<do-trace access-modifier="private" target="PenColor" ver="5">
		<body>
			<![CDATA[pTheme.BorderColor]]>
		</body>
	</do-trace>
	<do-trace access-modifier="private" target="BrushColor" ver="5">
		<body>
			<![CDATA[pTheme.BackgroundColor]]>
		</body>
	</do-trace>
	<object access-modifier="private" name="OnExport" display-name="OnExport" uuid="8d0d9ff5-dc8c-41e1-a7a8-94535f1995a4" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<do access-modifier="private" name="GetEventParam" display-name="GetEventParam" ver="5" type="string" type-id="76403785-f3d5-41a7-9eb6-d19d2aa2d95d">
		<body kind="om">
			<![CDATA[if (numParam >= 0 && numParam < Main_panel.private.EventParams.Length)
	return Main_panel.private.EventParams[numParam];
else
	return "";]]>
		</body>
		<param access-modifier="private" name="numParam" display-name="" uuid="e94c1da9-9d6d-4367-9e15-e3034fd8be10" base-type="int4" base-type-id="74222947-f188-4195-8e0e-e33bd9827255" ver="4"/>
	</do>
	<do access-modifier="private" name="ReloadHistory" display-name="ReloadHistory" ver="5" type="void" type-id="cfbbcafa-e13e-4354-a33a-6e57b818e4da">
		<body kind="om">
			<![CDATA[Main_panel.private.LoadHistory();]]>
		</body>
	</do>
	<init target="AcknowledgmentAllVisible" ver="5" value="false"/>
	<object access-modifier="private" name="OnSave" display-name="OnSave" uuid="a3b1d9cf-d814-468e-9fbb-11ffcee61e58" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<object access-modifier="private" name="OnAck" display-name="OnAck" uuid="a1fd600f-796a-4d6a-bbe4-4d32e377b168" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<init target="MultiSelectAvailable" ver="5" value="true"/>
	<init target="AckAllAvailable" ver="5" value="true"/>
	<init target="HorizontalScrollBarPolicy" ver="5" value="0"/>
	<init target="VerticalScrollBarPolicy" ver="5" value="0"/>
	<init target="ExtensionInterval" ver="5" value="0"/>
	<object access-modifier="private" name="OnOpenTrends" display-name="OnOpenTrends" uuid="be6cec06-7c45-4436-bd85-cf7c969be078" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
	<object access-modifier="private" name="OnOpenForm" display-name="OnOpenForm" uuid="1bc8d417-5121-47bd-aa31-e4bf3ff47c91" base-type="Action" base-type-id="a9ee9770-1c4a-44c9-b815-157d9fc2ab95" base-const="true" base-ref="true" ver="4"/>
</type>

